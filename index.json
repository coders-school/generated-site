[{"categories":["Post","Kurs C++ online","W skrócie"],"content":"Konwencje - dobre praktyki Pracując w jakimkolwiek projekcie powinniśmy stosować się do określonej konwencji - zbioru zasad, które określają nam w jaki sposób pisać nasz kod. Konwencje opisują m.in. w jaki sposób nazywamy zmienne i funkcje, jaka jest długość linii i jakie stosujemy wcięcia. W tym skrócie dowiesz się, jakie konwencje są najczęściej stosowane w C++. ","date":"2021-01-07","objectID":"/post/konwencje-w-skrocie/:0:0","tags":["c++","kurs online","dobre praktyki","konwencje"],"title":"Konwencje w skrócie","uri":"/post/konwencje-w-skrocie/"},{"categories":["Post","Kurs C++ online","W skrócie"],"content":"Współpraca zespołowa - dobre praktyki Pracując w firmie oprócz samych umiejętności programowania, potrzebne są również umiejętności pracy zespołowej. Znajomość Scruma czy różnych technik programowania w grupach może się przydać w Twojej przyszłej pracy. W tym krótkim materiale dowiesz się na przykład co to jest Scrum Poker lub co robić, gdy zachorujesz i nie jesteś w stanie kontynuować swojej pracy. ","date":"2021-01-02","objectID":"/post/scrum-w-skrocie/:0:0","tags":["c++","kurs online","dobre praktyki","wspolpraca zespolowa"],"title":"Scrum w skrócie","uri":"/post/scrum-w-skrocie/"},{"categories":["Post","Kurs C++ online","W skrócie"],"content":"Debuggery - narzędzia programisty Debugger to kolejne narzędzie potrzebne każdemu programiście, które pozwala zaoszczędzić godziny, dni lub tygodnie szukania błędu w naszym kodzie. Dają one możliwość kontrolowania wykonywanego programu - zatrzymywania go, wykonywania instrukcji krok po kroku i śledzenia wartości poszczególnych zmiennych. W tym skrócie z lekcji kursu C++ znajdziesz informacje jak używać debuggerów GDB i LLDB. ","date":"2020-11-26","objectID":"/post/debuggery-w-skrocie/:0:0","tags":["c++","kurs online","narzedzia","debuggery"],"title":"Debuggery w skrócie","uri":"/post/debuggery-w-skrocie/"},{"categories":["Post","Kurs C++ online","W skrócie"],"content":"CMake - narzędzia programisty Zapewne słyszałeś już o CMake. To wieloplatformowe narzędzie pozwala na automatyzację budowania projektów w różnych środowiskach. Jego popularność oraz uniwersalność sprawiają, że ciężko obecnie wyobrazić sobie pracę bez niego. Nie każdy jednak wie, jak CMake’a używać. W naszym kursie C++ dobrze wiemy, jak ważny jest CMake i uczymy go naszych studentów. W tym filmie znajduje się ekstrakt z takiej lekcji. ","date":"2020-10-08","objectID":"/post/cmake-w-skrocie/:0:0","tags":["c++","kurs online","narzedzia","cmake"],"title":"CMake w skrócie","uri":"/post/cmake-w-skrocie/"},{"categories":["Post","Hackaton","Featured"],"content":"Co potrafią zrobić początkujący programiści, gdy zamknie się ich na 24 godziny i zapewni pizzę? Więcej niż ktokolwiek się spodziewał. Zorganizowałem hackaton dla uczestników kursu C++ online. Robiliśmy małe retro gry :) Niesamowita zabawa, niesamowite wrażenia ze wspólnego kodzenia oraz efekty przechodzące najśmielsze oczekiwania. Zobacz krótkie wideo z tego wydarzenia. ","date":"2020-10-07","objectID":"/post/hackaton-cpp-2020/:0:0","tags":["gry","hackaton"],"title":"Hackaton C++ 2020 - retro gry","uri":"/post/hackaton-cpp-2020/"},{"categories":["Post","Hackaton","Featured"],"content":"Repozytoria z grami Gry tworzyliśmy oczywiście w C++ używając GitHuba. Model - open-source. Jeśli chcesz przyczynić się do rozwoju którejś z gier to śmiało! Poniżej wrzucam screeny i linki do repozytoriów. Zrób Forka repo, nanieś swoje modyfikacje i zgłoś Pull Request :) ","date":"2020-10-07","objectID":"/post/hackaton-cpp-2020/:1:0","tags":["gry","hackaton"],"title":"Hackaton C++ 2020 - retro gry","uri":"/post/hackaton-cpp-2020/"},{"categories":["Post","Hackaton","Featured"],"content":"Arkanoid Arkanoid ","date":"2020-10-07","objectID":"/post/hackaton-cpp-2020/:1:1","tags":["gry","hackaton"],"title":"Hackaton C++ 2020 - retro gry","uri":"/post/hackaton-cpp-2020/"},{"categories":["Post","Hackaton","Featured"],"content":"Tic Tac Toe Tic Tac Toe ","date":"2020-10-07","objectID":"/post/hackaton-cpp-2020/:1:2","tags":["gry","hackaton"],"title":"Hackaton C++ 2020 - retro gry","uri":"/post/hackaton-cpp-2020/"},{"categories":["Post","Hackaton","Featured"],"content":"Snake Snake ","date":"2020-10-07","objectID":"/post/hackaton-cpp-2020/:1:3","tags":["gry","hackaton"],"title":"Hackaton C++ 2020 - retro gry","uri":"/post/hackaton-cpp-2020/"},{"categories":["Post","Hackaton","Featured"],"content":"Bomberman Bomberman ","date":"2020-10-07","objectID":"/post/hackaton-cpp-2020/:1:4","tags":["gry","hackaton"],"title":"Hackaton C++ 2020 - retro gry","uri":"/post/hackaton-cpp-2020/"},{"categories":["Post","Hackaton","Featured"],"content":"Pong Pong ","date":"2020-10-07","objectID":"/post/hackaton-cpp-2020/:1:5","tags":["gry","hackaton"],"title":"Hackaton C++ 2020 - retro gry","uri":"/post/hackaton-cpp-2020/"},{"categories":["Post","Hackaton","Featured"],"content":"Bomberman Bomberman ","date":"2020-10-07","objectID":"/post/hackaton-cpp-2020/:1:6","tags":["gry","hackaton"],"title":"Hackaton C++ 2020 - retro gry","uri":"/post/hackaton-cpp-2020/"},{"categories":["Post","Hackaton","Featured"],"content":"Arkanoid Arkanoid ","date":"2020-10-07","objectID":"/post/hackaton-cpp-2020/:1:7","tags":["gry","hackaton"],"title":"Hackaton C++ 2020 - retro gry","uri":"/post/hackaton-cpp-2020/"},{"categories":["Post","Hackaton","Featured"],"content":"Asteroids","date":"2020-10-07","objectID":"/post/hackaton-cpp-2020/:1:8","tags":["gry","hackaton"],"title":"Hackaton C++ 2020 - retro gry","uri":"/post/hackaton-cpp-2020/"},{"categories":["Post","Raport"],"content":"Na naszej stronie dostępny jest test, w którym możesz sprawdzić swoją wiedzę z C++. Rozwiązać go może każdy, niezależnie od poziomu wiedzy i umiejętności. Test składa się z ośmiu zamkniętych pytań o zróżnicowanym poziomie trudności. Pytania dotyczą wiedzy w zakresie znajomości C++. Odpowiedzi można udzielać wielokrotnie, a sam test jest anonimowy. Możesz więc potraktować go jako sprawdzenie swojej wiedzy i umiejętności, które powinno Ci zająć około 10 minut. ","date":"2020-10-02","objectID":"/post/analiza-wynik%C3%B3w-testu-cpp/:0:0","tags":["c++","test","wyniki"],"title":"Smutne wyniki testu C++ dwa lata później","uri":"/post/analiza-wynik%C3%B3w-testu-cpp/"},{"categories":["Post","Raport"],"content":"Omówienie i porównanie wyników ogólnych W dniu sporządzania tego wpisu (22.08.2020) test rozwiązano 1110 razy. Przypuszczalnie większość osób, które podjęły się rozwiązania testu, to osoby zainteresowane programowaniem, które chcą rozpocząć jego naukę, są w jej trakcie albo pracują już w branży IT. Poniżej przedstawiam wyniki na dzień sporządzania wpisu: Wykres 1. Rozkład wyników testu z dnia 22.08.2020 (ilość odpowiedzi – 1110). Jak widać na zaprezentowanym wykresie, najczęściej uzyskiwany wynik przez ankietowanych to zaledwie dwa punkty. Następnym w kolejności uzyskiwanym wynikiem jest otrzymanie tylko jednego punktu. Jest to bardzo niepokojące, zwłaszcza, jeśli zauważy się, że 85 razy uzyskaliście 0 punktów w porównaniu z wynikami 7 i 8 punktów, które łącznie zostały przez was uzyskane 83-krotnie. Na 50% pytań poprawnie odpowiedzieliście 165 razy. 676 (czyli prawie 60,9% wyników) odpowiedzi było poniżej połowy możliwej do zdobycia punktacji, natomiast zaledwie 269 (czyli około 24,2%) udzielonych odpowiedzi miało punktację wyższą niż połowa skali. Pocieszającym może być fakt poprawy wyników w porównaniu z danymi sprzed 2 lat, jednak trzeba zauważyć, że poprawa jest niewielka. Wynik uśredniony podniósł się o zaledwie 0,2 punktu, zgodnie z wykresem poniżej: Wykres 2. Rozkład wyników testu z dnia 12.07.2018 (ilość odpowiedzi – 136). ","date":"2020-10-02","objectID":"/post/analiza-wynik%C3%B3w-testu-cpp/:1:0","tags":["c++","test","wyniki"],"title":"Smutne wyniki testu C++ dwa lata później","uri":"/post/analiza-wynik%C3%B3w-testu-cpp/"},{"categories":["Post","Raport"],"content":"Najtrudniejsze z pytań Największy problem sprawiły pytania o numerach 8, 6 i 4. Ilość odpowiedzi poprawnych na pytania 8 i 6 była mniejsza niż ilość odpowiedzi błędnych. Dopiero w przypadku trzeciego miejsca tego niechlubnego podium sytuacja odwróciła się i poprawne odpowiedzi wyszły na prowadzenie, choć prawdę powiedziawszy z bardzo niewielką przewagą nad najczęściej udzielaną, błędną odpowiedzią. Najgorzej z całej trójki wypadło pytanie numer 8. Tutaj zaledwie nieco ponad 1/5 odpowiedzi została udzielona poprawnie. Widać więc, że największy problem w teście stanowi obsługa wyjątków w języku C++. Wykres 3.1. Rozkład procentowy odpowiedzi na pytanie 8. Kolorem pomarańczowym oznaczono poprawną odpowiedź. Drugie miejsce w klasyfikacji najtrudniejszych pytań zajmuje pytanie szóste, które dotyczyło wskaźników. Z tym pytaniem poradzono sobie poprawnie zaledwie w 22% przypadków. Ponadto w tym przypadku poprawna odpowiedź jest dopiero na trzecim miejscu, za dwiema, najczęściej wybieranymi i błędnymi odpowiedziami. Wykres 3.2. Rozkład procentowy odpowiedzi na pytanie 6. Kolorem pomarańczowym oznaczono poprawną odpowiedź. Brązowy medal w tej konkurencji zajmuje pytanie czwarte, którego treść dotyczyła typów zmiennych. Optymizmem napawa fakt, że w tym pytaniu najczęściej wybieraną odpowiedzią była odpowiedź poprawna, jednak niemal 2/3 odpowiedzi było odpowiedziami błędnymi. Wykres 3.3. Rozkład procentowy odpowiedzi na pytanie 4. Kolorem pomarańczowym oznaczono poprawną odpowiedź ","date":"2020-10-02","objectID":"/post/analiza-wynik%C3%B3w-testu-cpp/:2:0","tags":["c++","test","wyniki"],"title":"Smutne wyniki testu C++ dwa lata później","uri":"/post/analiza-wynik%C3%B3w-testu-cpp/"},{"categories":["Post","Raport"],"content":"Podsumowanie Gdy tak przyglądałem się wynikom, analizowałem je i porównywałem doszedłem do następujących wniosków: Ci z was, którzy podjęli się rozwiązania testu, mają zauważalne braki w wiedzy i umiejętnościach związanych z językiem C++ i programowaniem. Świadczą o tym liczne, błędne odpowiedzi. Wydaje mi się, że nie popełnię błędu, zakładając, że znaczna część osób, które podjęły się testu, to absolwenci/studenci kierunków informatycznych lub pokrewnych. Utwierdza mnie to w przekonaniu, że uczelnie nie przekazują wystarczającej wiedzy i umiejętności. W efekcie Ci z was, którzy skończyli takie uczelnie, mimo posiadania dyplomu nie posiadają umiejętności koniecznych na rynku pracy, przez co możecie mieć znaczące problemy podczas szukania ofert pracy w branży IT i aplikowania na wymarzone stanowiska. Zauważyłem też, że pojawiły się problemy z pytaniami zarówno praktycznymi jak i przekrojowymi. Zastanawiam się, czy winy za taki stan rzeczy nie ponoszą, głównie ograniczenia się do rodzimych źródeł i treści pisanych w języku polskim, brak skutecznych metod nauki, czy korzystanie z niezaktualizowanych materiałów, albo nieefektywnych kursów stacjonarnych czy online. ","date":"2020-10-02","objectID":"/post/analiza-wynik%C3%B3w-testu-cpp/:3:0","tags":["c++","test","wyniki"],"title":"Smutne wyniki testu C++ dwa lata później","uri":"/post/analiza-wynik%C3%B3w-testu-cpp/"},{"categories":["Post","Raport"],"content":"Posłowie Trudnym jest uczyć się czegoś, co jest w ciągłym rozwoju. Czegoś, co w każdej chwili może zmienić swój standard na inny. Nie zawsze są to diametralne zmiany, jednak zdarzają się i takie. Niestety, ale tak właśnie wygląda nauka w branży IT. Jest to nieustająca pogoń za zdobywaniem nowej wiedzy i umiejętności i choć z pozoru może brzmieć to jak zadanie dla Syzyfa, to nie do końca tak jest. Ciągły rozwój branży IT, a w efekcie również języków takich jak C++ wymusza na programistach ciągły rozwój swoich umiejętności i zdobywania nowej wiedzy, co z kolei prowadzi do kolejnego rozwoju branży i koło się zamyka. Programista nigdy nie przestaje się uczyć. W dzisiejszych czasach łatwo o dostęp do różnych materiałów i poradników dotyczących C++, jednak trzeba również umiejętnie je wybierać, aby nie trafić na takie, które odepchną nas od pisania kodu. Poza tym warto nie ograniczać się tylko do informacji w polskim języku, ale, a może nawet w szczególności, skupiać się na źródłach anglojęzycznych. W tym miejscu pragnę odesłać Cię do przygotowanego przez nas poradnika nauki programowania, oraz do materiałów, które pomogą Ci w nauce C++. Zapraszam Cię również do skorzystania z oferty naszych kursów dotyczących C++, które pomogą Ci rozwinąć i zaktualizować Twoją wiedzę. ","date":"2020-10-02","objectID":"/post/analiza-wynik%C3%B3w-testu-cpp/:4:0","tags":["c++","test","wyniki"],"title":"Smutne wyniki testu C++ dwa lata później","uri":"/post/analiza-wynik%C3%B3w-testu-cpp/"},{"categories":["Post","Kurs C++ online","W skrócie"],"content":"Make - narzędzia programisty Obecnie nikt nie wyobraża sobie kompilowania dużych projektów programistycznych bez systemu budowania. Dzięki Make możemy zautomatyzować proces kompilacji plików źródłowych i ich zależności. Możemy dzięki temu przyspieszyć kompilację, bo nie musimy przebudowywać plików obiektowych, które nie są zależne od naszych zmian. Aby jednak to osiągnąć, należy wiedzieć czym są pliki Makefile i jak ich używać. Jeśli nie wiesz jak tworzyć pliki Makefile, usiądź wygodnie i obejrzyj ten krótki film o Make podczas swojej przerwy na kawę ☕. ","date":"2020-10-01","objectID":"/post/make-w-skrocie/:1:0","tags":["c++","kurs online","narzedzia","make"],"title":"Make w skrócie","uri":"/post/make-w-skrocie/"},{"categories":["Post","Kurs C++ online","W skrócie"],"content":"Linux - narzędzia programisty Lubisz pingwiny? Mam nadzieję, bo zamierzam zaprezentować Ci fragment lekcji z kursu C++ online, w którym poruszam temat istotnych komend linuxa. Ich znajomość przyda Ci się w pracy jako programista. ","date":"2020-09-23","objectID":"/post/linux-w-skrocie/:1:0","tags":["c++","kurs online","narzędzia","linux"],"title":"Linux w skrócie","uri":"/post/linux-w-skrocie/"},{"categories":["Post","Kurs C++ online","W skrócie"],"content":"Git - narzędzia programisty Znajomość systemów kontroli wersji jest kluczowa w pracy programisty. W przygotowanym fragmencie kursu C++ online znajdziesz kilka ważnych informacji odnośnie komend najpopularniejszego obecnie systemu kontroli wersji, czyli gita. Dzięki temu wideo poznasz albo odświeżysz sobie podstawy, jak tworzenie commit’ów czy branch’ów. Poruszam też bardziej zaawansowane kwestie, jak rozwiązywanie konfliktów, które mogą występować podczas merge’owania. ","date":"2020-09-02","objectID":"/post/git-w-skrocie/:1:0","tags":["c++","kurs online","narzędzia","git"],"title":"Git w skrócie","uri":"/post/git-w-skrocie/"},{"categories":["Post","Kurs C++ online","Raport"],"content":"Mija maj i zarazem pierwszy etap naszego kursu C++ online. Postanowiłem napisać małe podsumowanie, jak wyglądał on z mojej perspektywy. ","date":"2020-05-29","objectID":"/post/kurs-cpp-online-podsumowanie-maja/:0:0","tags":["c++","kurs","online","programowanie"],"title":"Kurs C++ online - podsumowanie maja","uri":"/post/kurs-cpp-online-podsumowanie-maja/"},{"categories":["Post","Kurs C++ online","Raport"],"content":"Platforma kursu Platforma, na której uczestniczy mają dostęp do wszystkich lekcji posiadała w momencie rozpoczęcia minimalną wymaganą funkcjonalność (osoby znające temat agile nazwą to MVP - Minimum Viable Product). lekcje quizy śledzenie postępów grywalizacja punkty osiągnięcia (jeszcze nie skonfigurowane) poziomy nagrody (tylko wstępnie skonfigurowane) ranking integracja z GitHubem Pull Requesty Code Review Issues W międzyczasie starałem się dodawać nowe funkcjonalności i ulepszać platformę. Szybko okazało się, że nie mam aż tyle czasu. Co 100 par oczu to nie jedna. Uczestnicy kursu bardzo skrupulatnie wyłapują wszystkie błędy i jak na model open-source przystało zgłaszają je jako Issue na GitHubie. Samo zarządzanie Issues oddelegowałem i zajmuje się nim Paweł, jeden z kursantów. To on przypisuje zgłoszeniom odpowiednie priorytety i kategorie. Jeśli coś wymaga mojej uwagi lub działania to dowiem się o tym od niego :) Jeśli nie wymaga, to błąd mogą naprawić sami uczestnicy kursu zgłaszając odpowiedni Pull Request. Jestem bardzo dumny z ich postawy oraz wdzięczny za okazaną pomoc. Sam nie byłbym w stanie dobrze tego ogarniać. Przy aż tylu zaangażowanych osobach udaje nam się także wykrywać błędy w samych silnikach platformy, które oczywiście zgłaszamy do ich twórców :) ","date":"2020-05-29","objectID":"/post/kurs-cpp-online-podsumowanie-maja/:1:0","tags":["c++","kurs","online","programowanie"],"title":"Kurs C++ online - podsumowanie maja","uri":"/post/kurs-cpp-online-podsumowanie-maja/"},{"categories":["Post","Kurs C++ online","Raport"],"content":"Dalsze prace nad platformą konfiguracja osiągnięć (czerwiec) konfiguracja nagród (czerwiec) zautomatyzowane przyznawanie punktów za prace domowe po Code Review jednego z trenerów (czerwiec) zautomatyzowane przyznawanie punktów za prace domowe po określonej liczbie zatwierdzeniach przez innych uczestników (lipiec) ","date":"2020-05-29","objectID":"/post/kurs-cpp-online-podsumowanie-maja/:1:1","tags":["c++","kurs","online","programowanie"],"title":"Kurs C++ online - podsumowanie maja","uri":"/post/kurs-cpp-online-podsumowanie-maja/"},{"categories":["Post","Kurs C++ online","Raport"],"content":"Zmiana harmonogramu kursu Staram się reagować szybko na potrzeby uczestników. Wspólnie podejmowaliśmy decyzje, że dla nich nauka będzie bardziej owocna, jeśli pozamieniamy miejscami tematykę naszych spotkań. Wstępnie zaproponowany przeze mnie układ lekcji w maju był taki: Data Tematyka 11.05 (pn) Intro: organizacja kursu, zaproszenie na platformę, formalności, Visual Studio Code, repl.it, GitHub 14.05 (cz) Podstawy #1: typy wbudowane i auto, funkcje, instrukcje warunkowe, pętle, tablice 18.05 (pn) Podstawy #2: std::string, std::vector\u003cT\u003e, std::map\u003cK, V\u003e, range based for loop 21.05 (cz) Podstawy #3: zasięg zmiennych, referencja i wskaźnik, enum i enum class 25.05 (pn) Narzędzia #1: linux - linia komend, vim 28.05 (cz) Narzędzia #2: git, GitHub Ostatecznie wyglądało to tak: Data  Tematyka 11.05 (pn) Intro: organizacja kursu, zaproszenie na platformę, formalności, Visual Studio Code, repl.it, GitHub 14.05 (cz) Podstawy #1: typy wbudowane i auto, funkcje, instrukcje warunkowe, pętle, tablice 18.05 (pn) Narzędzia #1: linux - linia komend, git 21.05 (pn) Podstawy #2: std::string, std::vector\u003cT\u003e, std::list\u003cT\u003e, std::map\u003cK, V\u003e, range based for loop 25.05 (cz) Narzędzia #2: git - konflikty, GitHub, vim, kompilacja 28.05 (cz) Podstawy #3: zasięg zmiennych, referencja i wskaźnik, enum i enum class Uczestnikom wygodniej było jednocześnie poznawać narzędzia - głównie oswajać się z linuxem i gitem mogąc od razu praktykować pisanie w C++. Kolejność kolejnych lekcji też będzie zmieniona :) ","date":"2020-05-29","objectID":"/post/kurs-cpp-online-podsumowanie-maja/:2:0","tags":["c++","kurs","online","programowanie"],"title":"Kurs C++ online - podsumowanie maja","uri":"/post/kurs-cpp-online-podsumowanie-maja/"},{"categories":["Post","Kurs C++ online","Raport"],"content":"Discord Serwer Coders School na Discordzie jest bardzo aktywnie użytkowany. Uczestnicy stanowią świetną społeczność, która pomaga sobie nawzajem w większym stopniu niż przypuszczałem. Wspólna nauka w grupie i wspólne rozwiązywanie problemów jest bardzo motywujące. To tak samo jak chodzenie na siłownię. Samemu jest mniejsza motywacja niż chodząc z kimś razem. Dzięki uczestnikom powstało kilka nowych kanałów do rozmów, w tym kanały “integracyjne” :) Dzięki możliwości stosowania języka Markdown Discord świetnie się sprawdza przy wklejaniu kodu. Zawsze jest on fajnie sformatowany i pokolorowany. ","date":"2020-05-29","objectID":"/post/kurs-cpp-online-podsumowanie-maja/:3:0","tags":["c++","kurs","online","programowanie"],"title":"Kurs C++ online - podsumowanie maja","uri":"/post/kurs-cpp-online-podsumowanie-maja/"},{"categories":["Post","Kurs C++ online","Raport"],"content":"YouTube Na kanał Coders School na YT 2 razy w tygodniu trafia nowe nagranie naszych zajęć online. Nie są one publicznie dostępne, aby kursanci mogli czuć się bardzo swobodnie i mogli zadawać na czacie pytania o wszystko. Podoba mi się panujący tam klimat. Podczas lekcji jest bardzo dużo pytań, które świetnie uzupełniają to, co jako trenerzy przygotowaliśmy. Nie zamierzamy zmieniać tej platformy, choćby po to, aby umożliwić komunikację głosową z uczestnikami. Przy tylu osobach ciężko by było nad wszystkimi zapanować :) Od razu mamy też dostępne nagranie tej lekcji bez dodatkowej pracy. ","date":"2020-05-29","objectID":"/post/kurs-cpp-online-podsumowanie-maja/:4:0","tags":["c++","kurs","online","programowanie"],"title":"Kurs C++ online - podsumowanie maja","uri":"/post/kurs-cpp-online-podsumowanie-maja/"},{"categories":["Post","Kurs C++ online","Raport"],"content":"Prace domowe i przegląd kodu W chwili w której to piszę uczestnicy zgłosili w sumie 271 Pull Requestów na GitHubie z dostarczeniem prac domowych. Szał. A jeszcze bardziej zaskoczyli mnie tym, jak wiele osób robi sobie nawzajem przegląd kodu i sugeruje ulepszenia swoich rozwiązań. Aż tak pozytywnej synergii się nie spodziewałem. Jest znacznie większy przepływ wiedzy pomiędzy uczestnikami niż zakładałem 🙂 ","date":"2020-05-29","objectID":"/post/kurs-cpp-online-podsumowanie-maja/:5:0","tags":["c++","kurs","online","programowanie"],"title":"Kurs C++ online - podsumowanie maja","uri":"/post/kurs-cpp-online-podsumowanie-maja/"},{"categories":["Post","Kurs C++ online","Raport"],"content":"Słowo na koniec Bardzo chciałbym nagrać jeszcze publiczne wideo z moim osobistym podziękowaniem dla wszystkich osób, które mi kibicowały i wspierały mnie osobiście lub moją szkołę Coders School. Mam nadzieję, że wkrótce uda mi się coś nagrać. Na razie moim największym ograniczeniem jest czas. Poza prowadzeniem zajęć, ciągłym szlifowaniem materiałów i ulepszeniami platformy do kursu mam też prywatne życie i nie mogę niestety się sklonować ;) Wszystko zajmuje jednak więcej czasu niż się planowało, czyli standardowo 🙂 Jeśli chcesz mi pomóc w mojej pracy - odezwij się do mnie na Discordzie lub na lukasz@coders.school 🙂 Łukasz Ziobroń ","date":"2020-05-29","objectID":"/post/kurs-cpp-online-podsumowanie-maja/:6:0","tags":["c++","kurs","online","programowanie"],"title":"Kurs C++ online - podsumowanie maja","uri":"/post/kurs-cpp-online-podsumowanie-maja/"},{"categories":[],"content":"The content goes here :)","date":"2020-05-20","objectID":"/wiki/:1:0","tags":[],"title":"C++ Wiki","uri":"/wiki/"},{"categories":["Post","Kurs C++ online","Raport"],"content":"Wraz z końcem kwietnia zakończyłem sprzedaż kursu C++ online. Wyniki sprzedaży przekroczyły moje oczekiwania :) Bardzo dziękuję za zaufanie. Są też plany na jeszcze inny kurs w tym roku. Minimalnie chciałem sprzedaż 64 miejsca, aby ten kurs mógł pozwolić mi na pełne zaangażowanie się w niego i nie martwienie się szukaniem innych sposób na zarobek w czasie trwania kursu. Liczba ta wyszła dość przypadkowo, gdy spisałem sobie wszystkie koszty kursu, ale podoba mi to, że jest potęgą dwójki :) Jednocześnie chciałem ograniczyć sprzedaż kursu do góra 128 osób. Tym razem liczbę wybrałem nieprzypadkowo ;) Mam dwa powody dla tego ograniczenia. Pierwszy - kolejne edycje kursu będą droższe i wolę sprzedać go w lepszej (dla mnie :)) cenie. Drugi - nie poradziłbym sobie sam z większą liczbą osób. Muszę też zaznaczyć, że przy obecnej liczbie uczstników, która wynosi… równo 100 osób, nie będę jedyną osobą zaangażowaną w ten kurs. Już teraz chcę serdecznie podziękować 4 osobom, które zgodziły się mnie wspierać w różnoraki podczas kursu - Pawłowi, Adamowi, Robertowi i Mateuszowi. Na razie nie zdradzam nic więcej :) Poniżej mała statystyka ze względu na sposób zakupu: Ruszamy już 11 maja 2020. Ostatnią lekcję planujemy w połowie września 2020. Kolejna edycja kursu C++ online planowana jest dopiero na pierwszy kwartał 2021 roku. Pomimo ogłoszeń o zakończeniu sprzedaży wraz z końcem kwietnia i tak znalazło się kilka osób, które nie zdążyły ;) A jeśli nie chcesz przegapić kolejnej edycji, to zapisz się na mój newsletter. Na pewno otrzymasz też trochę darmowych materiałów z tej edycji kursu. Planuję też jeszcze w tym roku rozpocząć sprzedaż pojedynczych modułów z tego kursu online. Jeśli chcesz doedukować się tylko z jednej rzeczy lub zobaczyć w jaki sposób prowadzę kursy, to może być idealna propozycja dla Ciebie. W przypadku zakupu pojednyczego modułu nie dostaniesz jednak kilku rzeczy: dostępu do grupy na Discordzie mojego przeglądu kodu dostępu do projektów grupowych Będziesz za to mieć: dostęp do platformy kursu dostęp do nagrań dostęp do prezentacji dostęp do zadań indywidualnych i ich proponowanych rozwiązań możliwość wysłania swojego rozwiązania wraz ze sprawdzaniem poprawności i stylu kodowania przez automaty CI Jeśli taka opcja wydaje Ci się interesująca to również zapisz się na newsletter, aby dostać informację o ofercie z pierwszej ręki, a co za tym idzie - po najtańszej możliwej cenie. PS. Są też plany na jeszcze inny kurs w tym roku. Stay tuned! ","date":"2020-05-04","objectID":"/post/sprzedaz-kursu-online-zakonczona/:0:0","tags":["c++","kurs","online","programowanie"],"title":"Sprzedaż kursu C++ online zakonczona","uri":"/post/sprzedaz-kursu-online-zakonczona/"},{"categories":[],"content":"Na tej stronie dokonasz opłat za kursy C++","date":"2020-04-24","objectID":"/platnosci/","tags":[],"title":"Płatności","uri":"/platnosci/"},{"categories":[],"content":" a { color: #CF802A; } a:hover { color: white; } .form-group { margin-bottom: 10px !important; } .activenow-form-field input, .activenow-form-field select { background-color: #323236; color: #eee; border-color: #000; border-radius: 0; border-style: solid; border-width: 0; font-family: Rajdhani,Lato,Arial,Helvetica,sans-serif; font-size: 15px; line-height: 20px; margin-bottom: 0; margin-top: 0; padding: 10px 10px; width: 100%; box-sizing: border-box; overflow-y: initial; } .activenow-form-field input:focus, .activenow-form-field select:focus { color: #eee; } .activenow-form-field input[type='checkbox'] { margin-left: 5%; } .activenow-form-field label { color: #eee; font-family: Rajdhani,Lato,Arial,Helvetica,sans-serif; font-size: 15px; line-height: 20px; } .activenow-form-field ::placeholder { color: #bbb; font-family: Rajdhani,Lato,Arial,Helvetica,sans-serif; font-size: 15px; } .activenow-form-container button { background-color: #8b3536 !important; border-width: 0; border-radius: 0; box-shadow: none; color: #fff !important; cursor: pointer; font-family: Rajdhani,Lato,Arial,Helvetica,sans-serif; font-size: 15px !important; font-weight: 700; line-height: 20px; margin: auto; padding: 10px !important; width: 90%; height: auto; text-transform: uppercase; display: block; } .activenow-form-container button:active, .activenow-form-container button:hover { background-color: rgb(207, 128, 42) !important; } activenow-form-after-submit-section p, activenow-form-after-submit-section h3 { font-family: Rajdhani,Lato,Arial,Helvetica,sans-serif; color: #eee } .activenow-form-class-description { width: 90% !important; margin: 10px 5% !important; background-color: rgb(54, 50, 50) !important; } .activenow-class-label, .activenow-class-value, .activenow-class-row, h4.activenow-class-title, h3.activenow-class-title { background-color: rgb(54, 50, 50); color: #eee; font-family: Rajdhani,Lato,Arial,Helvetica,sans-serif; } .activenow-form-after-submit-section { font-family: Rajdhani,Lato,Arial,Helvetica,sans-serif; font-size: 15px; color: rgb(207, 128, 42); } .activenow-form-after-submit-section h3 { font-family: Rajdhani,Lato,Arial,Helvetica,sans-serif; color: rgb(207, 128, 42); } .activenow-form-after-submit-section a { display: block; color: #fff !important; cursor: pointer; font-family: Rajdhani,Lato,Arial,Helvetica,sans-serif; font-size: 15px !important; font-weight: 700; line-height: 20px; margin: auto; padding: 10px !important; width: 90%; height: auto; text-transform: uppercase; background-color: rgb(207, 128, 42) !important; } Jeśli liczba wolnych miejsc wynosi 0 lub widzisz napis “Brak zajęć spełniających podane kryteria”, to proszę, zgłoś zainteresowanie kursem wypełniając formularz na tej stronie. Wkrótce dorzucę więcej miejsc, ale mogą być o parę złotych droższe. Dostaniesz o tym powiadomienie na maila. Jeśli chcesz opłacić kurs w jednej racie napisz do mnie na lukasz@coders.school. ","date":"2020-04-24","objectID":"/platnosci/:0:0","tags":[],"title":"Płatności","uri":"/platnosci/"},{"categories":["Post","Wyzwanie"],"content":"Omówienie wyników wyzwania wydajnego kodu w C++, którym był konwerter liczb z rzymskich na arabskie i odwrotnie. Zobacz zwycięskie rozwiązania i przeczytaj o najczęściej popełnianych błędach lub obejrzyj to w formie wideo.","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Jeśli wolisz obejrzeć wideo o wynikach wyzwania, to od 1h30m możesz obejrzeć omówienie wyników. A jeśli wolisz czytać, to scrolluj :) ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:0:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Zadanie Implementacja konwersji z liczb arabskich na rzymskie i odwrotnie. Przeczytaj opis zadania na stronie wyzwania ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:1:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Cel Sprawdzenie programistycznej intuicji - czy uznacie, że wyjątki są odpowiednie do obsługi błędów, jeśli chodzi o wydajność. Sprawdzenie czy próbujecie stosować przedwczesne optymalizacje. Przedwczesną optymalizacją jest każda, którą dokonacie przed jakiemkolwiek pomiarem czasu działania kodu. Sprawdzenie, czy szybkość działania programu może iść w parze z czystym kodem. Ja, już znając wyniki mogę powiedzieć, że to wyzwanie nie spełniło do końca swoich założeń. To miało być wyzwanie wydajnego kodu, ale bardziej to było wyzwanie poprawnego kodu. Większy nacisk był na obsługę błędów, bo dużo rozwiązań, które przysłaliście nie działało poprawnie. Te rozwiązania niestety musiałem odrzucić. Zgodnie z tym co napisałem na stronie wyzwania: Nagroda gwarantowana zostanie przyznana każdemu, kto przyśle poprawnie działające rozwiązanie, tzn. spełniające przynajmniej pierwsze kryterium. Poprawne działanie. Jeśli twoje funkcje nie będą zwracały prawidłowych rezultatów, to twoje rozwiązanie będzie odrzucone. Przez prawidłowe rezultaty rozumiemy, że funkcje poprawnie zadziałają dla liczb od 1 do 3999, a w przypadku niepoprawnych danych wejściowych, takich jak -1, 0, “”, “VIV”, “IXI”, “sth” zgłoszą błąd albo rzucając wyjątkiem albo zwracając specjalne wartości. W przypadku funkcji fromRoman() liczby mniejsze od 1, a w przypadku funkcji toRoman() pusty string lub string zawierący napis “error”, “Error” lub “ERROR” czy jakiekolwiek jego odmiany, które później już dopisywałem ręcznie, gdy testy nie przechodziły. Zobaczysz poniżej listę tych stringów. Ważne żeby wartością zwracaną nie była żadna z tych, które można uzyskać w przypadku poprawnej konwersji. Niestety tych wariantów było tak dużo, że bardzo mnie to spowalniało przy sprawdzaniu. Mam trzy wnioski. Zdecydowana większość osób (do 80%) nie testuje swoich rozwiązań. W związku z tym wynikają poniższe statystyki. Chyba muszę nauczyć was testowania. Może następne wyzwanie będzie wyzwaniem z testowaniem kodu? Zobaczymy. To wyzwanie było za trudne. Wydawało mi się, że to taki akademicki przykład z taką kowersją. Mamy dość ograniczony zbiór wartości i tak naprawdę najwydajniejszym rozwiązaniem było zrobienie LUT (LookUp Table). Spisanie wszystkich wartości od 1 do 3999 w obu formatach i wyszukiwanie w nich. Oczywiście pisanie z palca może być czasochłonne, więc cały trik polega na tym jak wygenerować takie coś. Takie rozwiązania mają złożoność stałą. Ale to jeszcze nie ten etap. Aczkolwiek po podaniu tej podpowiedzi zastanawiałem się czy nie zrobić z niej kolejnego wyzwania… ale jednak nie. Jeszcze nie :) Może kiedyś. Przedczesne optymalizacje. Premature optimisation is the root of all evil Część z was chyba za bardzo skupiła się na optymalizowaniu rozwiązań, które nie działały. Albo z powodu braku testów przestały działać i testy tego nie wykryły. Jeśli coś nie działa, to nie ważne jak szybko to nie działa. Najpierw musi działać poprawnie, aby było co optymalizować. Można wtedy taką w pełni poprawną pierwszą wersję wykorzystać jako benchmark, czyli taką implementację do odniesienia. Potem po dokonaniu zmian sprawdzamy, czy faktycznie program działa szybciej. O samym benchmarkowaniu i optymalizowaniu też można wiele powiedzieć. Lub napisać. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:2:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Statystyki Liczba zgłoszonych osób - 140 Liczba przysłanych rozwiązań - 40 Liczba rozwiązań korzystających w wyjątków - 9 Liczba rozwiązań korzystających z kodów powrotu - 31 Liczba poprawnych rozwiązań - … 8 ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:3:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Ciekawostka Informację o tym wyzwaniu wrzucałem też na wykop.pl. Mirek @TomaszA2 podesłał ciekawe rozwiązanie konwersji z liczb arabskich na rzymskie w stylu code-golf. Wyzwania code-golf polegają na zrealizowaniu danej funkcjonalności przy jak najmniejszej liczbie użytych znaków. Innymi słowy - im krótszy kod tym lepiej. function rome(N,s,b,a,o){ for(s=b='',a=5;N;b++,a^=7) for(o=N%a,N=N/a^0;o--;) s='IVXLCDM'.charAt(o\u003e2?b+N-(N\u0026=~1)+(o=1):b)+s; return s } Rozwiązanie jest w JavaScript i pochodzi z magazynu Paged Out #1, str. 33. Spróbujcie zrozumieć ten kod bez czytania opisu algorytmu :) ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:4:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Co jest szybsze - wyjątki czy kody powrotu? Wszystko wytłumaczyłem na poniższym wideo. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:5:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Co to jest biblioteka nagłówkowa? Spodziewałem się, że to dla początkujących może nie być do końca jasne, dlatego dalej w opisie widzieliście, że chodzi mi o implementację 2 funkcji. Ale konkretnie z punktu widzenia sposobu, jak pisze się biblioteki to mamy ich 2 rodzaje. Biblioteki nagłówkowe oraz kompilowane. Kompilowane z kolei dzielą się jeszcze na statyczne i dynamiczne, ale w punktu widzenia implementacji to nie ma między nimi żadnej różnicy. Różnica jest w sposobie linkowania się z nimi. Ale my nie o nich, bo mieliście zrobić bibliotekę nagłówkową. A biblioteka nagłówkowa, to nic innego jak treść tych funkcji wrzucona do pliku nagłówkowego, czyli hpp. Oczywiście samo rozszerzenie pliku jest umowne, niektórzy stosują hxx, niektórzy h. Ja mam konwencję, że dla C++ stosuję rozszerzenia cpp i hpp. Dla języka C z kolei c i h. Mam nadzieję, że jest to jasne. Chodziło więc o to, aby implementacja tych 2 funkcji była w pliku nagłówkowym. Jeśli ktoś wrzucił to do pliku c/cpp - przymykałem oko i sam sobie kopiowałem ją do nagłówka. Do pliku c/cpp wrzucamy implementacje, gdy robimy biblioteki kompilowane, czyli te wspomniane przeze mnie statyczne lub dynamiczne. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:6:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Kiedy robi się biblioteki nagłówkowe, a kiedy kompilowane? Nic nie stoi na przeszkodzie aby zawsze robić biblioteki nagłówkowe, ale mają one swoje wady. Wydłużają one na pewno czas kompilacji, powodują, że ten sam kod będzie kompilowany po kilka razy w różnych jednostkach kompilacji, a czasami może dość do naruszenia ODR, czyli One Definition Rule. Nie będę się nad tym teraz rozwodził. Plusem bibliotek nagłówkowych jest sposób ich użycia. Wystarczy dać #include „plik.hpp” i tylko zapewnić, że ten plik jest w odpowiedniej ścieżce. Jeśli nie jest, to trzeba jeszcze przy budowaniu projektu dostarczyć kompilatorowi ścieżkę do niego za pomocą flagi -I. Jeśli chodzi o biblioteki kompilowalne, to ich minusem jest sposób użycia. Wymagają one również posiadania części nagłówkowej, czyli takiego samego pliku hpp (lub zestawu plików) jak przy bibliotece nagłówkowej. Tam jednak są tylko sygnatury funkcji. Ich implementacja jest w plikach źródłowych i taką bibliotekę trzeba najpierw skompilować, a potem się z nią zlinkować. Polska nazwa na linkowane to podobno konsolidacja, chociaż ja tutaj wolę angielskie linkowanie. A od sposobu linkowanie zależy, czy będzie ona dołączona statycznie czy dynamicznie. Musiałbym zrobić cały odcinek poświęcony bibliotekom lub kompilacji, aby o tym dokładnie opowiedzieć. Jeśli tego chcecie to dajcie mi znać, najlepiej w komentarzach. Ale myślę, że na chwilę obecną taka wiedza powinna wam wystarczyć :) Dodam tylko, że jeśli biblioteka zawiera funkcje szablonowe, to ich implementacje muszą być w plikach nagłówkowych. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:6:1","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Przykłady bibliotek Dam wam przykłady 2 bibliotek C++. Pierwsza z nich to GTest. Najpopularniejsza obecnie biblioteka, czy też framework do pisania testów jednostkowych. Jest to biblioteka kompilowana. Aby używać GTesta w waszych projektach musicie go ściągnąć, skompilować (lub po prostu ściągacie już skompilowaną wersję na waszą architekturę) oraz linkujecie się z nią. Kto używał, na pewno wie o co chodzi. Należy do opcji kompilacji dodać -lgtest lub w CMakeLists.txt dopisać target_link_libraries(appname gtest). Drugi przykład to biblioteka Catch2. Jest to druga najpopularniejsza obecnie biblioteka do testowania. Ona jest przykładem biblioteki nagłówkowej. Wystarczy tylko, że ściągniecie sobie plik catch.hpp i zaincludujecie go w pliku i już w tym pliku możecie pisać testy. Nic więcej. Jeśli oglądaliście moje wideo z omówienia pierwszego wyzwania to pod jego koniec pokazywałem jak wyglądała moja praca z pisaniem testów do tego wyzwania. WIdeo wrzucam poniżej. W 35 minucie widzicie kopiowanie pliku nagłówkowego i dołączanie go do projektu. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:6:2","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Najczęściej popełniane błędy Jedno ważne zastrzeżenie Jeśli ktoś z uczestników poczuje się atakowany lub krytykowany to proszę o wybaczenie. Specjalnie nie podaję tutaj, czyich rozwiązań dotyczą dane uwagi, aby nie zarzucać niczego konkretnym osobom, tylko skomentować kod który napisały. A sposób pisania kodu zawsze ewoluuje i każdy może się poprawić. Robię więc to wszystko w dobrej wierze. A najłatwiej się nauczyć na konkretach, więc poniżej omawiam te rzeczy, które zauważyłem w waszym kodzie. Tak samo podczas kursu wybieram niektóre rozwiązania, z których później robię listę najczęściej popełnianych błędów. No to jedziemy :) ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:7:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Błędy i uwagi ogólne Nie przeczytanie polecenia Treść zadania mówiła, aby funkcje nazywały się toRoman() i fromRoman(). Biblioteki mają to do siebie, że jeśli sygnatury funkcji się nie zgadzają to nijak się jej nie zintegruje do większego systemu. To było jednym z wymagań i jego nie spełnienie powodowało odrzucenie rozwiązania. Ja nie ograniczyłem się do pełnych sygnatur, podałem jedynie nazwy funkcji oraz sposób, w jaki będę tych funkcji używał. To dawało pewną dowolność. Chciałem zobaczyć kto z was np. zastosuje taką optymalizację, aby przekazać std::string przez const \u0026. Przykład użycia funkcji również widniał na stonie wyzwania. Jeśli funkcja zamiast zwracać wartość wypisywała ją na ekran, to niestety nie spełniała wymagań. Błędna implementacja Rozwiązanie miało być odporne na błędy, ale nie każdy dobrze przetestował swoje implementacje. Naliczyłem aż 19 takich, które poprawnie dekodowało niepoprawne ciągi, co nie powinno mieć miejsca. Te ciągi to np. IVI = 5 lub 7 IXI = 10 lub 12 IMI = 1000 lub 1002 itp. Język C zamiast C++ Oczywiście nic nie mam do C, ale to było wyzwanie w C++. Niektórzy jawnie napisali mi, że napisali to w C, bo lepiej znają ten język. Oczywiście nie odrzucałem takich rozwiązań, dopóki kompilowały się za pomocą kompilatora do języka C++. Niektórzy być może jednak nie widzą za dużych różnic pomiędzy C a C++. I tutaj być może wstyd się przyznać, ale ja też po studiach nie wiedziałem jaka jest różnica. Co gorsza jeszcze na 5 roku studiów na kierunku informatyka pamiętam, że robiłem czat na programowaniu sieciowym i nie miałem pojęcia dlaczego kompilator mówi mi, że typ bool nie istnieje. Okazało się, że pisałem w C++, a kompilowałem kompilatorem C, na dodatek w standardzie ANSI C. Ale myślę, że to wina edukacji na studiach. Ale jak widzicie ja pomimo takich braków wiedzy jakoś zostałem programistą. Teraz niestety jest ciężej wbić się na rynek pracy. A typ bool nie jest jedyną różnicą między C i C++. Języki te mają taką samą składnię, ale głównymi różnicami są: wsparcie dla obiektowości w C++ i jej brak w C używanie strumieni (np. cout i cin) jako domyślnego wejścia i wyjścia w C++, a funkcji printf i scanf w C, brak pisania void w sygranturach funkcji, jeśli nie przyjmują parametrów w C++. W C pusta lista argumentów oznacza zupełnie dowolne argumenty, więc wpisuje się void, jeśli funkcja nie przyjmuje parametrów używanie char* w C jako łańcucha znaków, a std::string w C++ i jeszcze masa innych rzeczy, ale to również temat na inny odcinek. Chcecie takiego omówienia różnic między językami? Dajcie znać w komentarzach. Jednocześnie zastrzegam, że nie jestem profesjonalnym programistą języka C i po prostu go nie znam. W szczególności nie znam dobrze nowych standardów, jak C11 i C18, ale wiem gdzie szukać informacji, gdy będą mi potrzebne :) I nie będzie to w pierwszej kolejności StackOverflow, ale cppreference.com :) Oczywiście będąc programistą C++ czasem będziecie się natykać na takie wstawki z języka C w kodzie. Czasem są one robione nieświadomie. A często też w ogłoszeniach o pracę widzicie o zgrozo C / C++. Uciekajcie od takich ofert. Ja się póki co spotkałem, że są to oferty dla języka C, ale z racji że coraz ciężej o takich programistów, to dodają tam C++, bo programista C++ będzie rozumiał C. Jest to zasadniczo prawdą, ale nie do końca. Trzeba być takim świadomym programistą C++, który dobrze zna zarządzanie zasobami, aby dobrze czuć się w C. Ja przykładowo nie chciałbym pisać w C, bo wiem jak dużo ciekawych rzeczy daje mi C++ i bez nich czuł bym się jak bez jednej ręki. Ale to tylko moja opinia i wiem, że część ludzi będzie mieć odwrotnie, bo dla nich C może być bardziej intuicyjny niż C++. Ja jednak mocno obstaje przy paradygmacie programowania obiektowego, które ciągle jest najpopularniejsze. Programowanie funkcyjne też jest fajne i kolejne standardy C++ wprowadzają coraz więcej takich elementów do języka, więc jeśli tylko jest się na bieżąco, to można być naprawdę uniwersalnym wielodogmatowym programistą C++, któremu będzie bardzo łatwo nauczyć się praktycznie dowolnego innego języka :D No może poza JavaScriptem. Bo próbowałem :P Ale zostawmy JS, okazji do hejtowania go będzie mnóstwo ;) Własna interpretacja wymagań To jest zawsze i wszędzie. Niektórzy z was zakładali, że warto obsługiwać nawet mnożniki po 1000, które zapisuje się dwoma pionowymi kreskami. W wymaganiach nic o tym nie było :) Wiem, że chcieliście dobrze, bo pewnie stwierdziliście, że im więcej obsługujecie tym lepiej. Ale ja tego nie chciałem. Pewnie spędziliście nad tym dużo czasu i to na darmo. W wymaganiach była obsługa błędów, więc jeśli np rzucaliście wyjątkiem gdy liczba była większa niż 3999 to było ok i dokładnie o to mi chodziło. To ujawnia taką ciekawostkę naszej programistycznej natury. A może w sumie efekt edukacji szkolnej. Zamiast zapytać wolimy sami coś zrobić i przedstawić jako gotowe. Część osób pytała mnie o to. Nie chciałem wprost odpowiadać jaki jest górny limit, ale mówiłem, że taki jak maksy","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:7:1","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Problemy z biblioteką nagłówkową Funkcja main() w pliku nagłówkowym Biblioteka tym różni się od binarki (lub aplikacji), że nie ma funkcji main(). Biblioteka dostarcza szereg funkcji, które można używać w innych aplikacjach lub innych bibliotekach. Jeśli biblioteka ma funkcję main() to nie jest biblioteką, tylko binarką, którą można uruchomić. Brak header guarda Strażnik nagłówka (header guard) przybiera 2 postaci: #pragma once // ... #ifndef NAZWA #define NAZWA // ... #endif // NAZWA Preferujemy #pragma once. Wszystkie nowoczesne kompilatory ją obsługują. I jest mniej pisania. Jego brak w plikach nagłówkowych jest błędem. Kod może się kompilować u Ciebie pomimo jego braku, gdy masz tylko jeden #include związany w tym plikiem. Nie wykluczałem rozwiązań nie posiadających strażnika nagłówka. Rozwiązania w pliku cpp Było kilka rozwiązań, w których implementacja znalazła się w plikach cpp, a pliki hpp zawierały jedynie sygnatury funkcji. Nie odrzucałem takich rozwiązań, po prostu skopiowałem implementacje do plików nagłówkowych. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:7:2","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Obsługa błędów Używanie nieadekwatnych wyjątków To tylko drobna uwaga. Może się wydawać, że typ wyjątku, który wybierzemy nie ma za dużego znaczenia, ale warto przykładać do niego wagę. Używanie std::overflow_error gdy podamy za małą wartość nie będzie właściwe. Można oczywiście użyć ogólnych wyjątków, takich jak std::runtime_error, ale najlepszym rozwiązaniem jest napisanie własnych, odpowiednio nazwanych wyjątków, które dziedziczą po najbliższej mu klasie z wyjątków standardowych. Wtedy chcąc obsłużyć błędy z tej biblioteki możemy łapać te konkretne wyjątki bez potykania się o taki problem, że przechwycimy jakiś wyjątek, którego nie powinniśmy przechwycić w danym miejscu. Dobre praktyki odnośnie wyjątków… ehh. Temat na kolejny odcinek. Chyba już 3 jeśli dobrze liczę. Rzucanie nie-wyjątkami throw -1 throw 'e' Złe praktyki. Co prawda rzucać można wszystkim, ale mało kto się spodziewa, że musi w catch złapać int. Przyjmuje się, że catch (std::exception \u0026) jest takim uniwersalnym catch, łąpiącym każdy możliwy wyjątek. int się tam nie złapie. Istnieje jeszcze oczywiście catch (...), ale to nie jest zbyt dobrą praktyka, jeśli się nie wie co się robi. Istotą wyjątków jest to, że to właśnie one są stworzone do rzucania nimi, bo dają jednolity interfejs, np. funkcję what(), która daje opis zdarzenia. Każdy wyjątek powinien dziedziczyć po std::exception. Bezpośrednio lub pośrednio poprzez inne klasy, które dostarcza nam biblioteka standardowa w nagłówku \u003cstdexcept\u003e Łapanie swoich wyjątków w funkcjach toRomam() i fromRoman() Podciągam to pod powyższy temat. Obsługa błędów przez wyjątki wymaga przemyślenia miejsc w których będą one łapane. Jeśli używaliście wyjątków do zaznaczenia, że użytkownik robi coś niepoprawnego, jak np. próbuje skonwertować liczbę ujemną, to rzucenie wyjątku jest ok. Ale natychmiastowe złapanie go i zwrócenie błędu jako string czy int przez return już nie. Poniższy kod, pomimo tego, że używa wyjątków, to zwraca kody błędów. try { if (!(arabic_num \u003e 0 \u0026\u0026 arabic_num \u003c 4000)) throw - 1; } catch (...) { std::cout \u003c\u003c \"Range numer has to be 1-3999\" \u003c\u003c std::endl; return \"ERORR\"; } Wyjątek powinien wylecieć poza funkcję. Należy on do interfejsu tej funkcji i osoba używająca tej funkcji powinna sama go obsłużyć. Wyjątki robi się po to, aby uprościć interfejsy. Jeśli mamy pewność, że string zwracany przez funkcję toRoman() zawsze będzie poprawną liczbą rzymską, to nie trzeba potem pisać dodatkowej logiki, która go sprawdzi. Wyjątków nie podciągamy pod taką logikę, bo może ona być zrobiona w zupełnie innym miejscu. Po prostu gwarantujecie, że będzie poprawny jeśli funkcja nie rzuci wyjątku. A jeśli rzuci, to użytkownik tej biblioteki na pewno się o tym dowie. No chyba że ignoruje wyjątki w taki sposób: catch (...) { // do nothing :) } Obsługa błędów przez wypisywanie Mamy dedykowany strumień std::cerr, który jest standardowym wyjściem błędów i możemy go użyć w celu wypisywania błędów. Problem z nim będzie jednak taki, że po zakończeniu programu możemy stracić te informacje, jeśli sesja terminala zostanie zakończona. Zazwyczaj też nie chcemy, aby klientowi wyświetlił się jakiś błąd poczas konwersji i pójść dalej nie dając mu możliwości zareagowania na ten błąd. Jeśli używasz std::cout do wypisywania błędów to może być jeszcze gorzej, bo czasem po prostu przekierowuje się standardowe wyjście programu do /dev/null, aby nic nie wypisywał. Użycie std::cerr w obsłudze wyjątków w bloku catch w celu ich wypisania jest ok. Ale użycie std::cerr tak po prostu w algorytmnie jest mniej ok, bo łatwiej zignorować taki błąd. Nie można zignorować nieobsłużonego wyjątku, bo to ubija nasz program i użytkownik (czyli programista, który używa naszej biblioteki) od razu to zauważy. Strumienie do obsługi błędów - wydajność Strumienie słyną z tego, że są wolne. Andrei Alexandrescu, autorytet i pisarz książek o C++ powiedział: Jeśli chcesz stracic swój ekspercki autorytet, to użyj słów 'strumienie' i 'wydajność' w jednym zdaniu. To parafraza jego angielskich słów. Wypisywanie błędów na ekran było w tym przypadku niepotrzebne, bo cholernie spowalniało wasze programy. Widać to na wynikach. Dla testu toAndFromRomanWholeSet chyba bez problemu wskażecie, które 2 rozwiązania wypisywały coś na ekran :) benchmark toAndFromRomanWholeSet_mean 536 945 ns 76 623 753 ns 586 206 ns 983 589 ns 4 110 901 ns 5 082 754 ns 125 607 624 ns 182 572 943 ns Obsługa błędów przez zwracanie magicznych wartości Jest to jeden ze sposobów na obsługę błędów. Jeśli błędy są sklasyfikowane i odpowiednio nazwane w postaci stałych lub enumów, tak jak poniżej, to super. Ale nie widziałem wielu takich rozwiązań. Gołe numery w kodzie to po prostu “magiczne wartości”. enum class Error { InvalidInput = -1, TooBigNumber = -2, NegativeNumber = -3 } Obsługa błędów przez zwracanie specjalnych wartości ma znacznie też więcej wad niż zalet. Zwracana specjalna wartość jest poprawną wartością swojego typu. Jeśli zwrócisz -1 to można go używać do dalszych obliczeń, a to może p","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:7:3","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Optymalizacje Ponieważ jest to wyzwanie wydajnego kodu, to powinniśmy optymalizować szybkość działania naszego kodu. Jeśli ktoś jest doświadczony to zaraz powie, że “hej, przecież optymalizuje się pod konkretne przypadki”. Oczywiście. A w przypadku tak prostych konwerterów nie ma zbyt wielu przypadków użycia. Możemy wstępnie rozróżnić dwa - konwersja poprawnej liczby lub konwersja niepoprawnej liczby. Oczywiście optymalizujemy przypadek konwersji poprawnej liczby. Nie zakładamy, że ktoś będzie tej biblioteki używał głównie w taki sposób, aby wykrywała liczby, które się nie konwertują. Do tego wolelibyśmy mieć całkiem inny zestaw funkcji. Konkatenacja std::string operator+ na std::string nie jest demonem szybkości. Jeśli więc używaliście go do łączenia stringów, to wydajność programu mogła na tym ucierpieć. Pytanie dlaczego to nie jest szybkie? Odeślę was do StackOverflow. Tutaj tylko wspomnę, że lepiej używać operator+=. O stringach i dobrych praktykach z nimi związanymi też można dużo powiedzieć. Czwarty temat na nowy odcinek. Kolejność sprawdzeń Jeśli w if jest kilka warunków i są one połączone operatorem || to warto zadbać, aby jako pierwszy wystąpił warunek, który będzie częściej spełniony. Dzięki temu drugi warunek nie będzie w ogóle sprawdzony. if (oftenTrue || rarelyTrue) { /* ... *. } Jest lepsze niż if (rarelyTrue || oftenTrue) { /* ... */ } Taka optymalizacja wynika z zasad logiki. Aby cały warunek, który składa się z 2 lub więcej podwarunków połączonych instrukcją or był prawdziwy, wystarczy że tylko jeden podwarunek będzie prawdziwy. Standard języka C++ definiuje, że takie sprawdzania zawsze odbywają się od lewej do prawej. Oczywiście trzeba trochę wiedzieć jakie są możliwe scenariusze i znać prawdopodobieństwo z jakim dane warunki są prawdziwe. Nie zawsze jest to możliwe, ale warto wtedy dokonać pomiarów, na konkretnych scenariuszach, aby się tego dowiedzieć. Przekazywanie przez const \u0026 w celu unikania zbędnych kopii Zawsze powinniśmy z automatu przekazywać obiekty przez const \u0026, z wyjątkiem typów prostych: całkowitoliczbowych (int i rodzina) zmiennoprzecinkowych (float i rodzina) znakowych (char i rodzina) Te typy mają mały rozmiar, zazwyczaj do 8 bajtów, czyli tyle ile rozmiar wskaźnika w architekturze x64. Przekazanie ich przez kopię będzie równie wydajne. Wszystkie inne typy, w szczególności std::string czy kontenery warto przekazywać przez const \u0026. Jest jeszcze coś takiego std::string_view lub std::span w C++20, które stanowią widoki na zakresy danych. Używa się ich, aby przekazać dane bez ich kopiowanie i ich stosowanie również jest szybkie. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:7:4","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"ETAP 1: Sprawdzanie poprawności Do sprawdzenia poprawności napisałem poniższe testy we frameworku Catch. Input: 40 rozwiązań Output: 8 poprawnych rozwiązań #define CATCH_CONFIG_MAIN #include \"catch.hpp\"#include \u003cstring\u003e// include your header file here constexpr int minRoman = 1; SCENARIO(\"Proper Roman values\", \"[toRoman]\") { GIVEN(\"A generated number and expected roman output\") { auto pair = GENERATE(std::make_pair(1, \"I\"), std::make_pair(2, \"II\"), std::make_pair(3, \"III\"), std::make_pair(4, \"IV\"), std::make_pair(5, \"V\"), std::make_pair(6, \"VI\"), std::make_pair(7, \"VII\"), std::make_pair(8, \"VIII\"), std::make_pair(9, \"IX\"), std::make_pair(10, \"X\"), std::make_pair(190, \"CXC\"), std::make_pair(300, \"CCC\"), std::make_pair(649, \"DCXLIX\"), std::make_pair(900, \"CM\"), std::make_pair(950, \"CML\"), std::make_pair(1000, \"M\"), std::make_pair(1050, \"ML\"), std::make_pair(1100, \"MC\"), std::make_pair(1410, \"MCDX\"), std::make_pair(1500, \"MD\"), std::make_pair(1900, \"MCM\"), std::make_pair(3000, \"MMM\"), std::make_pair(3888, \"MMMDCCCLXXXVIII\"), std::make_pair(3999, \"MMMCMXCIX\")); WHEN(\"toRoman is called for \" \u003c\u003c pair.first) { auto result = toRoman(pair.first); THEN(\"The result is a corresponding Roman number \" \u003c\u003c pair.second) { CHECK(result == pair.second); } } } } SCENARIO(\"Conversion to Roman and to Arabic\", \"[toRoman][fromRoman]\") { GIVEN(\"All numbers from range 1 to 3999\") { auto number = GENERATE(range(1, 3999)); WHEN(\"toRoman and fromRoman are called for \" \u003c\u003c number) { auto result = fromRoman(toRoman(number)); THEN(\"result is equal to number\") { CHECK(result == number); } } } } SCENARIO(\"Exceptions - incorrect Roman values\", \"[fromRoman][exceptions][!mayfail]\") { GIVEN(\"Incorrect value\") { auto value = GENERATE(\"incorrect\", \"\", \"IL\", \"IC\", \"ID\", \"IM\", \"VX\", \"VC\", \"VD\", \"VM\", \"XD\", \"XM\", \"LD\", \"LM\", \"IIII\", \"XXXX\", \"CCCC\", // \"MMMM\" intentionally commented out - it could be allowed in some solutions \"VV\", \"LL\", \"DD\", \"MIM\", \"MVM\", \"MXM\", \"MLM\", \"MDM\", \"DID\", \"DVD\", \"DXD\", \"DLD\", \"DCD\", \"DDD\", \"DMD\", \"CIC\", \"CVC\", \"CLC\", \"CDC\", \"CMC\", \"LIL\", \"LVL\", \"LXL\", \"LLL\", \"LCL\", \"LDL\", \"LML\", \"XVX\", \"XLX\", \"XCX\", \"XDX\", \"XMX\", \"VIV\", \"VVV\", \"VXV\", \"VLV\", \"VCV\", \"VDV\", \"VMV\", \"IVI\", \"IXI\", \"ILI\", \"ICI\", \"IDI\", \"IMI\" ); // and some more WHEN(\"fromRoman is called - exception version for \" \u003c\u003c value) { THEN(\"Exception is thrown\") { CHECK_THROWS(fromRoman(value)); } } } } SCENARIO(\"Exceptions - numbers out of range\", \"[toRoman][exceptions][!mayfail]\") { GIVEN(\"An inproper number to convert\") { auto number = GENERATE(-1, 0, 5000, 100000000); WHEN(\"toRoman is called - exception version for \" \u003c\u003c number) { THEN(\"Exception is thrown\") { CHECK_THROWS(toRoman(number)); } } } } SCENARIO(\"Return codes - incorrect Roman values\", \"[fromRoman][retcodes][!mayfail]\") { GIVEN(\"Incorrect value\") { auto value = GENERATE(\"incorrect\", \"\", \"IL\", \"IC\", \"ID\", \"IM\", \"VX\", \"VC\", \"VD\", \"VM\", \"XD\", \"XM\", \"LD\", \"LM\", \"IIII\", \"XXXX\", \"CCCC\", // \"MMMM\" intentionally commented out - it could be allowed in some solutions \"VV\", \"LL\", \"DD\", \"MIM\", \"MVM\", \"MXM\", \"MLM\", \"MDM\", \"DID\", \"DVD\", \"DXD\", \"DLD\", \"DCD\", \"DDD\", \"DMD\", \"CIC\", \"CVC\", \"CLC\", \"CDC\", \"CMC\", \"LIL\", \"LVL\", \"LXL\", \"LLL\", \"LCL\", \"LDL\", \"LML\", \"XVX\", \"XLX\", \"XCX\", \"XDX\", \"XMX\", \"VIV\", \"VVV\", \"VXV\", \"VLV\", \"VCV\", \"VDV\", \"VMV\", \"IVI\", \"IXI\", \"ILI\", \"ICI\", \"IDI\", \"IMI\" ); // and some more WHEN(\"fromRoman is called - return code version for \" \u003c\u003c value) { auto result = fromRoman(value); THEN(\"Error code is not in a proper Roman range\") { CHECK(result \u003c minRoman); } } } } SCENARIO(\"Return codes - numbers out of range\", \"[toRoman][retcodes][!mayfail]\") { GIVEN(\"A few inproper numbers to convert\") { auto number = GENERATE(-1, 0, 5000, 100000000); WHEN(\"toRoman is called - return code version\") { auto result = toRoman(number); THEN(\"Returned value is an empty string or containes [eE]rror\") { using namespace Catch; CHECK_THAT(result, Contains(\"error\") || Contains(\"Error\") || Contains(\"ERROR\") || Contains(\"ERORR\") || Contains(\"Range\") || Contains(\"range\") || Contains(\"blad\") || Contains(\"large\") || Contains(\"non-positive\") || Contains(\"Incorrect\") || Contains(\"0\") || Equals(\"\")); } } } } Na końcu można zauważyć, że dodawałem coraz więcej ciekawych napisów świadczących o błędach :) Tutaj widać problem z używaniem kodów powrotu. Trzeba się konkretnie umówić na jakieś wartości i je sprawdzać. Wyjątki znacznie łatwiej przetestować. Też oczywiście trzeba się zadeklarować jakiego typu to będzie wyjątek, ale można go w ogólności podpiąć pod jakiś inny w hierachi dziedziczenia i można go z łatwością przechwycić. Do etapu 2 zakwalifikowało się 8 rozwiązań. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:8:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"ETAP 2: Mierzenie wydajności Napisałem 5 scenariuszy testowych z wykorzystaniem Google Benchmark. toRomanSingleNumber - konwersja 42 na liczbę rzymską fromRomanSingleNumber - konwersja XLII na liczbę arabską toAndFromRomanWholeSet - konwersja każdej liczby od 1 do 3999 na rzymską i z powrotem. Najważniejszy benchmark. toRomanInproperValuesSet - konwersja 6 niepoprawnych liczb arabskich na rzymskie fromRomanInproperValuesSet - konwersja 62 niepoprawnych liczb rzymskich na arabskie #include \u003carray\u003e#include \u003cstring\u003e#include \u003cbenchmark/benchmark.h\u003e// your include goes here static void toRomanSingleNumber(benchmark::State\u0026 state) { auto number = 42; for (auto _ : state) { auto result = toRoman(number); benchmark::DoNotOptimize(result); } } BENCHMARK(toRomanSingleNumber); static void fromRomanSingleNumber(benchmark::State\u0026 state) { auto roman = \"XLII\"; for (auto _ : state) { auto result = fromRoman(roman); benchmark::DoNotOptimize(result); } } BENCHMARK(fromRomanSingleNumber); // main benchmark function static void toAndFromRomanWholeSet(benchmark::State\u0026 state) { for (auto _ : state) { for (int i = 1; i \u003c 4000; ++i) { auto result = fromRoman(toRoman(i)); benchmark::DoNotOptimize(result); } } } BENCHMARK(toAndFromRomanWholeSet); static void toRomanInproperValuesSet(benchmark::State\u0026 state) { std::array\u003cint, 6\u003e values = {-300, -1, 0, 5000, 12345, 100000000}; for (auto _ : state) { for (const auto \u0026 value : values) try { auto result = toRoman(value); benchmark::DoNotOptimize(result); } catch (...) { // silently ignore } } } BENCHMARK(toRomanInproperValuesSet); static void fromRomanInproperValuesSet(benchmark::State \u0026 state) { std::array\u003cstd::string, 62\u003e values = { \"incorrect\", \"\", \"IL\", \"IC\", \"ID\", \"IM\", \"VX\", \"VC\", \"VD\", \"VM\", \"XD\", \"XM\", \"LD\", \"LM\", \"VV\", \"LL\", \"DD\", \"IIII\", \"XXXX\", \"CCCC\", \"MIM\", \"MVM\", \"MXM\", \"MLM\", \"MDM\", \"DID\", \"DVD\", \"DXD\", \"DLD\", \"DCD\", \"DDD\", \"DMD\", \"CIC\", \"CVC\", \"CLC\", \"CDC\", \"CMC\", \"LIL\", \"LVL\", \"LXL\", \"LLL\", \"LCL\", \"LDL\", \"LML\", \"XVX\", \"XLX\", \"XCX\", \"XDX\", \"XMX\", \"VIV\", \"VVV\", \"VXV\", \"VLV\", \"VCV\", \"VDV\", \"VMV\", \"IVI\", \"IXI\", \"ILI\", \"ICI\", \"IDI\", \"IMI\"}; for (auto _ : state) { for (const auto \u0026 value : values) try { auto result = fromRoman(value); benchmark::DoNotOptimize(result); } catch (...) { // silently ignore } } } BENCHMARK(fromRomanInproperValuesSet); BENCHMARK_MAIN(); ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:9:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Metodologia pomiarów Ostatecznym wynikiem na podstawie którego wyłoniłem zwycięskie rozwiązanie była suma czasów wszystkich scenariuszy. Można z tego wywnioskować, że najważniejszy był scenariusz poprawnej obsługi wszystkich liczb. Niepoprawnych konwersji było 68, a poprawnych 4001. Każdą bibliotekę zaincludowałem w miejsce oznaczone komentarzem // your include goes here. Kod skompilowałem za pomocą zaklęcia: g++ PerformanceTests.cpp -std=c++17 -lbenchmark -lpthread -o benchmark_name -Wall -Wextra -pedantic -O3 Kompilacja odbyła się na systemie macOS Catalina 10.15.4 kompilatorem Apple clang: ziobron@MBP:~/$ uname -a Darwin MBP 19.4.0 Darwin Kernel Version 19.4.0: Wed Mar 4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64 x86_64 ziobron@MBP:~/$ g++ --version Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/4.2.1 Apple clang version 11.0.0 (clang-1100.0.33.16) Target: x86_64-apple-darwin19.4.0 Thread model: posix InstalledDir: /Library/Developer/CommandLineTools/usr/bin Oraz na Linuxie Ubuntu z kompilatorem g++ działającego w dockerze na ww systemie: root@cd653f15f1c5:/# uname -a Linux cd653f15f1c5 4.19.76-linuxkit #1 SMP Thu Oct 17 19:31:58 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux root@cd653f15f1c5:/# g++ --version g++ (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0 Copyright (C) 2017 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Informacje z Google benchmark Run on (8 X 1400 MHz CPU s) CPU Caches: L1 Data 32 KiB (x4) L1 Instruction 32 KiB (x4) L2 Unified 256 KiB (x4) L3 Unified 6144 KiB (x1) Odpalenie benchmarka ./benchmark_name --benchmark_repetitions=10 --benchmark_report_aggregates_only=true --benchmark_out_format=console --benchmark_out=name.txt Każdy test powtarzany był 10 krotnie. Dbałem o to, aby Load factor (ogólny współczynnik obciążenia procesora) był zbliżony przy wszystkich testach. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:9:1","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"WYNIKI Jednostki to ns. Wyciąłem je z tabeli w celu polepszenia przejrzystości. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:10:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"MacOS + Apple Clang Benchmark (1) kk (6) mk (2) rk (3) bk (4) ap (5) jw (7) wb (8) wz toRomanSingleNumber_mean 36.8 36.0 30.1 66.9 21.6 307.0 80.6 12649.0 fromRomanSingleNumber_mean 15.3 15267.0 50.3 77.0 922.0 321.0 27591.0 26751.0 toAndFromRomanWholeSet_mean 536945.0 76623753.0 586206.0 983589.0 4110901.0 5082754.0 125607624.0 182572943.0 toRomanInproperValuesSet_mean 7467.0 10.6 9082.0 15.7 17.3 17.9 85.5 114492.0 fromRomanInproperValuesSet_mean 69132.0 1508503.0 90003.0 4959.0 56887.0 13501.0 3779486.0 8003141.0 SUM 613596.1 78147569.6 685371.4 988707.6 4168748.9 5096900.9 129414867.1 190729976.0 ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:10:1","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Ubuntu Linux + g++ Benchmark (1) kk (6) mk (2) rk (3) bk (5) ap (4) jw (7) wb (8) wz toRomanSingleNumber_mean 22.5 60.3 32.1 99.8 33.8 90.0 758.0 196568.0 fromRomanSingleNumber_mean 16.6 1116.0 53.4 241.0 461.0 107.0 11755.0 11562.0 toAndFromRomanWholeSet_mean 503402.0 5679183.0 885560.0 1569131.0 2355031.0 1956939.0 51080422.0 836642820.0 toRomanInproperValuesSet_mean 17468.0 258.0 18929.0 13.2 27.6 28.8 869.0 1846684.0 fromRomanInproperValuesSet_mean 185070.0 296740.0 135653.0 13927.0 28505.0 3752.0 864931.0 1310478.0 SUM 705979.1 5977357.3 1040227.5 1583412.0 2384058.4 1960916.8 51958735.0 840008112.0 Nie zastosowałem kolejnych kryteriów oceny (punkty 4 i 5), które mówiły o jak najmniejszej liczbie ifów oraz pętli w kodzie. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:10:2","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Zwycięzcy ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:11:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Zwycięskie rozwiązanie - 99% zniżki na kurs C++ online Kacper Kaleta /** Notes from roman number principles that I've figured out: _________________________________________________________________________________________________ General: [rule 1] For these set: {M, D, C, L, X, V, I} - Maximum value that can be built is 3999. (MMMCMXCIX) Next value 4000 would need extra letter. (Mv) =\u003e (V = 5, v = 5000) - Maximum length of the roman stringValue is 15. (MMMDCCCLXXXVIII) = 3888 [rule 2] Numbers in the romanValue are arranged in the descending order. The only exception is subtraction. This allows to go through the ConversionList, going only forward. _________________________________________________________________________________________________ Subtraction: [rule 3] Cannot subtract by {500, 50, 5} =\u003e {D, L, V}. - Examples: DM != 500, LC != 50 [rule 4] - From X you can only subtract I, example: IX = 9 Wrong: VX != 5 - From C you can only subtract X, example: XC = 90 Wrong: IC != 99, Good: 99 = XCIX - From M you can only subtract C, example: MCM = 1900 Wrong: XM != 990, Good: 990 = CMXC [rule 5] - After subtracting: IX, it will never appear: V - After subtracting: XC, it will never appear: L - After subtracting: CM, it will never appear: D _________________________________________________________________________________________________ Letters Quantity: [rule 6] There can never be more than ONE of {D, L, V}. - Examples: DDD != 1500, LL != 100 [rule 7] There cannot be more than FOUR of {M, C, X}. - Examples: XXXIX = 39, MMMCM = 3900 [rule 8] There cannot be more than three of {M, C, X} IN A ROW. _________________________________________________________________________________________________ Other: [9] Subtracting the same expression several times: - Examples: MMIXIXIXIX or MMIVIVIVIV or XLXLVII [10] Wrong value after subtraction, like IVI or ILI - It's basically [rule 4] and [rule 5] violation [11] Post Subrtation errors: {VIV, IVI, IXI} **/ #pragma once #include\u003cstring\u003e#include\u003cforward_list\u003e //_____________________________________________________________________________________ typedef std::forward_list\u003cstd::pair\u003cchar,int\u003e\u003e ConversionList; class ValueTooLow_Exception{}; class ValueTooHigh_Exception{}; class TooManyInRow_Exception{}; class BadValue_Exception{}; class BadSubtraction_Exception{}; class BadValueAfterSubtraction_Exception{}; //_____________________________________________________________________________________ ConversionList conversionList { {'M',1000}, {'D',500}, {'C',100}, {'L',50}, {'X',10}, {'V',5}, {'I',1} }; const int c_maxInRow = 3; const int c_minValue = 1; const int c_maxValue = 3999; //_____________________________________________________________________________________ ConversionList::iterator GiveIteratorOnCharacter(const char, ConversionList::iterator); bool CheckForFiveish(int); // if value == 5 or 50 or 500 //_____________________________________________________________________________________ std::string toRoman(int value){ if (value \u003c c_minValue) throw ValueTooLow_Exception(); if (value \u003e c_maxValue) throw ValueTooHigh_Exception(); auto head = conversionList.begin(); auto tail = head; float floatcalc; // non-integer result of calculation int intcalc; // integer result of calculation std::string result = \"\"; while(value \u003e 0){ floatcalc = static_cast\u003cfloat\u003e(value) / static_cast\u003cfloat\u003e((*head).second); intcalc = value / (*head).second; if (floatcalc \u003c 1){ if (floatcalc \u003e= 0.9f \u0026\u0026 !CheckForFiveish((*head).second)){ // Subtraction: A =\u003e Works for NOT-fiveish scenerios: IX, XC, CM {X, C, M} tail = head; std::advance(head, 2); result += (*head).first; value += (*head).second; result += (*tail).first; value -= (*tail).second; ++tail; } else{ tail = head; ++head; } } else if (intcalc \u003e 3){ // Subtraction: B =\u003e Works for fiveish scenerios: IV, XL, CD {V, L, D} result += (*head).first; value += (*head).second; result += (*tail).first; value -= (*tail).second; } else{ result.append(intcalc, (*head).first); value -= ((*head).second * intcalc); } } return result; } int fromRoman(std::string value){ const unsigned int strLength = value.length(); int counter_theSame = 0, lastFiveSeen = 0, lastSubtraction = 0; int resultValue = 0; int indexValue; int nextValue; ConversionList::iterator clScope; //auto clScope = conversionList.begin(); // CLSCOPE - Narrows the scope of conversionList browsing // *cl - Conversion List Scope ConversionList::iterator scout; //auto scout = GiveIteratorOnCharacter(value[0], clScope); // SCOUT - Goes ahead, checks what to do. // Moves only between clScope and conversionList.end(); clScope = conversionList.begin(); scout = GiveIteratorOnCharacter(value[0], clScope); indexValue = (*scout).second; if(CheckForFiveish(indexValue)) lastFiveSeen = indexValue; for (unsigned int index = 1; index \u003c strLength; ++index){ scout = GiveIteratorOnCharacter(value[index], clScope); nextValue = (*scout).second; if (nextValue == lastFiveSeen) throw TooManyInRow_Exception(); if (indexValue ==","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:11:1","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Wyróżnione rozwiązania - 50% zniżki na kurs C++ online Robert Kumanek // https://github.com/Rosein/converter_roman_arabic #include \u003calgorithm\u003e#include \u003ciostream\u003e#include \u003cvector\u003e#include \u003cstring\u003e#include \u003cstdexcept\u003e int fromRoman( std::string roman ); std::string toRoman( int arabic ); int extractFromRomanDigit( char romanDigit ); std::vector\u003cstd::vector\u003cstd::string\u003e\u003e extractRomanFromNthDigit { { { \"\" }, { \"I\" }, { \"II\" }, { \"III\" }, { \"IV\" }, { \"V\" }, { \"VI\" }, { \"VII\" }, { \"VIII\" }, { \"IX\" } }, { { \"\" }, { \"X\" }, { \"XX\" }, { \"XXX\" }, { \"XL\" }, { \"L\" }, { \"LX\" }, { \"LXX\" }, { \"LXXX\" }, { \"XC\" } }, { { \"\" }, { \"C\" }, { \"CC\" }, { \"CCC\" }, { \"CD\" }, { \"D\" }, { \"DC\" }, { \"DCC\" }, { \"DCCC\" }, { \"CM\" } }, { { \"\" }, { \"M\" }, { \"MM\" }, { \"MMM\" } } }; constexpr int MAX_ROMAN_NUMERAL { 3999 }; constexpr int MIN_ROMAN_NUMERAL { 1 }; std::string toRoman( int arabic ) { if( arabic \u003e MAX_ROMAN_NUMERAL || MIN_ROMAN_NUMERAL \u003e arabic ) throw std::logic_error( \"Invalid input\" ); return extractRomanFromNthDigit [ 3 ] [ arabic / 1000 ] + extractRomanFromNthDigit [ 2 ] [ arabic % 1000 / 100 ] + extractRomanFromNthDigit [ 1 ] [ arabic % 100 / 10 ] + extractRomanFromNthDigit [ 0 ] [ arabic % 10 ]; } int extractFromRomanDigit( char romanDigit ) { switch( romanDigit ) { case 'M': return 1000; case 'D': return 500; case 'C': return 100; case 'L': return 50; case 'X': return 10; case 'V': return 5; case 'I': return 1; default: throw std::logic_error( \"Invalid input\"); } } int fromRoman( std::string roman ) { int arabic {}; int cur {}; for( unsigned int i = 0, roman_size = roman.size(); i \u003c roman_size; ++i ) { cur = extractFromRomanDigit( roman [ i ] ); if( i + 1 \u003c roman_size ) arabic += ( cur \u003e= extractFromRomanDigit( roman [ i + 1 ] ) ? cur : -cur ); else arabic += cur; } if( roman != toRoman( arabic ) || roman.size() == 0 ) throw std::logic_error( \"Invalidate input\" ); return arabic; } Moje komentarze Numer 2 pod względem szybkości działania Są wyjątki do obsługi błędów Bardzo czytelne, czysty kod ;) Brak strażnika nagłówka Używa LUT (LookUp Table) - stała złożoność Sprawdzanie poprawości fromRoman() za pomocą toRoman() fromRoman() może przyjmować stringa przez const \u0026 Bartek Kurosz #ifndef WYZWANIE_WYDAJNEGO_KODU_ROMAN_ARAB_CONVERTER_H #define WYZWANIE_WYDAJNEGO_KODU_ROMAN_ARAB_CONVERTER_H #include \u003cstring\u003e#include \u003cstring_view\u003e#include \u003cvector\u003e#include \u003cmap\u003e#include \u003cfunctional\u003e#include \u003ccstdint\u003e using Int = int_fast16_t; // to Roman inline std::map\u003cInt, std::string\u003e basicTokens{ {1, \"I\"}, {5, \"V\"}, {10, \"X\"}, {50, \"L\"}, {100, \"C\"}, {500, \"D\"}, {1000, \"M\"}, }; inline std::string two(const std::string \u0026token) { return token + token; } inline std::string three(const std::string \u0026token) { return token + token + token; } inline const std::map\u003cInt, std::function\u003cstd::string(Int)\u003e\u003e digitToToken{ {1, [](auto multiplier) { return basicTokens[multiplier]; }}, {2, [](auto multiplier) { return two(basicTokens[multiplier]); }}, {3, [](auto multiplier) { return three(basicTokens[multiplier]); }}, {4, [](auto multiplier) { return basicTokens[multiplier] + basicTokens[multiplier * 5]; }}, {5, [](auto multiplier) { return basicTokens[multiplier * 5]; }}, {6, [](auto multiplier) { return basicTokens[multiplier * 5] + basicTokens[multiplier]; }}, {7, [](auto multiplier) { return basicTokens[multiplier * 5] + two(basicTokens[multiplier]); }}, {8, [](auto multiplier) { return basicTokens[multiplier * 5] + three(basicTokens[multiplier]); }}, {9, [](auto multiplier) { return basicTokens[multiplier] + basicTokens[multiplier * 10]; }} }; inline constexpr Int determineMaxMultiplier(Int input) { return input \u003e= 1000 ? 1000 : (input \u003e= 100 ? 100 : (input \u003e= 10 ? 10 : 1)); } inline constexpr Int extractNumber(Int input, Int multiplier) { return input - (input % multiplier); } inline std::string translateDigitToToken(Int number, Int multiplier) { return digitToToken.at(number / multiplier)(multiplier); } inline constexpr int minRomanNumber{1}; inline constexpr int maxRomanNumber{3999}; inline std::string toRoman(int in) { if (in \u003c minRomanNumber or in \u003e maxRomanNumber) return {}; auto input{static_cast\u003cInt\u003e(in)}; std::string result{}; Int maxMultiplier{determineMaxMultiplier(input)}; for (auto multiplier{maxMultiplier}; input \u003e 0; multiplier /= 10) { auto number{extractNumber(input, multiplier)}; if (number) { result += translateDigitToToken(number, multiplier); input -= number; } } return result; } // from Roman struct Token { std::string_view text; Int number; }; using Tokens = std::vector\u003cToken\u003e; const inline std::array\u003cTokens, 4\u003e translationTable{ Tokens{ {\"MMM\", 3000}, {\"MM\", 2000}, {\"M\", 1000} }, Tokens{ {\"CM\", 900}, {\"DCCC\", 800}, {\"DCC\", 700}, {\"DC\", 600}, {\"D\", 500}, {\"CD\", 400}, {\"CCC\", 300}, {\"CC\", 200}, {\"C\", 100} }, Tokens{ {\"XC\", 90}, {\"LXXX\", 80}, {\"LXX\", 70}, {\"LX\", 60}, {\"L\", 50}, {\"XL\", 40}, {\"XXX\", 30}, {\"XX\", 20}, {\"X\", 10} }, Tokens{ {\"IX\", 9}, {\"VIII\", 8}, {\"VII\", 7}, {\"VI\", 6}, {\"V\", 5}, {\"IV\", 4}, {\"III\", 3}, {\"II\", 2}, {\"I\", 1} } };","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:11:2","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Pozostali finaliści - 10% zniżki na kurs C++ online Wiola B. Wiktor Z. Wszystkim bardzo dziękuję za udział w wyzwaniu, a zwycięzcom serdecznie gratuluję! ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:11:3","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Wnioski Dokładnie czytaj opis zadania Dokładnie testuj swoje rozwiązanie Jeśli uczestniczyliście kiedyś w rekrutacji, gdzie pierwszym etapem jest napisanie kawałka kodu, który później ma być sprawdzany automatycznie to większość rozwiązań odpada właśnie z tych 2 powodów. Aby dowieść poprawności działania kodu powinien on mieć testy jednostkowe. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:12:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Sprzedaż kursu C++ online Przy okazji omówienia tego wyzwania otwieram sprzedaż kursu C++ online. Osoby, które wygrały zniżki dostaną maile z odpowiednimi linkami ze zniżkami najpóźniej 25.04. Sprzedaż trwa tylko do czwartku 30 kwietnia 2020 i są 32 miejsca w cenie 1295 PLN. Moim założeniem było, aby zebrać 64 osoby, a trochę osób już zapisało się w przedsprzedaży, więc tylko tyle nam zostało do okrągłych 64 :) Po wykorzystaniu limitu zastrzegam sobie prawo do zwiększenia liczby miejsc oraz ceny kursu. Na koniec mam małą prośbę. Powiedz mi, czy lubisz te wyzwania i czy chcesz, aby były one organizowane cyklicznie. Napisz mi to w komentarzu poniżej lub w mailu. ","date":"2020-04-24","objectID":"/post/wyniki-wyzwania-wydajnego-kodu/:13:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyniki wyzwania wydajnego kodu","uri":"/post/wyniki-wyzwania-wydajnego-kodu/"},{"categories":["Post","Warto wiedzieć"],"content":"Wiesz, że w kodzie C++ możesz używać emoji? Nawet nie tylko w C++, w innych językach również. W poniższym bardzo szybkim wideo oprócz możliwości użycia emoji prezentuję 5 złych praktyk, które często zdarzają się osobom początkującym wraz z pokazaniem jak wyglądają dobre praktyki. Te 5 rzeczy to: Unikaj pustych bloków Unikaj porównań z true/false/nullptr Unikaj niepotrzebnych else Unikaj nadmiarowych zmiennych Używaj nawiasów klamrowych nawet do jednolinijkowców Bardzo ciekawi mnie, czy forma tego wideo przypadła Ci do gustu. Wiem, że tempo jest bardzo szybkie i pewnie trochę je zmniejszę w przypadku kolejnych produkcji. Proszę o opinię o tym filmie w komentarzu tutaj lub na YouTube :) ","date":"2020-04-23","objectID":"/post/emoji-w-kodzie/:0:0","tags":["c++","emoji","dobre praktyki","złe praktyki","wideo","youtube","nauka"],"title":"Emoji w kodzie + porady dla początkujących programistów","uri":"/post/emoji-w-kodzie/"},{"categories":["Post","Wyzwanie"],"content":"Ruszyło właśnie nowe wyzwanie! Wygraj 99% zniżki na profesjonalny kurs C++ online z elementami grywalizacji wart 1295 zł. Twoim zadaniem jest implementacja konwersji pomiędzy dwoma systemami liczbowymi.","date":"2020-04-13","objectID":"/post/wyzwanie-wydajnego-kodu/","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyzwanie wydajnego kodu - wygraj zniżkę na kurs C++ online","uri":"/post/wyzwanie-wydajnego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Ruszyło właśnie nowe wyzwanie! Tym razem jest to wyzwanie wydajnego kodu. Jak można się spodziewać po nazwie, rozwiązania zostaną przetestowane pod kątem ich złożoności obliczeniowej i optymalizacji. Nie chcę zdradzać za dużo szczegółów, ale mogę zdradzić, że do zaimplementowania jest konwersja pomiędzy dwoma systemami liczbowymi. Pełny opis zadania oraz lista wymagań są dostępne dla osób, które najpierw odpowiedzą na 3 pytania w quizie o C++ i zarejestrują się na wyzwanie. Zachęcam do udziału w zabawie, bo wygrać można zniżki na kurs C++ online. Nagroda główna to aż 99% procent zniżki. Oprócz niej przewidziane mam 5 nagród dodatkowych - 50% zniżki. Każda osoba, która prześle poprawnie działające rozwiązanie ma już gwarantowane 10% zniżki. Odwiedź stronę wyzwania W poprzednim wyzwaniu, czyli wyzwaniu czystego kodu 36 osób przesłało działające rozwiązanie. Konkurencja nie była więc zbyt duża. Na to wyzwanie zgłosiło się natomiast 130 osób. Zachęcam do zapoznania się z wynikami wyzwania czystego kodu, gdyż wiele osób napisało mi, że omówienie rozwiązań to bardzo wartościowa wiedza :) ","date":"2020-04-13","objectID":"/post/wyzwanie-wydajnego-kodu/:0:0","tags":["c++","wyzwanie","wydajny kod","challenge","online"],"title":"Wyzwanie wydajnego kodu - wygraj zniżkę na kurs C++ online","uri":"/post/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Napisz bibliotekę nagłówkową do konwersji liczb z arabskich na rzymskie i odwrotnie. Im wydajniejszy kod tym lepiej. Optymalizuj co się da. Możesz wygrać 99% zniżki na profesjonalny kurs C++ online.","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Zadanie Oto twoje zadanie. Napisz bibliotekę nagłówkową (header-only) do konwersji liczb z arabskich na rzymskie i odwrotnie. Do zaimplementowania masz dokładnie 2 funkcje, które muszą nazywać się toRoman() (konwersja z arabskich na rzymskie) oraz fromRoman() (konwersja z rzymskich na arabskie) W bibliotece możesz mieć więcej funkcji pomocniczych, jeśli tak Ci będzie wygodniej. Biblioteka powinna składać się tylko z jednego pliku nagłówkowego hpp. Oczywiście do jej przetestowania utwórz sobie plik cpp, w którym ją zaincludujesz, ale nie musisz go przesyłać. Przykład użycia tych funkcji: auto roman = toRoman(42); std::cout \u003c\u003c roman \u003c\u003c '\\n'; // \"XLII\" auto arabic = fromRoman(roman); std::cout \u003c\u003c arabic \u003c\u003c '\\n'; // 42 ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:1:0","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Kryteria oceny Poprawne działanie. Jeśli twoje funkcje nie będą zwracały prawidłowych rezultatów, to twoje rozwiązanie będzie odrzucone. Obsługa błędów. Przykładowo, co się stanie, gdy podamy nieprawidłową wartość do funkcji, taką jak za duża liczba? Złożoność algorytmów i optymalizacje. Im program będzie szybszy tym lepiej. Jak najmniejsza liczba instrukcji warunkowych. Im mniej if, switch/case oraz goto tym lepiej Jak najmniejsza liczba pętli. Im mniej gołych for, do, while lub goto tym lepiej. Używaj algorytmów STL. Kryteria w kolejności od najważniejszego do najmniej ważnego. Przykładowo jeśli kilka rozwiązań działa poprawnie i obsługuje błędy, to o przyznaniu głównej nagrody zadecyduje złożoność algorytmów i optymalizacje. Jeśli będą one podobne dla kilku rozwiązań to będę patrzył na liczbę instrukcji warunkowych, itd. ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:2:0","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Termin Rozwiązania można przysyłać do wtorku, 21.04.2020 do godziny 23:59. ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:3:0","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Nagrody ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:4:0","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Nagroda główna - 1 x 99% zniżki na kurs C++ online (1282,05 PLN zniżki) ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:4:1","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Nagrody dodatkowe - 5 x 50% zniżki na kurs C++ online (647,50 PLN zniżki) ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:4:2","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Nagrody gwarantowane - 10% zniżki na kurs C++ online (129,50 PLN zniżki) Nagorda gwarantowana zostanie przyznana każdemu, kto przyśle poprawnie działające rozwiązanie, tzn. spełniające przynajmniej pierwsze kryterium. ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:4:3","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Regulamin Zniżka obowiązuje tylko na obecną edycję kursu C++ online. Aby ją wykorzystać należy kupić kurs w kwietniu 2020. Domyślnie przewidziana jest płatność w ratach. ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:5:0","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"§ 1 Kwestie RODO Przesyłając rozwiązanie zgadzasz się na opublikowanie Twojego imienia i nazwiska na stronie https://coders.school Nie opublikuję nigdzie Twojego adresu email. ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:5:1","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"§ 2 Wyzwanie czystego kodu - WCK Zwycięzca główny (100% zniżki) oraz zwycięzcy dodatkowi WCK mogą wziąć udział w tym wyzwaniu, ale tylko dla sportu, bo nie dostaną żadnej zniżki w tym wyzwaniu, a ich rozwiązania nie będą brane pod uwagę :) Zwycięzcy z nagrodą gwarantowaną (10% zniżki) WCK mogą wziąć udział w tym wyzwaniu. W przypadku wygrania nagrody o większej wartości obowiązywać będzie tylko ta bardziej wartościowa nagroda. W przypadku ponownego wygrania nagrody gwarantowanej (10% zniżki) nie będą się one sumować. Wygraną będzie po prostu 10% zniżki. ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:5:2","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Przysyłanie rozwiązań Rozwiązanie prześlij emailem: adres: wyzwanie@coders.school tytuł: Wyzwanie wydajnego kodu treść: plik nagłówkowy (jako treść maila lub w załączniku) lub link do repo na GitHubie lub link do Gist ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:6:0","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Publikacja wyników Wyniki wyzwania postaram się opublikować najpóźniej do piątku, 24.04.2020 na stronie WWW Coders School. Informacje o ich opublikowaniu prześlę wszystkim uczestnikom na maila. Napiszę też posta na fanpage’u Coders School na Facebooku oraz na profilu na LinkedIn Tak samo jak poprzednio zamierzam też nagrać wideo, w którym omówię wszystkie szczegóły oceny rozwiązań oraz dam trochę wskazówek, na co warto zwracać uwagę :) ","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:7:0","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Wyzwanie"],"content":"Podejmujesz wyzwanie? :)","date":"2020-04-12","objectID":"/wyzwanie-wydajnego-kodu/:7:1","tags":["wyzwanie","challenge","wydajny kod","c++","online"],"title":"Wyzwanie wydajnego kodu","uri":"/wyzwanie-wydajnego-kodu/"},{"categories":["Post","Webinar"],"content":"31 marca robiłem webinar o nowościach w C++20. Zachęcam do obejrzenia. Część z tych nowości użyjemy podczas kursu online :) Na nagraniu omawiam: Moduły (modules) Zakresy (ranges) Korutyny (coroutines) Koncepty (concepts) operator\u003c=\u003e std::source_location kalendarz w std::chrono stałe matematyczne ","date":"2020-04-11","objectID":"/post/nowosci-w-cpp-20/:0:0","tags":["c++","c++20","webinar","youtube","wideo"],"title":"Nowości w C++ 20 - nagranie webinaru","uri":"/post/nowosci-w-cpp-20/"},{"categories":["Post","Wyzwanie"],"content":"Omówienie wyników wyzwania czystego kodu - artykuł i wideo. Zobacz zwycięskie rozwiązania.","date":"2020-04-02","objectID":"/post/wyniki-wyzwania-czystego-kodu/","tags":["wyzwanie","challenge","czysty kod","c++","online"],"title":"Wyniki wyzwania czystego kodu","uri":"/post/wyniki-wyzwania-czystego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Dzisiaj 2 kwietnia i tak jak obiecałem publikuję wyniki wyzwania czystego kodu. Jeśli chcesz sobie przypomnieć o co dokładnie chodziło to zobacz stronę wyzwania. ","date":"2020-04-02","objectID":"/post/wyniki-wyzwania-czystego-kodu/:0:0","tags":["wyzwanie","challenge","czysty kod","c++","online"],"title":"Wyniki wyzwania czystego kodu","uri":"/post/wyniki-wyzwania-czystego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Statystyki Osoby zapisane na wyzwanie - 130 Osoby, które przysłały rozwiązanie - 36 Dobrze przetestowane rozwiązania - 24 Rozwiązania bez pętli - 12 Rozwiązania, które zaliczyły testy - 9 Rozwiązania bez pętli, które zaliczyły testy - 6 ","date":"2020-04-02","objectID":"/post/wyniki-wyzwania-czystego-kodu/:1:0","tags":["wyzwanie","challenge","czysty kod","c++","online"],"title":"Wyniki wyzwania czystego kodu","uri":"/post/wyniki-wyzwania-czystego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Jak oceniałem? Policzyłem pętle w każdym nadesłanym kodzie. Najlepsze rozwiązania miały oczywiście 0 pętli, a najwięcej było 7 pętli. Napisałem testy jednostkowe, które stanowiły taką ramę do określania, w których przypadkach program działa poprawnie. Ale faktem jest, że niektórzy tak bardzo zmienili interfejs, że nie mogłem tych testów dopasować do każdego nadesłanego rozwiązania. Jeśli widziałem, że było ono czysto napisane, tzn. używało STLa i nie było pętli to pisałem adaptery, które spowodują, że będzie można uruchomić testy. W 24 na 36 rozwiązań udało mi się odpalić moje UT. Z tych 24 rozwiązań tylko 4 przeszły wszystkie testy, które napisałem. Był jednak 1 test, którego zdecydowałem się nie brać pod uwagę. Dotyczył on tego czy znak nowej linii ‘\\n’ jest również podmieniany. Pomyślałem sobie, że szyfrogram fajnie porównywać z oryginalnym tekstem, jeśli znaki nowych linii nie są podmieniane. Znak nowej linii nie jest znakiem drukowalnym ASCII. Niektóre implementacje go nie podmieniały, co wydało mi się fajne, ale tak naprawdę to, że program ma się tak zachowywać w żaden sposób nie wynikało z wymagań. Nie brałem więc pod uwagę tego jednego testu. A więc o nagrodę główną i dodatkowe walczyły te rozwiązania, które miały zaliczone 26/27 asercji w testach i co więcej nie implementowały szyfru rotacyjnego (np. Cezara) tylko faktycznie podstawieniowy. Tak, tutaj nie każdy dobrze zrozumiał jak ma wyglądać szyfr podstawieniowy. Było to w sumie 9 osób. Z czego do walki o na nagrodę główną jaką jest 100% zniżki kwalifikowało się 6 rozwiązań, bo tyle z nich nie miało żadnej pętli. O główną wygraną walczyły 3 rozwiązania. Była to tak zaciekła walka, że nawet się zastanawiałem, czy nie podzielić nagrody głównej między nie, czyli każdemu dać po 33%? :) To oczywiście żart. Ale co zadecydowało o zwycięstwie? Formatowanie kodu i magiczne wartości. Jeśli w kodzie były używane gołe numery (32, 95 czy 127), które pewnie wiecie co oznaczają, to był za to minus. Jeśli formatowanie było niejednolite, czyli np. gdzieś operacja dodawania była zapisana a+b, podczas gdy w innych miejscach ta osoba stawiała spacje pomiędzy operatorami, to też był minus. Wcięcia - jedna osoba miała niejednolite wcięcia, np. brak 1 spacji lub nadmiarowa spacja. Możecie na podstawie tego dojsć do wniosku, że o wygranej zadecydowały detale. I tak. Dokładnie tak było. Czy normalnie w pracy niepostawienie gdzieś spacji może spowodować odrzucenie rozwiązania? To zależy od osoby oceniającej. Raczej nie, ale też warto mieć automatyczne formattery, które odwalą taką mechaniczną robotę za nas. Dlaczego formatowanie kodu jest takie ważne? Uwierzcie, że kod pisze się tylko raz, ale czyta się go wiele razy. Czytają go różne osoby, nie tylko autor. Doświadczeni programiści nie patrzą na kod znak po znaku, tylko wzrokowo wychwytują pewne wzorce. Widzą jakieś poszczególne elementy i po prostu parsują kod wzrokiem. Często zaburzenie formatowania powoduje parsing error w mózgu i wtedy włącza się tryb dokładnego przyglądania, aby zrozumieć o co w kodzie chodzi. Dlatego dobrze napisany kod, czyta się jak poezję. A przy źle napisanym kodzie, trzeba się zmóżdżać, aby go ogarnąć. Możecie mi jeszcze zarzucić, że nie brałem pod uwagę wydajności rozwiązań. Wiem, że dla doświadczonych programistów to jest bardzo ważne. Właściwie to powinno być ważne dla każdego programisty. Ale doświadczony programista, nawet nie myśląc za bardzo, od razu tworzy zoptymalizowane rozwiązania. Chociażby przekazuje zmienne przez const\u0026 jeśli chce unikać zbędnych kopii. Albo wykorzystuje RVO. Albo stosuje constexpr. To jednak nie było zawarte jako kryteria oceny i gdybym patrzył pod tym kątem na rozwiązania, to pewnie wygrałoby inne. Ale przed nami jeszcze sprzedaż kursu. Tam też zorganizuję kolejne wyzwanie. I być może już wam uwzględnię optymalizacje :) Tak naprawdę w tym wyzwaniu nie było kodu, który jednocześnie byłby najwydajniejszy i najśliczniejszy. ","date":"2020-04-02","objectID":"/post/wyniki-wyzwania-czystego-kodu/:2:0","tags":["wyzwanie","challenge","czysty kod","c++","online"],"title":"Wyniki wyzwania czystego kodu","uri":"/post/wyniki-wyzwania-czystego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Najczęściej popełniane błędy lub rzeczy, które można było usprawnić Kolejność losowa. Pierwszy błąd wcale nie oznacza, że występował on najczęściej. Złe zrozumienie zadania, czyli implementacja Szyfru rotacyjnego (takiego jak szyfr Cezara) zamiast podstawieniowego. Szyfr rotacyjny to szczególny przypadek podstawieniowego. W wymaganiach do wyzwania było dokładnie wyszczególnione, że to nie ma być szyfr Cezara. Podałem nawet przykład, gdzie znaki są mapowane na szyfrogramy bez jakiejś regularności. 32 zamiast ' ' i 126 zamiast ‘~’. Często na rozmowach rekrutacyjnych macie coś zrobić ze znakami, np skonwertować cyfrę z char na int. Nie musicie znać kodu ASCII tego znaku. Wystarczy, że po prostu napiszecie ten znak. A konwersję o której mówię najłatwiej zrobić odejmując ‘0’ -\u003e '9' - '0' = 9 Własne struktury trzymające 2 wartości zamiast std::pair\u003cT, U\u003e Styl języka C zamiast C++. typedef struct { /* ... */ } Name; zamiast struct Name { /* ... */ }; Zwracanie argumentu przyjętego przez kopię. Lepiej przyjąć agrument przez const\u0026, kopię stworzyć lokalnie wewnątrz funkcji i ją zwrócić. Dzięki temu zadziała RVO (Return Value Optimisation). Brak const \u0026 przy parametrach, aby unikać zbędnych kopii. Użycie std::random_shuffle(), które jest oznaczone jako deprecated (przestarzałe) w C++14, a usunięte w C++17. Stosowanie char* zamiast std::string. Stosowanie wskaźników. Naprawdę nie były potrzebne w tym wyzwaniu. Wpisywanie ciągu ascii z palca zamiast wygenerowania za pomocą std::generate / std::iota. No chyba że robicie constexpr i zależało wam na szybkości. Ale od C++20 nawet std::iota będzie constexpr. Brak dodatkowych sprawdzeń kompilatora -Wall -pedantic -Wextra -Werror -Wconversion Porównania pomiędzy liczbami unsigned i signed. Zastosowanie powyższych flag kompilacji powodowało, że kompilator się o to upominał. Używanie static wewnątrz funkcji. Ogólnie to nie jest zła praktyka, jeśli się wie co się robi. Ale w niektórych przypadkach static powodowało, że funkcje nadawały się do wywołania tylko raz, bo drugie ich wywołanie korzystało z wartości, dla których poprzednie wywołanie tej funkcji się skończyło. Z teog powodu niektóre testy nie przechodziły. C-style cast (int)variable zamiast static_cast\u003cint\u003e(variable) Zła praktyka if (sth) { } else { // ... } Dobra praktyka if (!sth) { // ... } Wstawianie kodu od razu do main() zamiast użycia sugerowanych nazw funkcji. Potem aby to trzetestować to musiałem je i tak wyciągać do funkcji. Zakaz używania pętli część osób skojarzyła z rekurencją. Ja natomiast nie wiem czemu o niej zapomniałem. Rozwiązania rekurencyjne jak najbardziej w takim przypadku były uwzględniane. Zazwyczaj nie powodowały one, że kod był czystszy niż w przypadku używania gotowych algorytmów STL, bo o to chodziło w tym zadaniu. Poza tym rekurencja ma swoje wady. Cześć algorytmów jest oczywiście łatwiej zapisać rekurencyjnie, jak np. merge sort, ale mamy tutaj większe ograniczenia. Szybciej zużywamy pamięć stosu i łatwo go przepełnić. Gdybyśmy mieli zaszyfrować jakieś bardzo długie teksty, to rozwiązania rekurencyjne odpadają. Poza tym kompilator może zoptymalizować kod bez rekurencji, czyli wykorzystujący klasyczne pętle, ale ukryte w gotowych algorytmach STL. Stosowanie goto w celu uniknięcia pętli. Chociaż brawo za pomysłowość, bo mi to nie przyszło do głowy. Już jestem tak nauczony, że goto się nie używa i już. Brak losowości przy generowaniu klucza. Część osób używała std::random_shuffle(), który został usunięty w C++17, ale wtedy kompilowałem kod w C++14, aby zadziałał. Część niestety stosowała klasyczne rand(), ale to nie jest właściwe rozwiązanie. Trzeba było wtedy dodatkowo pamiętać o inicjalizacji srand(time). Bez tego nie ma żadnej losowości i to moje testy ładnie wykrywały. Najlepiej było użyć std::shuffle() dostarczając jakiś generator, np. std::mt19937 z nagłówka \u003crandom\u003e Używanie funkcji, które rzucają wyjątki, jak np. map::at(). Samo użycie takich rzeczy czy wyjątków w ogóle nie jest złą decyzją, ale problemem jest brak ich obsługi. Moje testy pozwalały na wykrycie takich rzeczy. Gdy ktoś np. nie obsługiwał pełnego zestawu drukowalnych znaków ascii, to często miałem nieobsłużone wyjątki. To obniżało ocenę rozwiązania. Zbędne komentarze. Komentarze odnośnie tego co kod robi, wbrew tego co was uczą na uczelniach nie są mile widziane. Jakieś docstringi, które komentują interfejs - ok, nie zwracałem na nie uwagi i ich obecność w żaden sposób nie podnosiła wyniku. Dokumentacja nie była wymagana. Ale pisanie w komentarzu, co się w danej linijce dzieje jest przesadą. Kod powinien być samodokumentujący się. Zamiast zmiennej a napiszcie właściwą nazwę, np. key albo counter. Koniecznie po angielsku. Na szczęście nie otrzymałem chyba żadnego rozwiązania, które miałoby polskie nazwy zmiennych. Standard w branży programistycznej jest taki, że ma być po angielsku. Co do samych komentarzy jeszcze to jest taka fajna zasada czystego kodu, która mówi, że jeśli masz ochotę dać gdzieś komentarz, bo kod jest ni","date":"2020-04-02","objectID":"/post/wyniki-wyzwania-czystego-kodu/:3:0","tags":["wyzwanie","challenge","czysty kod","c++","online"],"title":"Wyniki wyzwania czystego kodu","uri":"/post/wyniki-wyzwania-czystego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Hall of Fame ","date":"2020-04-02","objectID":"/post/wyniki-wyzwania-czystego-kodu/:4:0","tags":["wyzwanie","challenge","czysty kod","c++","online"],"title":"Wyniki wyzwania czystego kodu","uri":"/post/wyniki-wyzwania-czystego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Zwycięskie rozwiązanie - 100% zniżki na kurs C++ online Autor: Krzysztof Szytko const short ASCII_BEGIN = 32; //Include (Space) const short ASCII_END = 127; //Exclude (DEL) std::string generateKey() { std::vector\u003cchar\u003e vKey(ASCII_END - ASCII_BEGIN); std::iota(vKey.begin(), vKey.end(), ASCII_BEGIN); std::shuffle(vKey.begin(), vKey.end(), std::mt19937{ std::random_device{}() }); return std::string{ vKey.begin(), vKey.end() }; } std::string encrypt(std::string m, std::string key) { std::transform(m.begin(), m.end(), m.begin(), [\u0026key](char c) { return (c \u003e= ASCII_BEGIN \u0026\u0026 c \u003c ASCII_END) ? key[c - ASCII_BEGIN] : c; }); return m; } std::string decrypt(std::string m, std::string key) { std::transform(m.begin(), m.end(), m.begin(), [\u0026key](char c) { return (c \u003e= ASCII_BEGIN \u0026\u0026 c \u003c ASCII_END) ? key.find(c) + ASCII_BEGIN : c; }); return m; } Moje komentarze 0 pętli Można było użyć ' ' zamiast 32. Trochę trudniej napisać znak DEL :D Argumenty można było przekazać przez const\u0026 Agrument std::string m mógł się nazywać std::string message vKey mogło być od razu typu std::string. Nie trzeba by było kopiować zawartości vectora do stringa. ","date":"2020-04-02","objectID":"/post/wyniki-wyzwania-czystego-kodu/:4:1","tags":["wyzwanie","challenge","czysty kod","c++","online"],"title":"Wyniki wyzwania czystego kodu","uri":"/post/wyniki-wyzwania-czystego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Wyróżnione rozwiązania - 50% zniżki na kurs C++ online Marcin Duś const std::pair\u003cint, int\u003e allowedChars{32,127}; std::string encrypt(std::string message, const std::vector\u003cint\u003e\u0026 key) { std::transform(message.begin(), message.end(), message.begin(), [=](unsigned char c) { return key[static_cast\u003cint\u003e(c)-allowedChars.first]; }); return message; } std::string decrypt(std::string message, std::vector\u003cint\u003e key) { std::transform(message.begin(), message.end(), message.begin(), [=](unsigned char c) { return std::distance(key.begin(), std::find(key.begin(), key.end(), static_cast\u003cint\u003e(c))) + allowedChars.first; }); return message; } std::vector\u003cint\u003e generateKey() { std::vector\u003cint\u003e key(allowedChars.second-allowedChars.first); std::generate(key.begin(), key.end(), [n = allowedChars.first] () mutable { return n++; }); unsigned seed = std::chrono::system_clock::now().time_since_epoch().count(); std::shuffle(key.begin(), key.end(), std::default_random_engine(seed)); return key; } Moje komentarze Rozwiązanie bardzo podobne do zwycięskiego 0 pętli Formatowanie - niejednolite wcięcia Formatowanie - niejednolite spacje przy operatorach Optymalizacja - argumenty można było przyjąć przez const \u0026, a zwracać zmienną lokalną, aby zadziałało RVO Optymalizacja - lambdy mogą przechwytywać przez referencję Zamiast pary allowedChars można było użyć odpowiednio nazwanych stałych constexpr Grzegorz Choiński const char firstAsciiPrintableChar = ' '; const int amountOfPrintableAsciiChars = 95; std::vector\u003cchar\u003e generateKey() { std::vector\u003cchar\u003e key(amountOfPrintableAsciiChars); std::generate(key.begin(), key.end(), [n = firstAsciiPrintableChar]() mutable { return n++; }); std::random_device rd; std::mt19937 g(rd()); std::shuffle(key.begin(), key.end(), g); return key; } std::string encrypt(std::string message, std::vector\u003cchar\u003e key) { std::transform(message.begin(), message.end(), message.begin(), [key = key](char c) -\u003e char { return key[c - firstAsciiPrintableChar]; }); return message; } std::string decrypt(std::string cypher, std::vector\u003cchar\u003e key) { std::transform(cypher.begin(), cypher.end(), cypher.begin(), [key = key](char c)-\u003e char { int index = std::distance(key.begin(), std::find(key.begin(), key.end(), c)); return index+firstAsciiPrintableChar; }); return cypher; } Moje komentarze Rozwiązanie bardzo podobne do zwycięskiego 0 pętli Formatowanie - niejednolicie używane spacje przy operatorach + oraz -\u003e Niepotrzebna kalka nazwy key = key na liście przechwytującej Optymalizacja - lambdy mogą przechwytywać przez referencję Optymalizacja - argumenty można było przyjąć przez const \u0026, a zwracać zmienną lokalną, aby zadziałało RVO Wojciech Razik using KeyType = std::array\u003cchar, 127\u003e; template \u003cstd::size_t max\u003e constexpr auto make_array() { return []\u003cstd::size_t... Vals\u003e(std::index_sequence\u003cVals...\u003e) { return std::array\u003cchar, max\u003e{Vals...}; } (std::make_index_sequence\u003cmax\u003e{}); } constexpr KeyType sortedChars = make_array\u003c127\u003e(); std::map\u003cchar, char\u003e generateLookup(const KeyType\u0026 source, const KeyType\u0026 destination) { std::map\u003cchar, char\u003e lookup_table; std::transform(source.begin(), source.end(), destination.begin(), std::inserter(lookup_table, lookup_table.end()), [](char lhs, char rhs) { return std::pair{lhs, rhs}; }); return lookup_table; } std::string transform(std::string message, std::map\u003cchar, char\u003e lookup_table) { std::transform(message.begin(), message.end(), message.begin(), [\u0026lookup_table](char c) { if (lookup_table.contains(c)) { return lookup_table[c]; } return c; }); return message; } std::string encrypt(const std::string\u0026 message, const KeyType\u0026 key) { return transform(message, generateLookup(sortedChars, key)); } std::string decrypt(const std::string\u0026 message, const KeyType\u0026 key) { return transform(message, generateLookup(key, sortedChars)); } KeyType generateKey() { std::random_device rd; std::mt19937 g(rd()); auto to_shuffle = sortedChars; std::shuffle(to_shuffle.begin(), to_shuffle.end(), g); return to_shuffle; } Moje komentarze Ładne zastosowanie C++20 0 pętli make_array() pomimo działania w czasie kompilacji, nie jest tak czytelne jak std::iota. Szablonowa lambda z szablonem wariadycznym powoduje, że trzeba się chwilę zagłębić w ten kod, aby go zrozumieć generateLookup() jest wywoływane każdorazowo przy wywołaniu encrypt() lub decypt(), pomimo iż jego wynik działania za każdym razem będzie ten sam, gdy używamy tego samego klucza Można użyć std::back_inserter(lookup_table) zamiast std::inserter(lookup_table, lookup_table.end()) Parametry są przekazywane przez const \u0026, chociaż nie wszędzie. Andrzej Rafalski std::vector\u003cchar\u003e generateKey(){ std::vector\u003cchar\u003e key(95); std::iota(key.begin(), key.end(), 32); std::random_shuffle(key.begin(), key.end(), [](int i){ return std::rand()%i; }); return key; } std::string encrypt(std::string message, const std::vector\u003cchar\u003e \u0026key){ auto letterEncrypt = [key](char arg){char encrypted_letter = key[arg-32]; return encrypted_letter;}; std::transform(message.begin(), message.end(), messag","date":"2020-04-02","objectID":"/post/wyniki-wyzwania-czystego-kodu/:4:2","tags":["wyzwanie","challenge","czysty kod","c++","online"],"title":"Wyniki wyzwania czystego kodu","uri":"/post/wyniki-wyzwania-czystego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Pozostali finaliści - 10% zniżki na kurs C++ online Wiktor B. Mint B. Jakub C. Dominik B. Artur J. Kacper K. Kamil K. Kacper K. Krzysztof K. Konrad K. Sebus K. Mateusz K. Paweł L. Mariusz L. Radosław M. Sylwia M. Rafał M. Mateusz K. Maurycy N. Marcin N. Szymon O. Rafał R. Mateusz S. Mike T. Mateusz U. Jan W. Jakub W. Łukasz W. Radosław Z. Jan Z. ","date":"2020-04-02","objectID":"/post/wyniki-wyzwania-czystego-kodu/:4:3","tags":["wyzwanie","challenge","czysty kod","c++","online"],"title":"Wyniki wyzwania czystego kodu","uri":"/post/wyniki-wyzwania-czystego-kodu/"},{"categories":["Post","Wyzwanie"],"content":"Testy jednostkowe Ślicznie dziękuję wszystkim wam za udział w wyzwaniu. Wszystkim zwycięzcom gratuluję :) PS. W kwietniu szykuje się kolejne wyzwanie. Jeśli nie chcesz go przegapić, to zapisz się na newsletter ","date":"2020-04-02","objectID":"/post/wyniki-wyzwania-czystego-kodu/:5:0","tags":["wyzwanie","challenge","czysty kod","c++","online"],"title":"Wyniki wyzwania czystego kodu","uri":"/post/wyniki-wyzwania-czystego-kodu/"},{"categories":["Wyzwanie"],"content":"Za Tobą już quiz z C++, a to Twoje zadanie. Napisz aplikację, która szyfruje i deszyfruje tekst używając szyfru podstawieniowego. Szyfr podstawieniowy to po prostu podmiana liter tekstu na inne litery. Najprostszym przykładem jest szyfr Cezara, w którym każdy znak jest przesunięty o 3 pozycje. ","date":"2020-03-18","objectID":"/wyzwanie-stl/:0:0","tags":["wyzwanie","challenge","czysty kod","c++","online","stl"],"title":"Wyzwanie czystego kodu","uri":"/wyzwanie-stl/"},{"categories":["Wyzwanie"],"content":"Przykład szyfru Cezara ALA MA KOTA → DOD PD LRWD (dla alfabetu łacińskiego, nie polskiego) Twoim zadaniem jednak nie jest implementacja szyfru Cezara, ale po prostu szyfru podstawieniowego. W tym celu najpierw musisz zapisać gdzieś informacje, który znak przez jaki będzie zastąpiony. Ta informacja będzie kluczem, służącym do szyfrowania i/lub deszyfrowania. Np: a → g b → c c → z d → r … i tak dalej. Po zaszyfrowaniu takim kluczem ciągu abcd otrzymamy gczr. Aby odszyfrować szyfrogram gczr musimy zastosować operację odwrotną, czyli sprawdzić jaki znak został podmieniony na każdy kolejny z szyfrogramu. ","date":"2020-03-18","objectID":"/wyzwanie-stl/:1:0","tags":["wyzwanie","challenge","czysty kod","c++","online","stl"],"title":"Wyzwanie czystego kodu","uri":"/wyzwanie-stl/"},{"categories":["Wyzwanie"],"content":"Wymagania obowiązkowe Losowe generowanie klucza (innego przy każdym uruchomieniu) Szyfrowanie ciągu wejściowego (obojętnie czy jest to argument programu argv, cin, plik, czy string) i wypisanie rezultatu na ekranie (cout) Deszyfrowanie zaszyfrowanego wyżej ciągu i wypisanie rezultatu na ekranie (cout) ","date":"2020-03-18","objectID":"/wyzwanie-stl/:2:0","tags":["wyzwanie","challenge","czysty kod","c++","online","stl"],"title":"Wyzwanie czystego kodu","uri":"/wyzwanie-stl/"},{"categories":["Wyzwanie"],"content":"Wymagania dodatkowe, czyli kryteria oceny Obsługa wszystkich znaków drukowanych (cyfry, przecinki, kropki, wykrzykniki, małe i duże litery, spacje) Użycie jak najmniejszej liczby pętli (idealnie bez jakichkolwiek pętli for, do, while, for_each) Używanie algorytmów STL Elegancki i czysty kod (jednolite formatowanie, konwencje nazewnicze) Krótki kod ","date":"2020-03-18","objectID":"/wyzwanie-stl/:3:0","tags":["wyzwanie","challenge","czysty kod","c++","online","stl"],"title":"Wyzwanie czystego kodu","uri":"/wyzwanie-stl/"},{"categories":["Wyzwanie"],"content":"Szkielet kodu Zacznij uzupełniając poniższy program. Cały program może składać się tylko z jednego pliku .cpp, ale jeśli potrzebujesz ich więcej, to śmiało. #include \u003cstring\u003e #include \u003ciostream\u003e #include \u003ccassert\u003e // TODO: Your implementation goes here int main() { // Feel free change below code if needed. std::string message = \"Hello, Coders School!\"; auto key = generateKey(); auto cypher = encrypt(message, key); auto result = decrypt(cypher, key); std::cout \u003c\u003c \"Message: \" \u003c\u003c message \u003c\u003c '\\n'; std::cout \u003c\u003c \"Cypher: \" \u003c\u003c cypher \u003c\u003c '\\n'; std::cout \u003c\u003c \"Result: \" \u003c\u003c result \u003c\u003c '\\n'; assert(message == result); return 0; } ","date":"2020-03-18","objectID":"/wyzwanie-stl/:4:0","tags":["wyzwanie","challenge","czysty kod","c++","online","stl"],"title":"Wyzwanie czystego kodu","uri":"/wyzwanie-stl/"},{"categories":["Wyzwanie"],"content":"Przysyłanie rozwiązań Aby przesłać mi rozwiązanie musisz mieć pewność, że spełnia ono wszystkie wymagania obowiązkowe. Im więcej wymagań dodatkowych zostanie spełnione, tym lepsza będzie ocena Twojego rozwiązania. Rozwiązanie prześlij na adres email lukasz@coders.school. Tytuł maila: “Wyzwanie czystego kodu”. Treść: Link do repozytorium na GitHubie lub Link do Gista lub Plik źródłowy w załączniku (nie wysyłaj skompilowanego programu!) Wyniki wyzwania opublikuję na WWW i Facebooku Coders School 2 kwietnia. Ze zwycięzcami skontaktuję się mailowo. Zwycięskie rozwiązania zostaną opublikowane, aby wszystkie osoby biorące udział w wyzwaniu mogły porównać swój kod ze zwycięskim. ","date":"2020-03-18","objectID":"/wyzwanie-stl/:5:0","tags":["wyzwanie","challenge","czysty kod","c++","online","stl"],"title":"Wyzwanie czystego kodu","uri":"/wyzwanie-stl/"},{"categories":[],"content":"Dzięki za zgłoszenie! 🥳 Masz tutaj coś extra – prezentację o C++11 / C++14 / C++17. Możesz przejrzeć jakie nowości weszły do języka C++ w tych standardach. Prezentacja z Nowoczesnego C++ Równolegle z przeglądaniem prezentacji polecam Ci wykonywać zadania, dzięki którym czegoś się nauczysz. Poniżej masz linka do zadań online, nie musisz nic ściągać. Wykonaj zadanie - unowocześnij kod w C++ Mam też coś jeszcze. Nagranie z jednej z lekcji online z ostatniej edycji stacjonarnego kursu C++. To nagranie było takim testem, czy bez problemu uda się wszystko przenieść do kursu online. Zobacz jak wygląda przykładowa lekcja, jeśli jeszcze jej nie widziałeś/-aś. Jeśli to o czym tam mówię to dla Ciebie zupełna magia, to bez obaw. Po kursie nauczysz się używać biblioteki STL bezproblemowo. Zawsze z chęcią przyjmuję informację zwrotną odnośnie wszystkiego. Czy to mojej osoby, czy kursu, czy konkretnego nagrania, czy materiałów. Jeśli chcesz mi coś przekazać to pisz śmiało na lukasz@coders.school 🙂 Łukasz Ziobroń ","date":"2020-03-18","objectID":"/prezent-za-zgloszenie/:1:0","tags":[],"title":"Prezent za zgłoszenie","uri":"/prezent-za-zgloszenie/"},{"categories":[],"content":"🎁 Łap prezenty! Prezentacja z nowoczesnego C++ Równolegle z przeglądaniem prezentacji polecam Ci wykonywać zadania, dzięki którym czegoś się nauczysz. Poniżej masz linka do zadań online, nie musisz nic ściągać. Wykonaj zadanie - unowocześnij kod w C++ Jeśli udało Ci się już podejść do naszego Testu z C++ to poniżej znajdziesz wyjaśnienie odpowiedzi. Jeśli nie, to najpierw go wypełnij, aby nie psuć sobie zabawy 🙂 Wypełnij nasz test z C++ Zobacz wyjaśnienie odpowiedzi do naszego testu z C++ Życzę wytrwałości w nauce 🙂 Łukasz Ziobroń ","date":"2020-03-16","objectID":"/prezenty/:1:0","tags":[],"title":"Prezenty","uri":"/prezenty/"},{"categories":null,"content":"Materiały do nauki C++, książki o c++, kursy online c++, pdf c++. Różne poziomy: dla początkujących, dla zaawansowanych, dla ekspertów.","date":"2020-02-25","objectID":"/resources/","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Darmowe PDFy Pozycja Opis goalkicker.com praca zbiorowa wielu autorów C++ Notes for Professionals ponad 700 stron👍 standard C++17przekrój całego języka C++kompilowanie, debugowanie, profilowanienarzędzia: CMake, make, ninja, nmakeOpenMP, Google Test, Catch🇬🇧 pozycja w języku angielskim👴 polecana dla zaawansowanych zobacz również inne języki programowania na books.goalkicker.com riptutorial.com praca zbiorowa wielu autorów ze StackOverflow.com Learning C++. Free unaffiliated eBook created from Stack Overflow contributors. 854 strony👍 standard C++17przekrój całego języka C++🇬🇧 pozycja w języku angielskim👴 polecana dla zaawansowanych Co prawda każdy może tutaj znaleźć coś dla siebie, ale to jest raczej taka encyklopedia niż podręcznik do nauki, bo bardzo szybko wgłębia się w szczegóły, które na początku nauki są odradzane, aby się nie zniechęcić. ","date":"2020-02-25","objectID":"/resources/:1:0","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Ciekawe promocje Promocja Fanatical C++ bundle - 11 e-booków za 10 Euro (-98%) ","date":"2020-02-25","objectID":"/resources/:2:0","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Książki o C++ Z książkami do jest tak samo jak z książkami do języków obcych, a nawet gorzej. Samo przeczytanie książki nie spowoduje, że będziesz znać język. Trzeba go przede wszystkim używać w praktyce. W podręcznikach do języków obcych zawsze są ćwiczenia, dzięki którym użyjesz nowych wyrazów lub konstrukcji. Podręczników do programowania raczej nie ma. Dlatego bardzo ważne jest, aby ucząc się tylko z książek od razu mieć przy sobie komputer i próbować zastosować pozyskaną wiedzę. Dla osób początkujących znacznie lepsze będzie kupienie taniego kursu online, np. na Udemy za 50 zł. Jeśli masz już jakieś doświadczenie, to książki mogą Ci dużo dać, o ile tylko faktycznie zastosujesz uzyskaną wiedzę. Jeśli dobrze znasz angielski to w przypadku niektórych książek lepiej wybrać wersję angielską. Polskie przekłady czasem utrudniają czytanie. Angielskie książki są jednak droższe od polskich wersji. UWAGA: Linki afiliacyjne :) Uczestniczę w programie partnerskim wydawnictwa Helion. Jeśli kupisz którąś książkę przez link z tej strony, to ja dostanę za to parę groszy. Cena książki dla Ciebie się nie zmienia. Dlaczego Helion? To raczej jedyny wydawca poniższych książek w języku polskim. Linki do wersji angielskich mogą prowadzić do innych serwisów, np. Amazon. Tam nie mam żadnych linków afiliacyjnych :) Zobacz wszystkie książki z kategorii programowanie w wydawnictwie Helion ","date":"2020-02-25","objectID":"/resources/:3:0","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Dla początkujących Książka  Opis Jerzy Grębosz 🇵🇱 Opus Magnum C++11. Programowanie w języku C++ 3 tomy, 1600 stronstandard C++11programowanie obiektowecały przekrój języka od podstawowych konstrukcji po szablonypodstawy biblioteki STL - strumienie, vector, string👶 dla początkujących🇵🇱 książka polskiego autora👍 polecam Jerzy Grębosz 🇵🇱 Symfonia C++ Standard. Programowanie w języku C++ orientowane obiektowo. Tom I i II 2 tomy, 1100 stronstandard C++03programowanie obiektowe👶 dla początkujących🇵🇱 książka polskiego autora👎 odradzam ze względu na przestarzały standard Stephan Prata 🇵🇱 Język C++, szkoła programowania. 🇬🇧 C++ Primer Plus 1200 stronstandard C++11programowanie obiektowebiblioteka STLprzekrój całego języka C++🇵🇱🇬🇧 pozycja dostępna w języku polskim i angielskim👶 dla początkujących👎 nie polecam na start Wiele osób uczy się z tej książki C++, ale do końca jej nie polecam na start ze względu na niekonsekwencję w stosowaniu wcześniej wprowadzonych elementów. Dużo tych elementów później się zapomina, gdy nie są używane. Stanley B. Lippman, Josée Lajoie 🇬🇧 C++ Primer (5th Edition) 900 stronstandard C++11programowanie obiektowebiblioteka STL🇬🇧 pozycja dostępna w języku angielskim👶 dla początkujących👍 polecam Książka ta jest lepsza dla początkujących od książki C++ Primer Plus, której polska wersja to Język C++, szkoła programowania pana Praty (powyżej). Ma trochę bardziej przemawiający styl, ale nie ma aktualnego wydania w języku polskim. Bjarne Stroustrup 🇵🇱 Programowanie. Teoria i praktyka z wykorzystaniem C++ 🇬🇧 Programming. Principles and Practice Using C++ 1100 stronstandard C++14programowanie obiektowebiblioteka STLtworzenie GUI🇵🇱🇬🇧 pozycja dostępna w języku polskim i angielskim👶 👨 dla początkujących oraz średnio-zaawansowanych👍 polecam Bjarne Stroustrup to twórca języka C++. Niektórzy polecają przeczytać ją dopiero po Opus Magnum, ale nie jest to konieczne. Prowadzi ona trochę dalej w głąb języka C++ niż Opus Magnum, więc osoby średnio-zaawansowane również znajdą coś dla siebie. Ja zaczynałam od książki Bjarne Stroustrup “Programming: Principles and Practice C++” i bardzo ją sobie chwalę. Jest bardzo rzeczowa bez zbędnych informacji. Dobrze jest mieć ją w wersji papierowej, bo jest tak napisana, że tekst i kod są na dwóch sąsiadujących stronach, nie trzeba wertować. Symfonia Grębosza była dla mnie trochę męcząca. Jest w niej dużo dygresji, które miały na celu wyjaśnić pewne zagadnienia, ale niestety tylko bardziej mnie rozpraszały. Stroustrup jest dla tych co lubią krótko i na temat 😉 no może nie tak krotko, bo jest grubaśna. ","date":"2020-02-25","objectID":"/resources/:3:1","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Dla średnio-zaawansowanych Tabela w trakcie opracowania Książka  Opis Jerzy Grębosz 🇵🇱 Opus magnum C++. Misja w nadprzestrzeń C++14/17. Tom 4 280 stronkontynuacja Opus Magnum C++11dla osób znających C++11standard C++14 i C++17👨 dla średnio-zaawansowanych🇵🇱 książka polskiego autora👍 polecam Zachowany styl Opus Magnum C++. Polecana jako kontynuacja po przeczytaniu tamtej. Jerzy Grębosz 🇵🇱 Pasja C++ 2 tomy, 600 stronkontynuacja Symfonii C++szablony, kontenery STL, wyjątkistandard C++03👨 dla średnio-zaawansowanych🇵🇱 książka polskiego autora👎 odradzam ze względu na przestarzały standard Scott Meyers 🇵🇱 Skuteczny nowoczesny C++. 42 sposoby lepszego posługiwania się językami C++11 i C++14 🇬🇧 Effective Modern C++. 42 Specific Ways to Improve Your Use of C++11 and C++14 🇵🇱 390 stron / 🇬🇧 330 stronstandard C++14dedukcja typów i autosmart pointerysemantyka przenoszenialambdywspółbieżność🇵🇱🇬🇧 pozycja dostępna w języku polskim i angielskim👨 dla średnio-zaawansowanych👍 bardzo polecam Scott Meyers ma bardzo łatwy w odbiorze styl pisania. Polecamy wszystkie jego książki. Rozdziały są dość krótkie, zazwyczaj do 10 stron i zagłębiają się maksymalnie w dane zagadnienie. Polskie wersje są dobrze przetumaczone. Scott Meyers 🇵🇱 C++. 50 efektywnych sposobów na udoskonalenie Twoich programów 🇬🇧 Effective C++: 55 Specific Ways to Improve Your Programs and Designs 248 stron👍 bardzo polecam Scott Meyers More Effective C++ 🇵🇱🇬🇧👍 Scott Meyers Effective STL 🇵🇱🇬🇧👍 Jacek Galowicz 🇵🇱 C++17 STL. Receptury 🇬🇧 C++17 STL Cookbook Bjarne Stroustrup 🇵🇱 Projektowanie i rozwój języka C+ 🇬🇧 A Tour of C++, 2018 Andrei Alexandrescu, Herb Sutter 🇵🇱 Język C++. Standardy kodowania 🇬🇧 C++ Coding Standards Herb Sutter Exceptional C++ Herb Sutter More Exceptional C++ Herb Sutter Exceptional C++ Style Stanley B. Lippman Inside the C++ Object Model Bruce Eckel 🇵🇱 Thinking in C++. Edycja polska Bruce Eckel, Chuck Allison 🇵🇱 Thinking in C++. Edycja polska. Tom 2 ","date":"2020-02-25","objectID":"/resources/:3:2","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Dla zaawansowanych Tabela w trakcie opracowania Książka Opis Anthony Williams 🇵🇱 Język C++ i przetwarzanie współbieżne w akcji. Wydanie II 🇬🇧 C++ Concurrency in Action 2019 Książka o wielowątkowości w języku C++ w standardzie C++17 (wydanie 2). Zawiera wiele informacji o dobrych praktykach. Bjarne Stroustrup 🇵🇱 Język C++. Kompendium wiedzy, Wydanie IV 🇬🇧 The C++ Programming Language (4th Edition) 2013 Andrei Alexandrescu 🇵🇱 Nowoczesne projektowanie w C++ 🇬🇧 Modern C++ Design Książka dla twardzieli. Nie polecam do snu, bo zaśniesz zanim przeczytasz 1 stronę. Bardzo cenna ekspercka wiedza, ale jej trawienie wymaga ogromnego skupienia. David Vandevoorde, Nicolai M. Josuttis, Douglas Gregor C++ Templates: The Complete Guide Sep 14 2017 ","date":"2020-02-25","objectID":"/resources/:3:3","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Książki o programowaniu ogólnie Książka Opis 👶 Maciej Aniserowicz, Zawód: programista 👨 Maciej Aniserowicz, Programista. i co dalej? 👨 Andrew Hunt, Pragmatyczny programista 👨 Gynvael Coldwind, Zrozumieć programowanie 👨 Michael Feathers, Working Effectively With Legacy Code. Tylko proszę, nie kupuj jej po polsku. No chyba, że lubisz określenia jarzmo testowe i spoina testowa. Robert C. Martin 🇵🇱 Czysty kod. Podręcznik dobrego programisty 🇬🇧 Clean Code: A Handbook of Agile Software Craftsmanship 424 stronyPoznaj najlepsze metody tworzenia doskonałego koduJak pisać dobry kod, a zły przekształcić w dobry?Jak formatować kod, aby osiągnąć maksymalną czytelność?Jak implementować pełną obsługę błędów bez zaśmiecania logiki kodu?👨 dla średnio-zaawansowanych🇵🇱 książka dostępna w języku polskim Język programowania nie jest tu najważniejszy, główny nacisk kładziony jest na poprawność pisanego kodu. ","date":"2020-02-25","objectID":"/resources/:4:0","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Materiały wideo ","date":"2020-02-25","objectID":"/resources/:5:0","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Po polsku Mirosław Zelent - Kurs C++ Mirosław Zelent - Kurs Obiektowy C++ Tomasz Jaśniewski - KURS C++ od podstaw. Szkoła średnia, studia Coders School - Jaśniejąca gwiazda na polskim YouTube :) Mój kanał o tematyce C++, który chcę rozwijać. Poradnik Gita - Overment ","date":"2020-02-25","objectID":"/resources/:5:1","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Po angielsku The Cherno - Kanał o C++, gamedevie i grafice komputerowej. One Lone Coder - Kanał o C++, gamedevie i emulatorach. Bo Qian - Kanał o C++. Głównie STL, Boost, Google Test, algorytmy. Jason Turner - Kanał edukacyjny o C++ 11 / 17 / 20. ","date":"2020-02-25","objectID":"/resources/:5:2","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Repozytoria C++ Core Guidelines ISO C++ Standards Committee Hello - szablon z projektem dla CMake + Travis + GoogleTest ","date":"2020-02-25","objectID":"/resources/:6:0","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Platformy do nauki LearnCpp.com - tutorial C++ w języku angielskim cpp0x.pl - Strona z dokumentacją C++ i bibliotekami Sololearn.com - tutorial C++ online od podstaw SPOJ - zadania algorytmiczne ","date":"2020-02-25","objectID":"/resources/:7:0","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Blogi cpp-polska.pl - polski blog o nowoczesnym C++ ","date":"2020-02-25","objectID":"/resources/:8:0","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":null,"content":"Inne linki Programowanie w języku C++ Nowoczesny C++ Programowanie w C++11 Efektywne wykorzystanie biblioteki standardowej C++ Programowanie w C++17 Zaawansowane programowanie w języku C++ Test-Driven-Development w języku C++ Wzorce projektowe w języku C++ Programowanie generyczne w języku C++ Programowanie wielowątkowe w C++ Programowanie w C++, Tomasz R. Werner, dokument dla studentów PJWSTK Tutaj możesz zobaczyć aktualne promocje wydawnictwa Helion. Może znajdziesz coś dla siebie poza C++. Tutaj możesz zobaczyć nowości. Być może będzie coś nowego o C++. Chcesz dorzucić jakąś pozycję? Zrób Pull Request Podziękowania dla dotychczasowych kontrybutorów ","date":"2020-02-25","objectID":"/resources/:9:0","tags":null,"title":"Materiały do nauki C++","uri":"/resources/"},{"categories":[],"content":"Administrator danych Administratorem danych osobowych jest Łukasz Ziobroń, ul. Tęczowa 83U/23, 53-601 Wrocław. Dane będą przetwarzane na podstawie art. 6 ust. 1 lit. a RODO w celu przesyłania Ci newslettera. Dane będą przechowywane w bazie administratora przez czas funkcjonowania newslettera, chyba że wcześniej zrezygnujesz z otrzymywania newslettera, co spowoduje usunięcie danych z bazy. Masz prawo do żądania od administratora dostępu do swoich danych osobowych oraz do ich sprostowania, usunięcia lub ograniczenia przetwarzania lub prawo do wniesienia sprzeciwu wobec przetwarzania, a także prawo do przenoszenia danych – na zasadach określonych w art. 16 – 21 RODO. W każdej chwili będziesz mógł wycofać zgodę na otrzymywanie newslettera. Jeżeli uznasz, że Twoje dane są przetwarzane niezgodnie z przepisami prawa, będziesz mógł wnieść skargę do organu nadzorczego. Przysługuje Ci prawo wglądu do wszystkich Twoich danych osobowych i możliwość ich edycji oraz usunięcia. W tym celu napisz emaila do administratora danych osobowych. Podanie danych jest dobrowolne, ale niezbędne do zapisu do newslettera lub na kurs. Celami przetwarzania danych są w zależności od wybranych opcji: wysyłka newslettera, uczestnictwo w kursach programowania oraz wystawianie faktur. ","date":"2020-02-11","objectID":"/polityka-prywatnosci/:1:0","tags":[],"title":"Polityka prywatności","uri":"/polityka-prywatnosci/"},{"categories":[],"content":"Mechanizmy bezpieczeństwa Witryna wykorzystuje szyfrowany protokół https. Podawanie danych osobowych w naszych formularzach jest dobrowolne. Przed ich podaniem upewnij się, że połączenie jest szyfrowane (protokół https). Jeśli nie widzisz kłódeczki, to możliwe doprowadził Cię tutaj jakiś stary link. Zmień http na https w adresie witryny. Twoje dane nie są przechowywane w formie fizycznej. Trzymamy je tylko w formie elektronicznej w systemie mailingowym (newsletter i uczestnictwo w kursach) i/lub w systemie ActiveNow (uczestnictwo w kursach). ","date":"2020-02-11","objectID":"/polityka-prywatnosci/:2:0","tags":[],"title":"Polityka prywatności","uri":"/polityka-prywatnosci/"},{"categories":[],"content":"Zapisy na kurs W przypadku zapisu na kurs programowania zbieramy imię, nazwisko, numer telefonu, adres email i adres zamieszkania. Pośrednikiem płatności jest Dotpay Sp. z o.o. ul. Wielicka 28 b, 30-552 Kraków, Polska. Dotpay jako pośrednik płatności może mieć dostęp do Twoich danych. Wykorzystujemy platformę ActiveNow.io do obsługi zapisów. ActiveNow.io jest podmiotem, który również przetwarza Twoje dane osobowe. Przekazujemy je na potrzeby obsługi płatności i rezerwacji miejsca w grupach. Przekazane dane to: imię, nazwisko, email, adres i opcjonalnie numer telefonu. Informacje o podmiocie: ActiveNow sp. z o. o. Warszawa 00-640 ul. Mokotowska 1, KRS: 0000754602, NIP: 7010889131. ","date":"2020-02-11","objectID":"/polityka-prywatnosci/:3:0","tags":[],"title":"Polityka prywatności","uri":"/polityka-prywatnosci/"},{"categories":[],"content":"Zapisy na newsletter W przypadku newslettera zbieramy jedynie Imię oraz adres email. Newsletter jest obsługiwany przez MailerLite. Polityka prywatności MailerLite jest tutaj. ","date":"2020-02-11","objectID":"/polityka-prywatnosci/:4:0","tags":[],"title":"Polityka prywatności","uri":"/polityka-prywatnosci/"},{"categories":[],"content":"Komentarze na www Do komentarzy używamy aplikacji Gitalk. Aby napisać komentarz należy zalogować się swoim kontem z GitHuba. W przypadku napisania komentarza Twój nick wraz z linkiem do Twojego profilu na GitHubie będzie widoczny na stronie. ","date":"2020-02-11","objectID":"/polityka-prywatnosci/:5:0","tags":[],"title":"Polityka prywatności","uri":"/polityka-prywatnosci/"},{"categories":[],"content":"Mechanizmy śledzące Używamy plików cookies, które pamiętają, które podstrony odwiedzasz. Wykorzystujemy Pixel Facebooka (czyt. Facebook Cię śledzi na naszej stronie). Wykorzystujemy Google Analytics (czyt. Google Cię śledzi na naszej stronie). Wszelkie mechanizmy śledzące używane są jedynie w celu lepszego dotarcia do grupy odbiorców oraz polepszania jakości stron, które odwiedzasz. Dzięki nim wiem, które treści są bardziej interesujące i mogę dopasowywać je do ogólnych potrzeb. Jednocześnie każda sesja jest zanonimizowana, w więc nie mam pojęcia kto miał jakie interakcje na stronie. ","date":"2020-02-11","objectID":"/polityka-prywatnosci/:6:0","tags":[],"title":"Polityka prywatności","uri":"/polityka-prywatnosci/"},{"categories":["Post","Raport"],"content":"Minął już szał na podsumowania poprzedniego roku, bo minął już pierwszy miesiąc nowego roku. Aby nie wpaść do mainstreamu postanowiłem się wyróżnić i tak samo jak w poprzednim roku publikuję podsumowanie poprzedniego dopiero teraz 🙂 ","date":"2020-02-02","objectID":"/post/podsumowanie-roku-2019/:0:0","tags":["podsumowanie"],"title":"Podsumowanie roku 2019","uri":"/post/podsumowanie-roku-2019/"},{"categories":["Post","Raport"],"content":"Jak zmieniła się sytuacja? W 2018 roku pracowałem na etacie, a Coders School był projektem pobocznym. Miałem nadzieję, że firma trochę się rozkręci i będzie w późniejszym czasie przynosić coraz więcej dochodów 🙂 W 2019 roku również pracowałem, ale już na na 3/5 etatu i tak było do końca października. Od listopada Coders School jest moim głównym zajęciem. Można powiedzieć, że poświęcając 2/5 etatu firma mogła zarabiać mniej więcej tyle, ile zarabiałem na 3/5 etatu, a więc nie była to najgorsza wymiana 🙂 Od listopada uwielbiam poniedziałki 🙂 Nie, żebym jakoś ich nie lubił wcześniej, bo pracując na niepełny etat też poniedziałki były poświęcone mojej firmie, ale to, z jaką motywacją przychodzi się do swojej pracy jest nieopisane 🙂 Dawniej mocno rozgraniczałem życie prywatne od pracy. Starałem się zawsze wychodzić po 8 godzinach i już nie myśleć o pracy. Niestety stres i przemęczenie powodowało, że zawsze sytuacje z jednego życia przenikają do drugiego. Odkąd mam tylko Coders School myślę już inaczej. Pracy i życia prywatnego aż tak nie rozgraniczam, ponieważ ta „praca” jest moim hobby. Ciężko więc czasami powiedzieć, czy robię coś dla pracy czy po prostu jako swoje hobby. Niekótrzy (w szczególności rodzina) powiedzą, że pracuję znacznie więcej niż na etacie. Ja z kolei twierdzę, że pracuję znacznie mniej, ale dużo czasu poświęcam na swoje hobby 🙂 Polecam każdemu rozwijać coś własnego. ","date":"2020-02-02","objectID":"/post/podsumowanie-roku-2019/:1:0","tags":["podsumowanie"],"title":"Podsumowanie roku 2019","uri":"/post/podsumowanie-roku-2019/"},{"categories":["Post","Raport"],"content":"Ubiegłoroczne założenia W poprzednim wpisie opisałem swoje założenia na 2019 rok. Były one takie: Zrobić co najmniej 1 mini kurs w wersji online. To się niestety nie udało. Skupić się bardziej na mini kursach zamiast na pełnym kursie C++. Też się nie udało. Co więcej nie zamierzam się w ogóle teraz skupiać na mini kursach. Bardzo mało ludzi poszukuje takich szkoleń samych z siebie. Raczej firmy zamawiają takie szkolenie. W tym roku w planach mam tylko zrealizowanie mini kursu z Wielowątkowości. Dochód 36 000 zł. Rok temu napisałem coś takiego: „Dopiero po kilku miesiącach pracy uświadomiłem sobie, że przychód nie jest żadnym wyznacznikiem tego, jak firma prosperuje. Ważniejszy jest dochód, czyli przychód – koszty”. A teraz znów zamierzam używać tylko przychodu 🙂 Przy JDG czasami ciężko jest rozgraniczyć co jest faktycznym kosztem firmy, a co wydatkiem częściowo prywatnym. Przy tej formie działalności takiego rozgraniczenia nie ma, więc mogę powiedzieć, że zarazem osiągnąłem postawiony sobie cel, jak również go nie osiągnąłem. Ale przychód w roku 2019 był większy niż w 2018, więc idzie w dobrą stronę 🙂 A poniżej podsumowanie 2019 roku w liczbach. ","date":"2020-02-02","objectID":"/post/podsumowanie-roku-2019/:2:0","tags":["podsumowanie"],"title":"Podsumowanie roku 2019","uri":"/post/podsumowanie-roku-2019/"},{"categories":["Post","Raport"],"content":"Kursy C++ 2 edycje kursu C++ 1 edycja wielowątkowości w C++ 4 grupy 41 absolwentów 204 godziny zajęć ","date":"2020-02-02","objectID":"/post/podsumowanie-roku-2019/:2:1","tags":["podsumowanie"],"title":"Podsumowanie roku 2019","uri":"/post/podsumowanie-roku-2019/"},{"categories":["Post","Raport"],"content":"Szkolenia firmowe 2 firmy 4 dni 24 kursantów 24 godziny szkoleń Zrezygnowałem także z kursów Javy. Po pierwsze Paweł, który je prowadził nie mógł poprowadzić kolejnej edycji. Po drugie, stwierdziłem, że marka Coders School będzie silnie powiązana z językiem C++. Sloganem Coders School jest teraz Szkoła prawdziwego C++. Prawdziwego – bo uczymy tylko tego, co ważne i nie uczymy przestarzałych rzeczy. W tym roku natomiast nie robię żadnych założeń 🙂 Po uwolnieniu się od etatu jest tak wiele możliwości, o których wcześniej nawet nie myślałem. Jestem osobą, która z trudem podejmuje decyzje. Nie wiem jeszcze w którą stronę to wszystko pójdzie. Na pewno wiem jedno. Nie będę już nigdy robił planów na cały kolejny rok. Robiłem takie plany od 2012 roku. Rzadko kiedy udawało się zrealizować połowę z nich. Część się po prostu przedawniała albo sytuacja tak się zmieniła, że te plany w ogóle nie były adekwatne. w 2019 roku zacząłem robić plany kwartalne. Sprawdzają się one znacznie lepiej. Mają w sobie jeszcze coś takiego, że każdy kwartał ma 13 tygodni. Zakładam sobie, że pracuję maksymalnie przez 12 tygodni, a jeden tydzień jest na zupełny odpoczynek 🙂 ","date":"2020-02-02","objectID":"/post/podsumowanie-roku-2019/:2:2","tags":["podsumowanie"],"title":"Podsumowanie roku 2019","uri":"/post/podsumowanie-roku-2019/"},{"categories":["Post","Raport"],"content":"Plany na najbliższe 3 miesiące (ze statusem) Zrealizować drugą edycję kursu Wielowątkowość w C++ (16.02, 23.02, 01.03, 08.03) Oworzyć weekendowe warsztaty z C++ dla początkujących (NOWOŚĆ!) (kwiecień) (UPDATE: Koronawirus zepsuł ten punkt ;) Rozpocząć blogowanie i Youtubowanie na temat C++. Będę dzielił się wiedzą za darmo 🙂 W skrócie, to był bardzo owocny rok, ale kolejny zapowiada się jeszcze ciekawiej. Bardzo dziękuję za wsparcie wszystkim osobom, które mnie śledzą i dopingują. Mam nadzieję, że tegoroczne zmiany będą tylko na lepsze. Czas pokaże 🙂 Życzę powodzenia w realizacji planów noworocznych. A jeśli już wiesz, że nie zrealizujesz części planów, to warto je przeformułować i ustalić cele na krótsze okresy. ","date":"2020-02-02","objectID":"/post/podsumowanie-roku-2019/:3:0","tags":["podsumowanie"],"title":"Podsumowanie roku 2019","uri":"/post/podsumowanie-roku-2019/"},{"categories":["Artykuł","Warto wiedzieć"],"content":" Zastanawiasz się nad karierą programisty? Myślisz czego trzeba się nauczyć i jakie są wymagania na stanowisko juniorskie? Chcesz uczyć się skutecznie i osiągnąć dobre rezultaty w niedługim czasie? Jesteś w dobrym miejscu! ","date":"2020-01-14","objectID":"/poradnik/:0:0","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Poradnik nauki programowania Nazywam się Łukasz Ziobroń i oddaję w Twoje ręce ten oto poradnik nauki programowania. Nauczam programowania od ponad 5 lat. Od ponad 8 lat programuję zawodowo, a jeśli doliczymy do tego projekty hobbystyczne to będzie już… 18 lat. Jestem założycielem Coders School i autorem programów nauczania, które stosuję w przekazywaniu wiedzy o języku C++. W swoim życiu przeszkoliłem już ponad 700 osób, trochę udzielałem się we wrocławskich społecznościach związanych z językiem C++. Skuteczne przekazywanie wiedzy jest moją pasją i nieustannie kształcę się w tym chcąc jeszcze skuteczniej uczyć programowania. Stworzyłem ten poradnik, aby pomóc Ci w skutecznym uczeniu się C++ lub też dowolnego języka programowania. Jego lektura nie jest ograniczona tylko dla potencjalnych programistów C++. Przeczytać go może każdy, kto chce zostać programistą, a fragmenty dotyczące samego C++ może pominąć. Ten poradnik ma na celu podpowiedzenie Ci, czego i w jaki sposób się uczyć, jeśli chcesz w przyszłości pracować jako programista C++. Będzie on zawsze otwarty i darmowy. Zamierzam go w przyszłości aktualizować, wraz z tym, jak będzie się zmieniał język C++ oraz programistyczny rynek. Myślę, że 60 minut powinno Ci wystarczyć na dokładne przeczytanie całego tego artykułu. Poradnik nauki programowania opisuje tajniki branży programistycznej i trochę demaskuje niektóre związane z nią mity. Mówi o tym, jak można wejść do tej branży i się nie zajechać. Porównuje bootcampy z innymi formami nauczania. Zaczynamy! ","date":"2020-01-14","objectID":"/poradnik/:1:0","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Chcę programować ","date":"2020-01-14","objectID":"/poradnik/:2:0","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Prehistoria Dawniej programowanie było wiedzą tajemną. Jeśli ktoś chciał się go nauczyć, to trzeba było mieć jakieś materiały. Podkreślę słowo jakieś, bo jakiekolwiek materiały były trudno dostępne. Toteż większość programistów wywodziła się z uczelni. Uczelnie zawsze wiodły prym w liczbie źródeł i jakości przekazywanej wiedzy. Odkąd upowszechnił się internet czasy zaczęły się zmieniać. Obecnie mamy raczej zalew materiałów na każdy właściwie temat, także na temat programowania. Podobno od przybytku głowa nie boli, ale jednak strasznie trudno znaleźć coś, co nam podpasuje i dzięki czemu zmotywowani usiądziemy do nauki i szybko zauważymy pierwsze efekty. Jeśli jesteś programistą pomyśl jak kiedyś wyglądało programowanie bez StackOverflow, gdzie w ciągu kilku sekund znajdujesz odpowiedź na Twoje pytanie. Ja jeszcze pamiętam te czasy, gdy w liceum zabrałem się za pisanie własnego silnika CMS na moją stronę o StarCrafcie – Starcraft Area. Strona stoi do dziś, ale z racji tego, że nie znałem dobrych praktyk to kod tego silnika jest wydajny jak maluch na gaz. Przejrzystość kodu jest z kolei podobna do przejrzystości wody w Gangesie. Dużo ludzi wyznaje zasadę Done is better than perfect. Ja również zaliczam się do tych ludzi, przez co troszkę walczę ze swoim perfekcjonizmem, ale do słynnego motto dodaję jeszcze coś od siebie. Screwed up is worse than done. Pełna wersja po polsku to Zrobione jest lepsze od doskonałego. Spierniczone jest gorsze od zrobionego. W związku z tym jeśli mam coś zrobić, a będzie to słabe, to nawet się za to nie zabieram. ","date":"2020-01-14","objectID":"/poradnik/:2:1","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Umowa z programistą, czyli jak wygląda rekrutacja w branży IT? Uczyć się każdy potrafi. Wystarczą przecież studia i już można programować. Albo jakiś bootcamp. W szczególności jeśli już pracuje się poza branżą IT, ale ma się pieniądze. Stąd też prosta droga do zbijania kokosów. Czy aby na pewno? Dzisiejszy rynek pracy bardzo szybko weryfikuje te założenia. Okazuje się, że odpowiedzi zazwyczaj brzmią nie i nie. Zatem o co chodzi z tym tytułowym uczeniem się C++ albo nawet ogólniej z uczeniem się programowania? Niewątpliwie obecnie jest moda na programowanie. Ba, nawet nie moda, ale przymus. Kursy programowania typu bootcamp rosną jak przysłowiowe grzyby po deszczu, a pracodawcy sami organizują własne akademie i kursiki dla osób, które chciałyby zostać programistami. Zatem wygląda na to, że faktycznie niedobór pracowników jest ogromny. Chodzą plotki, że nawet siłą zmusza się ludzi do podpisywania kontraktów albo robione są łapanki na ulicy i złapani są od razu wcielani do korporacji — obejrzyj poniższy film 🙂 W dzisiejszych czasach, gdy socjal jest łatwo dostępny, programiści żyją jak pączki w maśle, a nikomu nie chce się pracować, trzeba się uciekać do naprawdę podłych sztuczek. Każdy na pewno ma kolegę programistę, który już po roku zarabiał wykopowe 15k. A programiści to ogólnie przychodzą do pracy tylko wypić kawę, posiedzieć przed Facebookiem i „piniąszki” się zgadzają. Więc o co tutaj chodzi? Dlaczego Ci ludzie z łapanek tak bardzo nie chcą mieć takiego fajnego życia? Poczytaj co ludzie piszą na wykopie odnośnie programowania. Mirek żali się, że po bootcampie nie ma pracy, a tutaj inny dziwi się ile zarabiają programiści. O tym, jaka jest prawda na pewno wiedzą sami programiści, ale to też nie wszyscy. Dopiero tacy programiści, którzy są już na rynku przez parę lat i zmieniali sami pracę (często kilkukrotnie), wiedzą jak to wygląda. Osoby spoza branży, które chciałyby wejść do tego programistycznego raju, tylko się dziwią. Jak tak można? Gdzie te braki, gdzie te łapanki? Dlaczego mi się to w ogóle nie udaje, chociaż na studiach było dużo programowania? ","date":"2020-01-14","objectID":"/poradnik/:2:2","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Każdy może NIE być programistą, czyli daruj sobie ten pomysł Gdy zadasz pytanie Czy każdy może zostać programistą? w dowolnej szkole programowania to pewnie w większości powiedzą, że każdy, ale niektórym będzie potrzeba więcej czasu, a innym mniej. Zasadniczo jest to prawda, ale ja mam trochę bardziej radykalne poglądy w tej kwestii. Według mnie nie każdy nadaje się na programistę. W niektórych przypadkach po prostu nie warto zaczynać, bo to będzie „orka na ugorze”, jak to mawiał mój nauczyciel matematyki z liceum, którego chciałem serdecznie pozdrowić. Nie warto marnować czasu swojego i trenera, jeśli nie masz ku temu predyspozycji. Napiszę nawet więcej. Nie chodzi tylko o predyspozycje. W swojej karierze nauczyłem programowania już wiele osób. Na moich kursach weryfikuję, kto do mnie przychodzi i na jakim jest poziomie. Nigdy nie zaczynam kursów z poziomu zero. Po naukę podstaw odsyłam do darmowych materiałów z internetu. Dopiero jak ktoś może się pochwalić jakąś aplikacją, to możemy porozmawiać o dalszym kształceniu. Współpracując z różnymi osobami, mogę podać jedną cechę, która jest cechą odróżniającą osoby, którym uda się skutecznie przejść przez kurs od tych, którym się to nie uda. Ta cecha to… motywacja. Tak. Taka wewnętrzna. Jeśli ktoś po prostu chce programować, bo to lubi, to będzie poświęcał na to czas. Jeśli natomiast ktoś jest zmotywowany w inny sposób, np. poprzez pieniądze, bo programiści dużo zarabiają, to doskonale wiem, że takie osoby, nawet jeśli uda im się przejść przez kurs to ciężko będzie im znaleźć pracę. Jeśli jakaś szkoła, czy kurs mówią Ci, że po tym pieniądze posypią się z nieba, to po prostu Cię okłamują. To czy pieniądze będą, czy nie, nie zależy od kursu, ale od Ciebie. Oczywiście, dobrze zaprojektowany i przygotowany kurs łatwiej przeprowadzi Cię przez tę drogę, ale jeśli masz motywację i słaby kurs czy też słabe materiały to rezultat będzie lepszy niż zapisanie się na niesamowicie dobry kurs, ale bez Twojej wewnętrznej motywacji, bez pasji. W skrócie — jeśli lubisz programowanie to super. Jeśli nie lubisz — nawet nie zaczynaj. To niczego w Twoim życiu nie zmieni. Jeśli nie wiesz, bo nigdy tego nie robiłeś/-aś — zacznij od darmowych kursów z internetu i się przekonaj. ","date":"2020-01-14","objectID":"/poradnik/:2:3","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"C++ najlepszy, czyli nie pytaj o polecenie języka na start Programowanie programowaniu nierówne. Język językowi nierówny. Na początku wiele osób staje przed wyborem języka programowania. Wybierają długo, szukają, radzą się znajomych programistów, zasypują fora i grupy internetowe pytaniami. A prawda jest taka, że każdy programista będzie głównie polecał język, w którym sam pisze. Dlaczego więc C++ jest najlepszy? ( ͡° ͜ʖ ͡°) Odpowiedź: bo jest jednym z najtrudniejszych języków programowania. Zacząć jest dość łatwo, ale poziom mistrzowski osiąga się bardzo długo. Często też w ogóle się go nie osiąga, bo znając C++ znacznie łatwiej przerzucić się na inne języki programowania, w szczególności na C# lub Javę. Programistyczny rynek jest bardzo otwarty na takich inżynierów oprogramowania, którzy mają C++ w swoim doświadczeniu. Dlatego mistrzów C++ nie ma wielu. Według użytkowników serwisu Jaxenter C++ znajduje się na podium, jeśli chodzi o języki najtrudniejsze do nauczenia się, co prezentuje poniższy wykres, zaczerpnięty z tego serwisu. Polecam też zajrzeć pod to repozytorium na GitHubie, gdzie porównane jest uczenie się różnych języków programowania. Obrazek z C++ zamieszczam też poniżej. Chociaż według mnie najbardziej trafna krzywa uczenia się C++ wygląda tak: Krzywą tą zaprezentował mój kolega Sławek na jeden ze spotkań wrocławskiej grupy C++. Tutaj link do jego prezentacji o boost::python. Język C++ jest stosunkowo mało popularny jeśli chodzi o wybór kursów czy bootcampów w tym języku. Ale w sumie to jest plus. Mniej kursów, więc mniejsza konkurencja, więc łatwiej się wbić w branże. I tak i nie. Trzeba jednak przyswoić dużo wiedzy, a to już jest wyzwanie dla wytrwałych. Pisząc w C++ będziesz się ścierać z problemami, których nie ma w innych językach programowania. Jeśli nie zniechęca Cię to, to czytaj dalej 🙂 ","date":"2020-01-14","objectID":"/poradnik/:2:4","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Nowoczesny C++ W nauce C++ najgorszy jest fakt, że w internecie znajdziesz mnóstwo, naprawdę mnóstwo i jeszcze raz podkreślę — mnóstwo przestarzałych materiałów i informacji na temat C++. Jeśli widzisz jakieś artykuły, pytania, czy cokolwiek związanego z C++ koniecznie musisz sprawdzić datę tej publikacji. Często okazuje się, że jest wiele mitów, które powielane są z pokolenia na pokolenie (takiego programistycznego pokolenia, czyli gdy różnica wieku to jakieś 3-5 lat ;)), tylko dlatego, że artykuł jest stary lub ktoś nie zna aktualnego C++. Od roku 2011 C++ zmienił się bardzo. I zmienia się ciągle. Właściwie to każdy język programowania się zmienia, ale C++ miał wyraźne zahamowanie w latach 2003-2011, kiedy to oficjalnie nic się z tym językiem nie działo (działo się, ale bardziej za kulisami). Inne języki poszły wtedy bardzo do przodu, a C++ jaki był, każdy widział. I niestety bardzo odbiło się to na poziomie jego nauczania. Nauczyciele akademiccy poznali tego C++, a tak naprawdę uczyli C z klasami, a nie C++ i niestety uczą go nadal. Ja nazywam to językiem C+ (czyt. ce plus). ","date":"2020-01-14","objectID":"/poradnik/:2:5","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"IDE w roli generatora ciągów losowych znaków, czyli dlaczego vim jest dobry? Jeszcze jedną pułapką może być przerabianie kolejnego kursu w IDE, czyli środowisku programistycznym, z którego rzadko się korzysta w projektach komercyjnych. Takie środowiska to np. Code::Blocks, DevC++ lub Borland C++ Builder. Owszem możesz w nich pisać ciekawe programy i od nich nie zależy w ogóle ich treść, ale nowsze i lepsze środowiska lepiej wspierają programistę i pozwalają na pisanie kodu zgodnego z najnowszymi standardami. Integrated Development Environment Integrated Development Environment (IDE) to po prostu taki edytor tekstu, w którym piszemy kod. Kod można pisać nawet w Notatniku, ale IDE zazwyczaj pomaga poprzez podkreślanie błędów czy proponowanie uzupełnień nazw. Dlatego wymienionych przeze mnie środowisk raczej komercyjnie się nie używa. To co sobie zainstalować, skoro prawie każdy kurs w internecie pokazuje właśnie te środowiska? Jeśli interesuje Cię coś nowoczesnego, to sprawdź: CLion (płatny, ale studenci mają darmowe licencje) Visual Studio Code Visual Studio QtCreator XCode (Mac) QtCreator jest IDE stosowanym wyłącznie pod C i C++ i jest łatwy w obsłudze, ale jednak jest rzadziej używany. Statystycznie najczęściej używany jest CLion. A tak naprawdę to polecam edytor vim. W swoim kursie uczę podstaw Vima, bo każdy programista, którego IDE jest w konsoli, zyskuje +5 szacunku w oczach innych programistów, którym nie udało się go ogarnąć. A poza tym wygląda on czadersko. I nie trzeba w ogóle używać w nim myszki. Vim Vim jest dla świeżych osób chyba najgorszym i najbardziej nieintuicyjnym edytorem tekstu. Jego nie intuicyjność doczekała się nawet bardzo popularnego dowcipu: Jak wygenerować losowy ciąg znaków? Posadzić nowicjusza przed vimem i kazać mu wyjść z programu. Ale spokojnie, gdy człowiek przyzwyczai się do vima, to może pracować niesamowicie efektywnie i już nic nie będzie dla niego zaskoczeniem. No, chyba że Emacs, ale nie będę rozwijał tematu 🙂 Wielu ludzi powie — zapomniałeś o Eclipsie i NetBeans. Celowo zapomniałem. To moja osobista opinia, ale uważam, że IDE powinno być szybkie i lekkie. Często, gdy ma się bardzo duży projekt, to niektóre środowiska mogą bardzo długo się ładować. A te dwa raczej właśnie takie są. Wiem, że CLion też nie jest najszybszy, bo również jest napisany w Javie ;), ale i tak jest szybszy od tych dwóch i ma wiele dodatkowych funkcji, które działają z automatu bez żadnych konfiguracji. NetBeansa używałem tylko trochę na studiach (dawno temu), a Eclipsa 3 lata temu. Być może w nowszych wersjach są szybsze albo osoby, które chcą się sprzeczać, nie pracowały w naprawdę dużych projektach 🙂 ","date":"2020-01-14","objectID":"/poradnik/:2:6","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Nauka programowania ","date":"2020-01-14","objectID":"/poradnik/:3:0","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Naucz się C++ w 21 dni Ten artykuł to poradnik nauki programowania. No to jak najszybciej nauczyć się programować, w szczególności w C++? Jeśli dobrze poszperacie, to znajdziecie nawet książki dedykowane do szybkiego nauczenia się tego języka: Jak ktoś ma jeszcze mniej czasu, to może nawet nabyć inną książkę tego samego autora: A jak poszukacie jeszcze dokładniej, to natraficie na to. I ten humorystyczny komiks jest bardzo prawdziwy. Niesamowite jest to, że ktoś daje się nabrać, że nauczy się programowania w miesiąc i pójdzie szukać pracy. Być może na studia do zaliczenia egzaminu to wystarczy, ale szybko wtedy zapomnisz o wszystkim. Nauka programowania wymaga czasu. Ile? Jeśli jesteś nowicjuszem i masz całe dni na naukę, bo nie pracujesz lub nie masz innych przykrych obowiązków, to pół roku może wystarczyć, aby ogarnąć bardzo mocne podstawy. Możesz uczyć się samodzielnie na podstawie materiałów z internetu, ale musisz wiedzieć, które materiały są wartościowe. Jeśli nauczysz się C++ z przestarzałych materiałów, to tak jak pisałem, stracisz swój czas, a roboty na pewno nie znajdziesz. A skąd wziąć wartościowe materiały? Jeśli nie masz znajomych, którzy mogliby Ci coś polecić, to możesz się uczyć ode mnie. Udostępniam trochę materiałów za darmo. Później dam ci do nich linki. Konkretnie to wystarczy, że zapiszesz się na newsletter, ale czytaj dalej 😉 Nawet jeśli już masz skąd się uczyć, to jeszcze warto wiedzieć jak się uczyć, aby nauka była szybka i skuteczna. Ponieważ materiału do nauki są po prostu całe tony, to lepiej mieć jakieś sposoby, aby je dobrze przyswajać i co ważniejsze, skutecznie zapamiętywać. Trochę czasu upłynie zanim przebijesz się przez jakąś grubą książkę, a w tym czasie możesz zapomnieć o tym, co było na jej początku, jeśli nie było to regularnie powtarzane. Wiadomo, że każdy może mieć własne techniki uczenia się, ale ja mam własne techniki nauczania. Andragogika to moje hobby, więc tutaj mogę napisać bardzo dużo. Andragogika Andragogika to nauczanie dorosłych, w przeciwieństwie do pedagogiki, która jest nauczaniem dzieci. Ale po kolei. Co, jeśli pracujesz albo nie masz za dużo czasu na naukę? Wtedy czas nauki musi się wydłużyć. Po około rocznej nauce samodzielnej i pisaniu własnych projektów pewnie przyjdzie czas na rozejrzenie się po rynku pracy. A jeśli już masz jakieś podstawy, bo przykładowo na uczelni był jakiś kurs programowania, to może też wystarczy tylko pół roku. Gdyby mieć przy sobie na własność programistę czy trenera, który zna ten język i powie czego się uczyć i co robić to nauka programowania byłaby łatwiejsza. Niestety nie każdy tak może. Nawet zaryzykuję, że takich osób jest baaardzo niewiele. ","date":"2020-01-14","objectID":"/poradnik/:3:1","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Czy można uczyć się szybciej? Można, ale na pewno nie samemu. Tutaj masz 3 popularne opcje do wyboru. Znajmy programista, który zechce Cię uczyć Kurs stacjonarny Kurs online ","date":"2020-01-14","objectID":"/poradnik/:3:2","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"IT arystokracja, czyli znajomy programista Znajomy programista, który zechce Cię uczyć. Raczej takiego nie znajdziesz. To jest bardzo czasochłonne, jak już pisałem, a i nie każdy potrafi uczyć. Zresztą, po co inni programiści mieliby Cię czegoś uczyć? Nie chodzi tutaj o kształcenie sobie konkurencji. Na rynku są braki, więc to nie jest problemem. Chodzi o to, że nawet jeśli takiemu programiście zapłacisz za poświęcony czas, to pewnie są dla niego to groszowe sprawy. W tym czasie zarobiłby kilkukrotnie więcej programując, więc bardziej opłaca mu się robić nadgodziny w pracy niż siedzieć z Tobą. Jeśli masz taką osobę, to korzystaj, póki nie stwierdzi, że woli harować dla swojego pracodawcy, a nie dla Ciebie. ","date":"2020-01-14","objectID":"/poradnik/:3:3","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Odwrócona klasa, czyli mój kurs stacjonarny A więc druga opcja — zapisanie się na kurs. Na razie weźmy pod uwagę kursy stacjonarne. Ja w szczególności dobrze znam kursy stacjonarne języka C++ we Wrocławiu. Bardzo dobrze wiem, jak wygląda rynek kursów oraz pracy w tym mieście. O innych miastach też dużo wiem, ale z racji tego, że mieszkam we Wrocławiu, to najłatwiej mi się do niego odnosić. Z takich kursów właściwie natkniesz się na kilkudniowe szkolenia dla firm lub bootcampy, czyli bardzo intensywne kursy gdzie codziennie, zazwyczaj po 8 godzin musisz siedzieć, słuchać i programować. Po miesiącu, dwóch czy sześciu wychodzisz jako programista. Really? No nie do końca tak to wygląda. Teraz trochę skrytykuję bootcampy, ale zanim zacznę, to powiem, że mam do tego prawo. Nie z racji, że ich nie prowadzę, ale z racji, że je kiedyś prowadziłem i podjąłem bardzo świadomą decyzję, aby przestać. A to wszystko na podstawie doświadczeń uczestników oraz własnych przemyśleń. Cena bootcampów często jest niesamowicie wysoka. Potrafią one kosztować po 10 tysięcy złotych oraz więcej. Są też tańsze. Ale być może zdziwi Cię to, że nie cena jest tutaj najgorsza. Najgorszy jest ogrom pracy i czasu, który trzeba poświęcić. Prowadziłem już zajęcia w tym stylu. Od uczestników ciągle słychać narzekania, że to zbyt intensywne, że jest taki ogrom wiedzy, że nawet nie ma kiedy jej przetrawić. Już kolejnego dnia trzeba się uczyć nowych rzeczy, więc te poprzednie nieutrwalone szybko wylatują z głowy. Po takich opiniach stwierdziłem, że ja u siebie nie będę organizował zajęć w tym stylu. Prowadziłem i zamierzam jeszcze prowadzić kursy stacjonarne, ale nie w formie bootcampów. U mnie zajęcia odbywają się 1 lub 2 razy w tygodniu (zazwyczaj do 7 godzin tygodniowo) i w trybie flipped classroom. Flipped classroom to odwrócony model szkolny. A model szkolny, który wszyscy doskonale znają, to zaprezentowanie teorii na zajęciach, pokazowe zrobienie prostych zadań w klasie, które uczniowie tylko przepiszą, a zrozumieją, gdy trzeba będzie się nauczyć, czyli na sprawdzian lub w ogóle. Do tego jest jeszcze trudniejsza praca domowa. W odwróconej klasie to teoria jest najpierw przyswajana przez uczniów przed zajęciami, często z wykonaniem prostego zadania. Taka praca własna przed wspólnymi zajęciami nosi nazwę pre-worku. Na zajęciach zajmujemy się już głównie praktyką oraz tłumaczeniem tego, co trudno było zrozumieć. Dzięki temu na zajęciach rozwiązujemy najczęściej spotykane problemami i krzewimy dobre praktyki. Potem jako praca domowa (post-work) zazwyczaj przerabiane są zadania grupowe robione zdalnie (chyba że kursantom uda się wspólnie spotkać także poza zajęciami, co także się zdarzało). Chodzi o to, aby pojedynczej osobie trudniej było na czymś utknąć. W grupie zawsze można coś skonsultować albo dowiedzieć się, czy też douczyć od współuczących. Ten element ludzki dodatkowo angażuje w kurs. ","date":"2020-01-14","objectID":"/poradnik/:3:4","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Praca grupowa Niesamowite jest, jak szkoły potrafią zepsuć myślenie ludzi o pracy grupowej. Panuje przecież przekonanie, że praca grupowa jest bezsensowna, bo tylko jedna lub dwie osoby odwalą zadanie, a reszta nic nie robiąc, otrzyma dobre stopnie. Ubolewam nad tym, że ten pruski dryl tak skutecznie zrył Ci myślenie o współpracy grupowej. Pruski dryl Nasz system nauczania wywodzi się z systemu pruskiego. Był on nastawiony na wykształcenie idealnych pracowników, którzy nie będą kwestionować rozkazów szefostwa. Można powiedzieć, że ten cel jest całkiem nieźle osiągany. Mamy olbrzymią wiedzę ogólną, z której pewnie 90% w ogóle w życiu nam się nie przyda. Po co mam wiedzieć jaka jest budowa ameby czy pantofelka, jeśli moja praca nie ma nic wspólnego z biologią albo dokładniej jakimiś prostymi organizmami? Samo określnenie “pruski dryl” zapożyczyłem od Radka Kotarskiego z jego książki “Włam się do mózgu”, którą sedrecznie polecam, a autora bardzo gorąco pozdrawiam 🙂 Programiści w większości przypadków pracują w grupach i umiejętność pracy grupowej jest kluczowa. Także jej uczę na swoich kursach stacjonarnych, gdzie w praktyce stosujemy metody zwinne (agile). Poza tym używamy gita jako systemu kontroli wersji. To proste narzędzie mówi, kto dostarczył którą linijkę kodu i jak ten kod zmieniał się w czasie. Dzięki temu „łatwo widać” (terminu „łatwo widać” nauczyłem się na studiach na PWr. Niektórzy profesorowie stosowali go chyba dlatego, że tak śmiesznie brzmiał), kto coś dostarcza, a kto nie. Oczywiście nie jest to wyznacznikiem pracy wykonanej przez daną osobę. Doskonale mogą to potwierdzić programiści, którzy przez miesiąc szukają błędu w programie, a jego poprawienie to tylko zmiana jednej linijki kodu. W formie szkoleń stacjonarnych nauka programowania może trwać około 3 miesiące, jeśli tylko masz już jakieś podstawy. Trener zawsze podpowie, czego trzeba się uczyć, ale co najważniejsze - powie czego nie trzeba się uczyć i przeprowadzi Cię przez ten grząski teren. Musisz wiedzieć, że jedyną osobą odpowiedzialną za przyswojenie wiedzy jesteś Ty. Nawet najlepszy trener nie zmusi kamienia do przesunięcia się o parę metrów. Może on za to przenieść kamień, ale nie to ma być skutkiem takiej nauki. Na rozmowie kwalifikacyjnej to nie trener będzie nosił kamienie. Trener nie ma za Ciebie przerobić wszystkiego. On jest tylko pilotem, nawigatorem, przewodnikiem. On ma mapę, ale teren musisz pokonywać samodzielnie lub w grupie. Dobry trener nie weźmie Cię na plecy i nie wniesie Cię na górkę, bo wie, że to Ty musisz orientować się w tym terenie. Słaby trener mógłby to zrobić. ","date":"2020-01-14","objectID":"/poradnik/:3:5","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Kursy programowania online W poradniku nauki programowania kursy online zasłużyły sobie tutaj na oddzielny rozdział. Będę chciał opisać tutaj dość dużo zagadnień, w szczególności mój pogląd i moje podejście do tego, jak powinny one wyglądać. ","date":"2020-01-14","objectID":"/poradnik/:4:0","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Ścieżki ninja, czyli kurs C++ online w Coders School I ostatnia forma, czyli kursy online. Jest bardzo dużo kursów na znanych platformach jak Udemy, gdzie kursy programowania można sobie kupić już za 40 zł. Pytanie tylko, czy faktycznie te kursy realizujesz. Wiedza w większości z nich na pewno jest przydatna i trafnie dobrana. Pytanie tylko, czy taka nauka w trybie online Ci odpowiada? Czy jest ona w ogóle skuteczna? To już zależy od predyspozycji danej osoby. Taką naukę można znacznie uskutecznić i uprzyjemnić. Opowiem Ci o moim kursie online, który właśnie zacząłem tworzyć. Tworzę program, którego celem jest zmaksymalizowanie liczby uczestników, którzy go ukończą. Będzie więc on musiał być nie tylko interesujący, ale wciągający. Tak jak niektóre gry komputerowe :) Oprócz tego kurs musi być skuteczny. W moim odczuciu oznacza to, że liczba osób, która dzięki temu kursowi zrealizuje swoje plany, powinna być jak najwyższa. Wśród planów będę oczekiwał takich jak znalezienie pracy jako programista C++, pogłębienie swojej wiedzy, wymiatanie na studiach, sprawdzenie swojej aktualnej wiedzy albo po prostu nauka dla samej zabawy lub też sprawdzenie, czy ten kurs jest faktycznie taki dobry, jak opisuję :) Ciężko mi będzie oczywiście zmierzyć, ile osób faktycznie zrealizuje swoje cele, ale mogę łatwo zmierzyć, ile osób ukończy ten kurs lub też, które jego etapy będą miały największy odsetek opuszczania kursu. Kurs C++ online w Coders School oparty będzie na zasadach grywalizacji. Grywalizacja Grywalizacja Grywalizacja to wszczepienie elementów rywalizacji oraz grupowych przygód zaczerpniętych z gier komputerowych, w szczególności z gatunku MMORPG do innych dziedzin. Więcej info w książce Pawła Tkaczyka “Grywalizacja”. Nauka będzie trochę przypominała grę. Będziesz zdobywać punkty za wykonane zadania. Dzięki tym punktom będziesz odblokowywać kolejne lekcje. Za wykonywanie zadań dodatkowych będziesz dostawać monety, za które kupisz kolejne moduły kursu, zamiast płacić za nie prawdziwymi pieniędzmi. To jest bardzo motywujący czynnik, który, jeśli jesteś maniakiem ćpania wiedzy, spowoduje, że zaoszczędzisz parę złotych. W tym kursie będziemy uczyć się wszystkiego w takich warunkach, w jakich normalnie pracują programiści. Kod trzeba będzie ściągać ze zdalnych repozytoriów, a po wykonaniu zadania trzeba będzie tworzyć Pull Requesty. Zadania będą sprawdzane automatycznie poprzez automaty Continuous Integration, które będą kompilować kod i puszczać na nim testy. Pull Request Pull Request (PR) lub Merge Request (MR) - zgłoszenie gotowości kodu do przeglądu i złączenia go z oficjalną wersją. Jest to model pracy nad kodem, w którym szybko otrzymasz informację zwrotną na temat wykonanego przez Ciebie zadania. Continuous Integration Continuous Integration (CI) to automatyczne zadania, które są wykonywane po zgłoszeniu Pull Requesta lub commita. Można je dowolnie konfigurować. W ogólności każdy kod, który zostanie zgłoszony zostanie skompilowany oraz przetestowany. Jeśli coś pójdzie nie tak, to dostaniesz o tym powiadomienie. Dzięki temu można uniknąć klasycznego Hmm…, u mnie działa… W wersji premium (która będzie dostępna w przedsprzedaży w cenie zwykłego kursu) kod będzie przeglądany także przez trenera albo nawet kilku recenzentów. Kod będziecie mogli także przeglądać i recenzować sobie nawzajem. To wielka zaleta pracy w grupie. Przekonasz się, jak wiele można się nauczyć od innych, patrząc zarówno na te dobre, jak i na złe wzorce. Porównanie wielu różnych rozwiązań będzie dodatkowo dawać Ci intuicję, które rozwiązania są lepsze i dlaczego. Ta intuicja to coś, co potocznie nazywa się doświadczeniem. Być może podczas tego kursu uda Ci się zebrać 2 lata doświadczenia w 3 miesiące? :D Oficjalnymi recenzentami kodu będą osoby, które programują zawodowo od paru lat. Poinformują Cię one, czy Twój kod spełnia wszelkie standardy, czy też czegoś mu brakuje. Na pewno okaże się, że wiele rzeczy można zrobić lepiej. Mała dygresja Ze swojej pierwszej pracy jako programista najbardziej zapamiętałem moje pierwsze poważne, samodzielne zadanie. Miałem do napisania mały kawałek kodu. W 30 liniach, które dostarczyłem, kolega, który zrobił mi przegląd kodu, wypunktował 40 rzeczy, które można zrobić lepiej. Mógłbym się tym załamać, ale wtedy stwierdziłem „wow, też chce być taki jak on”. Pozdrowienia dla Bartosza 🙂 Jeśli to wszystko brzmi jak magia, to nie musisz mi dziękować, za uświadomienie Cię ilu rzeczy nie wiesz. Na kursie poprowadzę Cię za rączkę przez wszystko. Musisz znać tylko podstawy programowania w C++. Całą otoczkę oraz inżynierię programowania i dobre praktyki nabędziesz podczas kursu. ","date":"2020-01-14","objectID":"/poradnik/:4:1","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Platforma do kursu online Największym problemem tego kursu jest to, że będę musiał stworzyć do niego całą platformę, która będzie go obsługiwała. Nie ma obecnie gotowych rozwiązań, które umożliwiałyby stworzenie tego kursu w takiej formie, chyba że wykorzystam jakieś platformy do gier online. Będę tutaj zdecydowanie potrzebował pomocy programistycznej przy tworzeniu samej platformy. Na pewno zajmie to bardzo dużo czasu, ale będzie ona rozwijana zgodnie z zasadami agile. Podstawową działającą platformę mam nadzieję udostępnić już pod koniec 2020 roku. Prawdopodobnie sama platforma także będzie pewnym przełomem w dziedzinie nauczania online. Agile Metodyki zwinne (agile) zakładają, że produkty tworzy się przyrostowo, udostępniając najpierw tylko najważniejszą, kluczową funkcjonalność, a potem dodając kolejne funkcjonalności. Przeciwieństwem tego modelu jest zrobienie całości od razu, a potem poprawianie zgodnie z oczekiwaniami klientów. Praktyka pokazuje, że projekty w metodologiach agile realizowane są szybciej i więcej z nich kończy się sukcesem. Od razu uprzedzając pytania — tak, w kursie planuję mikropłatności, czyli wykupywanie dodatkowych modułów. Cały kurs będzie można zrealizować bez nich. Będą one tylko dodatkiem dla osób, które jeszcze bardziej chcą pogłębić swoją wiedzę. Wszystkie te dodatkowe moduły będzie można dostać za darmo, jeśli w kursie będzie wykonywało się zadania dodatkowe. Dzięki temu nagrodą za dodatkową naukę jest jeszcze więcej materiałów, które nie będą dostępne dla wszystkich 🙂 ","date":"2020-01-14","objectID":"/poradnik/:4:2","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Ten NPC daje dużo golda i XP za questa ze smokiem, czyli kiedy nauka wygląda jak gra Oprócz przeglądów kodu w wersji premium dostępny będzie czat ze mną lub innymi recenzentami na Discordzie. Będzie można zapytać mnie o wszystko związane z programowaniem. W samym kursie nauczę Cię różnych rzeczy. Na pewno nie będę chciał uczyć czegoś niepotrzebnego, a w C++ jest parę takich rzeczy, które są zaszłościami historycznymi. W języku są one dostępne z powodu zapewnienia wstecznej kompatybilności np. z językiem C. Kurs oprócz tego, że będzie podzielony na moduły, to będzie też podzielony na poziomy trudności, aby chronić Cię przed zetknięciem się już na samym początku z rzeczami bardzo trudnymi, które mogłyby Cię zdemotywować. W naszej nomenklaturze grywalizacyjnej nie pozwolimy Ci od razu startować solo na bossa 50 lvl, gdy ty masz dopiero lvl 10. Po kilku próbach jego nieudanego ubicia wyłączysz grę. Niektórzy bossowie będą dostępni tylko w trybie grupowym (party). Oznacza to, że będziesz musiał/-ła dołączyć do naszego projektu open-source i dorzucić tam trochę kodu od siebie. Pojedynczo Ci się nie uda, bo nie będziesz znać wszystkich założeń. Dopiero gdy razem w grupie zaplanujecie pracę, uda się stworzyć kod spełniający wszystkie wymagania, a boss zostanie pokonany. Będziecie wtedy świętować zwycięstwo i dostaniecie dużo punktów XP oraz złota :) W kursie będziesz mieć mapę świata, czyli modułów kursu. NPC będą dawać Ci questy, czyli zadania do wykonania. Aby dowiedzieć się, jak wykonać zadanie, NPC będzie musiał wprowadzić Cię w fabułę, więc czasem wysłuchasz jego bajania o złych wskaźnikach, przez które ta kraina jest zaśmiecona wyciekającymi zasobami, a kiedy indziej posłuchasz o trójkącie bermudzkim, w którym czai się niezdefiniowane zachowanie. Fabuła nie jest liniowa, więc zadania możesz wykonywać w dowolnej kolejności, ale niektóre z nich są ze sobą powiązane. Po wykonaniu określonych zadań odblokujesz sobie przejścia do innych miast (modułów). A odpowiadając na pytanie, jak uczyć się C++, to najlepiej właśnie metodą grywalizacji, którą przedstawiłem powyżej. Rywalizując z innymi graczami oraz samym sobą, zdobywając punkty, wykonując zadania, dostając nagrody. Najwięcej punktów zdobędziesz pomagając innym i ucząc się wspólnie w całej grupie, a więc budując społeczność ceplusplusowych ninja. ","date":"2020-01-14","objectID":"/poradnik/:4:3","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Skrzynka z narzędziami, czyli moje metody uczenia A jak się uczyć programowania? Poniżej opisuję moje skromne metody, które z powodzeniem stosuję w nauczaniu stacjonarnym. Większość z nich przeniosę też do kursu online. Także te, które wydają się niemożliwe. Samodzielne rozwiązywanie zadań. Komentarz chyba jest zbędny, ale parę słów napiszę. Zadania, które rozwiązujesz samodzielnie, służą do natychmiastowego zastosowania poznanej wiedzy. Aby coś utrwalić, na pewno nie wystarczy Ci samo przeczytanie czy nawet wielokrotne powtarzanie teorii. Taka czysto teoretyczna wiedza szybko uleci Ci z głowy. Dopiero jak coś zakodzisz, to możesz liczyć na to, że wiedza zostanie z Tobą na dłużej. Zadania z trenerem. Tutaj zadania rozwiązujesz pod nadzorem trenera. Trener nie przedstawia od razu gotowego rozwiązania, ale podsuwa pomysły w czasie implementacji oraz odwodzi Cię od gorszych rozwiązań. Jednocześnie tłumaczy, dlaczego jedne rozwiązania będą lepsze od innych Zadania w parach. Moja ulubiona forma. W końcu co dwie głowy to nie jedna. Istotą techniki zwanej Pair Programming jest to, że używacie tylko jednego laptopa i kod piszecie na zmianę w zależności od weny, interwałów czasowych lub podziału na podzadania. Podczas zajęć lubię mieszać pary, aby nie pracować ciągle z tą samą osobą, ale poznać jak inne osoby programują. Ten typ aktywności również można przenieść do świata online. Wystarczy prosta aplikacja przeglądarkowa, najlepiej pozwalająca też używać mikrofonów, aby się porozumiewać. Wspólne edytowanie kodu źródłowego może wyglądać tak jak wspólne edytowanie dokumentów w Google Docs. Coding Dojo. Wariacja powyższej formy. Zamiast 2 osób, jest was więcej. Najczęściej w cyklach zmieniacie się i pracujecie wspólnie nad kodem. Ta forma lepiej sprawdza się do dłuższych i trochę poważniejszych zadań. Dalej dysponujecie jednym komputerem. Zadania grupowe. To samo co Coding Dojo, ale każdy z was pracuje na swoim komputerze. Jest to trudne do zrealizowania na samych zajęciach, bo wymaga odpowiedniego podzielenia się pracą. Idealnie za to nadaje się do zadań domowych. Przeglądy kodu (Code Review). Możesz przeglądać kod innych osób i komentować go. Często prowadzi to do bardzo ciekawych dyskusji i wniosków. Tak samo inne osoby mogą skomentować Twój kod. W kulturze open source nie możesz wstydzić się pokazywać swojego kodu. Dużo osób zaczynających przygodę z programowaniem ma z tym problem, ale to wina szkoły, która piętnowała złe rozwiązania poprzez stawianie jedynek. To, że ktoś dopiero się uczy, powinno być zrozumiałe dla każdego. Błądzić jest rzeczą ludzką i im szybciej pokażesz światu swoje błędy, to tym szybciej nauczysz się pisać lepiej. CI (Continuous Integration). Dzięki temu ustrojstwu parę sprawdzeń kodu wykonuje się automatycznie. Przede wszystkim automat może sprawdzić, czy Twój kod się kompiluje, czy przechodzą wszystkie wymagane testy. Wykonywana może być także statyczna analiza kodu, która powie, jak możesz ten kod usprawnić. Opcjonalnie można też wykonać dynamiczną analizę kodu na konkretnym scenariuszu. Testy. Za pomocą testów sprawdzasz swoją wiedzę. Ja bardzo lubię pre-testy, które wypełniasz zanim w ogóle nauczysz się tematu. Większość testów u mnie istnieje tylko po to, aby się sprawdzić. Można do nich podchodzić wielokrotnie i nie ma za nie żadnych dodatkowych punktów. Ale jest też kilka testów, za które możesz zdobyć punkty. Cppreference.com- dokumentacja C++. Pierwsze źródło do sprawdzenia jak co działa. Umiejętność pracy z dokumentacją jest kluczowa. Dopiero po sprawdzeniu tutaj powinno się przeglądać StackOverflow. StackOverflow. Drugie bardzo ważne źródło informacji o programowaniu. Najstarsze dinozaury pamiętają jeszcze mezozoiczną erę programowania bez użycia tego serwisu. Zazwyczaj do poszerzania wiedzy używało się wtedy książek lub jakichś pełnych manuali dla danego języka. TDD, czyli Test Driven Development. Pozycja obowiązkowa, pomimo tego, że wieszczono już śmierć tej techniki programowania. Polega ona na tym, że zanim jeszcze napiszesz kod, to musisz napisać testy, ale w dość specyficzny sposób. Najpierw piszesz najprostszy możliwy scenariusz jednego testu. Potem dopisujesz implementację, która spowoduje, że ten test przejdzie. Potem kolejny test i kolejna implementacja. I tak sobie nadbudowujesz kawałek po kawałku. Nie należy zapominać o częstej refaktoryzacji kodu. Warsztaty refaktoryzacji. Długi blok zajęć, na którym wspólnie, często w formie Coding Dojo ulepszamy kod, bez zmiany jego zachowania. Narzędzia typu valgrind i sanitizery. Narzędzia te to tak zwane dynamiczne analizatory kodu. Pozwolą Ci na wykrywanie błędów, których kompilator nie jest w stanie wykryć. Te błędy to np. wycieki pamięci, niezdefiniowane zachowanie, wyścigi. Refaktoryzacja kodu Refaktoryzacja kodu to zmiana kodu źródłowego, najczęściej w celu poprawienia jego czytelności, zastosowania odpowiednich wzorców lub umożliwienia szybszego rozszerzania tego kodu w przyszłości. Podczas zmiany kodu nie wolno zmienić jeg","date":"2020-01-14","objectID":"/poradnik/:5:0","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Moja metodologia Pre-work Wspomniałem, że na swoich zajęciach stosuję „odwróconą klasę”, czyli flipped classroom. Oznacza to, że do każdych zajęć uczeń powinien sam się przygotować w ramach tzw. pre-worku. Przykłady takich pre-worków to: Poczytaj o C++11 na Wikipedii Zainstaluj valgrinda i sprawdź, czy użycie go daje rezultat taki jak w instrukcji Napisz test jednostkowy we frameworku Catch, który sprawdzi, czy w wektorze są wrzucone do niego wcześniej liczby Jeśli ktoś jest ambitny i ma czas, to wykona pewnie więcej, bo rolą pre-worku jest przygotowanie zarówno ucznia, jak i wszystkich narzędzi, które będą nam potrzebne do danej lekcji. Dzięki temu na samych lekcjach nie tracimy czasu na konfigurowanie narzędzi i rozwiązywanie podstawowych problemów. Im więcej ktoś wykona pracy przed właściwą lekcją, tym lepiej zostanie ona przyswojona. Pre-test Na początku lekcji stosuję też pre-testy. Jest to coś na kształt popularnej na niektórych studiach wejściówki, z tym że te testy nie są na ocenę, ani nie wykluczają z uczestnictwa w zajęciach. Taki pre-test odpowiednio nakierowuje ucznia na tematy, które będą poruszane na tej lekcji. W czasie jej trwania zostaną udzielone odpowiedzi na wszystkie pytania z testu. Pre-testy uczeń sprawdza sam sobie. Na koniec lekcji uczniowie grupowo mogą spróbować rozwiązać ten sam pre-test, a ja potwierdzam im czy ich odpowiedzi są poprawne. Czyli od razu starają się zastosować poznaną wiedzę do wypełnienia testu. To wzmacnia zapamiętywanie materiału. Post-test Analogicznie jest też post-test, ale nie jest on robiony na zajęciach. Post-test nie powinien być robiony tego samego dnia, w którym odbywa się lekcja. Jego rolą jest przypomnienie sobie raz jeszcze materiału z lekcji, a więc jest to forma powtórki. Odbywa się ona w innym miejscu niż lekcja, a wiedza użyta jest w innym kontekście niż na samej lekcji. Jeśli ktoś czytał „Włam się do mózgu” to będzie wiedział, po co stosuję takie zabiegi 🙂 Takie testy można wypełniać ile razy się chce w ramach ćwiczenia i powtarzania materiału. Również nie są one oceniane. Rolą powtarzania z użyciem post-testów jest organizacja wiedzy w mózgu i przenoszenie jej z pamięci krótkotrwałej do pamięci długotrwałej, a więc wspieranie procesów zapamiętywania. Wykuwanie wszystkiego na blachę to najgorsza rzecz, jaką można robić. Trzeba stosować poznaną wiedzę i zasady, których się nauczyło. Nie warto stosować zasady 3Z znanej ze szkoły, czyli zakuć, zdać, zapomnieć. Post-work Post-work to praktyczne ćwiczenia i zadania, które również mają utrwalić wiedzę i umiejętności zdobyte na lekcji, ale również te zdobyte poza oficjalną lekcją. Jest to rozwinięcie tego, co robiliśmy na lekcji oraz eksplorowanie nowych obszarów zastosowań dla poznanych rzeczy. Punktowanie zamiast oceniania W Coders School w ogóle nie stosuję ocen znanych ze szkół. Jestem zdania, że złe oceny za bardzo demotywują i każdy ma z nimi złe skojarzenia. To nie tylko moje zdanie, ale i rezultaty badań, których tutaj nie podlinkuję, bo nie pamiętam źródeł. Na pewno są one przytaczane w książce Grywalizacja. U mnie można jedynie zbierać punkty i im więcej ich uzbierasz, tym lepiej. Zdobyte punkty można później wymieniać na nagrody rzeczowe, takie jak różne gadżety komputerowe czy też książki programistyczne. Wraz z rosnącą liczbą punktów XP rośnie też nasz level, a co za tym idzie szacunek innych uczestników kursu. Wiedzą oni, do kogo mogą się zwrócić po pomoc. Dlaczego w szkole kujon miałby chcieć pomagać słabszym osobom? Przecież nic z tego nie ma. A u nas pomagający również ma z tego pożytek, bo za samo pomaganie zdobywa jeszcze więcej punktów 🙂 Typowa sytuacja win-win. Dążę do maksymalnego uproszczenia procesu, aby uczenie bardzo przypominało gry komputerowe, przy których spędzamy wiele godzin. Trzeba natomiast wyeliminować negatywne doświadczenia, takie jak jedynki za brak pracy domowej, które dodatkowo demotywują. Gdy już się dostało za coś ocenę (a właściwie za czegoś brak) to po co to ponownie robić? Drugi raz jedynki za ten sam brak pracy domowej chyba się nie dostanie? Takie podejście nic dobrego nie wnosi do procesu nauczania. Dlatego u nas prace domowe (post-worki) można wykonać w dowolnej chwili trwania kursu. Dostarczanie post-worków przed określonym terminem jest za to dodatkowo premiowane. ","date":"2020-01-14","objectID":"/poradnik/:5:1","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Świetna atmosfera Coś, na co dopiero uczestnicy zwrócili mi uwagę, jest moja umiejętność wytworzenia dobrej i przyjaznej atmosfery i to zarówno podczas bezpośrednich spotkań, jak i podczas rozmów na czacie. Nie byłem tego świadomy, ale faktycznie coś w tym jest. Daję ludziom przestrzeń do zadawania każdych pytań, niektórych nawet kilkukrotnie. Nigdy nie zbywam, że jakieś pytanie jest zbyt podstawowe. Jeśli ktoś czegoś nie wie, to albo trochę brakowało mu podstaw, albo jeśli było to przerabiane na kursie, to pewnie nieskutecznie to wytłumaczyłem. Ponieważ dotychczas nagrywałem swoje lekcje, to niektórym osobom zdarzyło się też wytknąć mi nieścisłości, bo na spokojnie w domu mogli obejrzeć sobie nagranie i skonfrontować je z tym, co mówią „internety” na ten temat albo jak to zastosować w praktyce w swoim projekcie. Nic się nie uchowało i nie zamiotło pod dywan, co miało na pewno niezwykle pozytywny wpływ na całą atmosferę. Nie jestem alfą i omegą i niektórych rzeczy mogę po prostu nie wiedzieć lub mogę nie wyjaśnić jakiegoś przypadku. Dzięki takim wytknięciom mojej niewiedzy, uczestnicy nie czują się aż tak niezręcznie ze swoją niewiedzą. A ja zawsze mam okazję dodatkowo nauczyć się jeszcze więcej. Osoby z grup projektowych, które formowały się w czasie trwania mojego kursu, często spotykały się razem także poza zajęciami. Pod pretekstem planowania prac przy projekcie udawało się wypić niejedno piwo. Były też oficjalne wyjścia na piwo po zajęciach. I taką integrację każdy rozumiał. Nie było potem osób, które bałyby się pytać, bo przecież tam sami swoi. Podczas kursu online oczywiście takie spotkania bezpośrednie nie będą możliwe, ale dalej będę próbował wytwarzać dobrą atmosferę na czacie, wrzucając co jakiś czas programistyczne heheszki lub rozmawiając na kanale offtop na przeróżne tematy. ","date":"2020-01-14","objectID":"/poradnik/:5:2","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Co jest wymagane na junior developera C++? To pytanie dostaję dość często i bardzo trudno jest na nie jednoznacznie odpowiedzieć. Wymagania na stanowisko „młodszy programista C++” tak naprawdę będą się różnić w zależności od pracodawcy i jego branży. Ktoś może chcieć już znajomości niskopoziomowych szczegółów (szczególnie branża Embedded), a ktoś może zapytać nawet o wielowątkowość. Niemniej jednak jakiś ogólny zbiór koniecznych umiejętności można wyodrębnić. Podzieliłem te rzeczy na 3 kategorie: obowiązkowe, mile widziane i niepotrzebne. Każda taka lista będzie jednak trochę subiektywna i to, co wg mnie jest niepotrzebne, to ktoś może sobie jednak mimo to zażyczyć. Mam nadzieję, że będą to jednak nieliczne wyjątki. Kolejna ważna uwaga jest taka, że to się zmienia w czasie. To, co kiedyś było wiedzą typowo seniorską, już zaczyna być wymagane u juniorów. Przyczyną tego stanu jest przesyt juniorów lub też osób, które chciałyby się wbić do programistycznej branży. Ponieważ jest ich bardzo dużo, a wiele z tych osób nie reprezentuje godnego poziomu, to niektóre z firm w ogóle rezygnują z rekrutacji juniorów lub bardzo mocno ją ograniczają. Nawet jeśli ktoś musi zrekrutować wielu juniorów, to często pierwszym etapem selekcji będą jakieś testy lub zadania online, które mają przesiać kandydatów. No więc tak: ","date":"2020-01-14","objectID":"/poradnik/:6:0","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Obowiązkowo Git Komendy Linuxa (wymagane w 80-90% ogłoszeń o pracę, tylko te pod Windows mogą ich nie wymagać) Podstawowa obsługa kompilatora z linii komend System budowania Cmake Używanie dokumentacji języka C++ (cppreference.org) Znajomość składni języka (Czy ten kod się skompiluje?) Czy ten kod się skompiluje? Osobiście twierdzę, że pytania typu czy kod się skompiluje są bezsensowne. Sama wiedza na ten temat oczywiście będzie wynikać z doświadczenia, ale po to jest kompilator, aby on za nas to skompilował i nam powiedział dlaczego coś mu nie pasuje. Kompilatory ciągle się zmieniają i czasami jak ktoś ma przestarzałą bazę takich pytań to odpowiedź może brzmieć: zależy od kompilatora lub jego wersji. Lepiej brzmi pytanie dlaczego dany kod się nie skompiluje lub po prostu jakie widzisz problemy z danym kodem. Stosowanie przejrzystego formatowania kodu Stosowanie konwencji nazewniczych Umiejętność pisania prostych algorytmów Podejście rekurencyjne i iteracyjne Słowa kluczowe: inline, static, explicit, volatile, const, friend i wiele innych Znajomość rodzajów przekazywania parametrów (wartość, wskaźnik, referencja) Umiejętność używania wskaźników Klasy i obiekty, pola i metody, konstruktory, destruktory Konwersje typów, static_cast Kolejność wywołań konstruktorów i destruktorów w dziedziczeniu i kompozycji Programowanie obiektowe: dziedziczenie, polimorfizm, funkcje wirtualne, funkcje czysto wirtualne, klasy abstrakcyjne, interfejsy, problem diamentowy Znajomość zagadnień złożoności obliczeniowej Znajomość kontenerów STL i złożoności obliczeniowej ich operacji Znajomość (powierzchowna) algorytmów STL Zarządzanie pamięcią: używanie wskaźników stos vs sterta dynamiczna alokacja i dealokacja pamięci wycieki pamięci i ich wykrywanie używanie smart pointerów RAII podstawowe użycie valgrinda Testowanie: testy jednostkowe (zazwyczaj w Google Test lub Catch2), TDD Nowoczesny C++: lambdy auto using default delete final override nullptr scoped enum jednolita inicjalizacja Szablony: używanie klas i funkcji szablonowych ","date":"2020-01-14","objectID":"/poradnik/:6:1","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Mile widziane (poziom mida) Umiejętność implementacji różnych operatorów Narzędzia GNU binutils (używane głównie w Embedded) Dobra znajomość popularnych algorytmów (sortujące, grafowe) Dobra znajomość podstawowych struktur danych (drzewa binarne, tablice haszujące, listy) Debugowanie (najlepiej w gdb) Wiedza o tym, gdzie może występować niezdefiniowane zachowanie Testowanie: testy w stylu Given, When, Then (Arrange, Act, Assert) wstrzykiwanie zależności dummy, stub, mock Wyjątki – poprawne używanie i pisanie własnych wyjątków, znajomość zasad zwijania stosu i kolejności niszczenia obiektów, znajomość zasad łapania wyjątków Drobne optymalizacje: const correctness, przekazywanie przez referencje, rozmieszczenie danych w pamięci Wiszące referencje i wskaźniki, rozpoznawanie problemów z czasem życia obiektów Szablony: pisanie własnych klas i funkcji szablonowych, specjalizacje szablonów, mechanizm dedukcji typów, mechanizm overload resolution Zarządzanie pamięcią: używanie weak_ptr, znajomość wydajności smart pointerów i ich problemów Nowoczesny C++ semantyka przenoszenia referencje rvalue i lvalue constexpr noexcept structured bindings RTTI, dynamic_cast Rule of 0, 3, 5 Znajomość kilku popularniejszych wzorców projektowych Znajomość zasad czystego kodu Znajomość zasad SOLID Podstawy wielowątkowości: wątek, mutex, async Nowości w C++20 Znajomość podstawowych diagramów UML Znajomość metodologii zwinnych (np. scrum) ","date":"2020-01-14","objectID":"/poradnik/:6:2","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Niepotrzebne (poziom seniora) Niepotrzebne, to nie znaczy niepotrzebne w ogóle, ale na juniora. W późniejszym etapie kariery szanujący się programista powinien zadbać o douczenie się tych kwestii. Większość programistów niestety nie dochodzi do tego poziomu lub zwyczajnie wychodzą z założenia, że jeśli kilka lat przeżyli bez tego to i resztę życia też mogą tego nie znać. Szablony: type_traits, SFINAE, enable_if, tag dispatch, CRTP, szablony wariadyczne Wielowątkowość: blokady, zakleszczenia, future, promise, atomic, zmienne warunku, call_once Uniwersalne referencje (forwarding reference), std::forward Optymalizacje: Copy elision, RVO, pamięć cache, cache locality, false sharing Benchmarking Zaawansowane debugowanie (np. aplikacji wielowątkowych) Dobra znajomość wzorców projektowych Dobra znajomość idiomów języka C++: RAII, PIMPL, Small Object Optimisation, Type erasure, PIMPL, … Znajomość zasad GRASP Znajomość biblioteki Boost Musisz wziąć pod uwagę, że te listy to wersje adekwatne do C++17. W C++20 dojdzie do tych list jeszcze trochę nowych rzeczy. Póki co znajomość tych nowości umieściłem w części „mile widziane”. Oczywiście nie sposób wypisać absolutnie wszystkiego. Stwierdzam nawet, że ta lista jest nieskończona, bo wiele z tych tematów można rozbijać na bardzo drobne kawałeczki i każdy z nich tłumaczyć na jeszcze większym poziomie zagłębienia. Mam jednak nadzieję, że ta lista będzie dla Ciebie dobrym drogowskazem, który wskaże Ci elementy, których musisz się nauczyć, aby łatwo było Ci przejść rozmowę rekrutacyjną na stanowisko Junior C++ developera. Jeśli natomiast jesteś już midem lub seniorem i nawet znasz prawie wszystko, co umieściłem na tej liście, to dalej jest nieskończona liczba rzeczy, której można się uczyć. Wystarczy, że wymienię tutaj bazy danych i język SQL, bazy NoSQL, architekturę oprogramowania, znajomość protokołów sieciowych. ","date":"2020-01-14","objectID":"/poradnik/:6:3","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Minusy bootcampów Co jest minusem bootcampów? Mogę wymienić kilka rzeczy, które są wadami, ale tylko z mojego punktu widzenia. Dla innych osób te wady mogą być nawet zaletami. Zaznaczę jednak, że prowadziłem też zajęcia w trybie bootcamp i zebrałem odpowiednio dużo informacji zwrotnych od uczestników. Na ich podstawie wyciągnąłem wnioski i stwierdziłem, że w celu poprawy efektów nauki nie będę prowadził zajęć w tym trybie. Przejdźmy do tych minusów. Najpierw je wymienię, a później opiszę dokładniej. Intensywność Harmonogram Rozpoczynanie od podstaw ","date":"2020-01-14","objectID":"/poradnik/:7:0","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Intensywność i harmonogram Pierwszy z punktów to intensywność. Jest on powiązany z kolejnym punktem — harmonogramem. Opiszę je więc razem. Zajęcia na bootcampach często odbywają się od poniedziałku do piątku i często po 8 godzin dziennie. Taki tryb pracy wymusza wyłącznie przyswajanie wiedzy w czasie zajęć z trenerem w sali. Nie stosuje się raczej prac domowych, bo po 8 godzinach nikt nie ma na nie czasu oraz głowy. Jedyne, o czym człowiek myśli po powrocie do domu to odpalić TV albo Facebooka, odmóżdżyć się, wypić piwko i pójść spać. Na pewno znajdziecie też bootcampy, które oferują trochę inne rozłożenie zajęć, np. poniedziałek-czwartek po 8h albo poniedziałek-piątek po 4h wieczorami albo sobota i niedziela po 10h. Ale to oczywiście są wariacje dla osób, które mają inne stałe zajęcia. Także nie oszukujmy się, ale poza taką intensywną nauką w klasie nie macie na nic czasu. Według wszelkich badań nie wpływa to pozytywnie na efekty uczenia. Oczywiście wśród ludzi są różne jednostki i niektórym taki tryb będzie odpowiadał. Dla innych osób taki kurs nie będzie taki straszny z racji tego, że ktoś już wcześniej liznął trochę tej wiedzy. Taki kurs tylko ją bardziej ugruntowuje i porządkuje. Ideą takiego podejścia jest jednak sztywne ograniczenie czasowe dla uczestnika. Jeśli kurs jest reklamowany w taki sposób, że np. w pół roku zostaniesz programistą, to w te pół roku często upychane jest 2 lata wiedzy ze studiów. Ja jestem zwolennikiem wolniejszej i trwalszej nauki. Jeśli proces nauczania rozbije się na mniejsze kawałki i dużo z tych zadań przerzuci się do wykonania samodzielnie (głównie realizowanie zadań domowych, ale też czytanie artykułów i projekty grupowe) to z racji tego, że zmienia się miejsce przyswajania wiedzy oraz kontekst zastosowań to wiedza skuteczniej wpada do głowy. Skuteczne przyswajanie wiedzy Poczytaj o metodzie zmiany miejsca, metodzie tancerki i wielu innych ciekawych metodach nauki w książce „Włam się do mózgu”. W swoich kursach stacjonarnych świadomie stosuję prawie wszystkie z nich. Z racji intensywności i napiętego grafiku projekty jakie tworzy się w ramach bootcampów często rozpoczyna się na sam koniec, już po zakończeniu części edukacyjnej. Wtedy człowiek, który ma do wykonania projekt, rozsiada się, spogląda na treść, spogląda na notatki i… nie wie jak go zacząć. Serio. Dużo ludzi ma problemy z jakimkolwiek ruszeniem z miejsca. Dlatego też u mnie pierwszy projekt jest stosunkowo wcześnie, czyli już na pierwszej oficjalnej lekcji po wstępnym wyrównaniu wiedzy. Tak, pierwsze 3 lekcje u mnie mają bardziej za zadanie wyrównać wiedzę pomiędzy uczestnikami, bo zakładam, że każdy już ma jakieś podstawy. Dzięki takiemu szybkiemu zanurzeniu w pierwszy projekt uczestnicy natychmiastowo otrzymują informacje zwrotne na temat swoich programów. Dla osób, które nie potrafią ruszyć z miejsca przewidziane są podpowiedzi w formie listy kontrolnej. Jeśli ktoś nie umie bez niej zacząć, to z taką listą oraz z możliwością bezpośredniego kontaktu ze mną poprzez czat jest dużo łatwiej. Poza tym bardzo szybko rozpoczyna się u mnie etap projektów grupowych, bo już na drugiej lekcji, to co stworzyło się samemu, należy dalej rozwinąć w parach. Na podstawie pierwszych wersji dwóch różnych osób oraz moich komentarzy można poprawić istniejące rozwiązanie (lub napisać nowe) i rozwijać je dalej. Równie szybko wprowadzane są większe grupy projektowe, ale tutaj już z pełną świadomością problemów, które na nie czekają. Nigdy nie zapobiegam problemom, pozwalam ludziom przekonać się na własnej skórze jak ciężka może być praca grupowa i dopiero po przeprowadzonej retrospektywie, wyciąga się wnioski, które mają być zastosowane w dalszej współpracy. Uczenie się na błędach jest bardzo skuteczne, pod warunkiem, że są to błędy własne. Uczenie się na cudzych błędach, wbrew powszechnej opinii nie daje aż tak spektakularnych rezultatów. Retrospektywa Retrospektywa, potocznie retro, to jeden z rytuałów metodologii scrum. Wg mnie najważniejszy. Pozwala on na dialog całego zespołu i stwierdzenia, co we współpracy kuleje, co należy poprawić i w jaki sposób. Również pochwala się dobre praktyki, które były stosowane ostatnio. ","date":"2020-01-14","objectID":"/poradnik/:7:1","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Podstawy programowania Zostało nam jeszcze rozpoczynanie od podstaw. Dlaczego pomijam ten etap? Mam kilka powodów. Najbardziej przyziemny jest taki, że sam wybieram sobie klientów i gdybym miał tłumaczyć komuś kto zupełnie się nie nadaje na programistę jak działa instrukcja “if”‚ lub pętla “for” to trochę by mnie to denerwowało, delikatnie mówiąc. Męczyłbym się podczas takich zajęć. I nie twierdzę tutaj, że osoby, które nie potrafią tego pojąć są ułomne albo, że nie zrobiłbym sobie selekcji kandydatów na podstawie ich predyspozycji. Na pewno bym zrobił. Z doświadczenia natomiast wiem, że taka selekcja nie jest w pełni skuteczna. O niektórych rzeczach dowiem się dopiero w praktyce czyli podczas zajęć oraz sprawdzając zadania domowe. Takiej wstępnej selekcji służą u mnie lekcje wstępne, których zadaniem jest wyrównanie wiedzy. Po nich potrafię z ponad 90% prawdopodobieństwem powiedzieć, kto nie ukończy mojego kursu (z różnych przyczyn). Jeśli zauważę, że ktoś sobie za bardzo nie radzi, to bardzo wcześnie oferuję dodatkowe wsparcie i pomoc oraz angażuję inne osoby z grupy do jak najwcześniejszej pracy zespołowej razem z tą osobą (na początku, gdy nikt się nie zna z innymi to nie jest to łatwe). Gdy po zakończeniu lekcji wstępnych nie widzę poprawy to bez ogródek podczas rozmowy twarzą w twarz (lub w bezpośredniej komunikacji, jeśli nie uda się tak porozmawiać) daję jasno do zrozumienia, że tej osobie będzie ciężko w dalszej części kursu.Każdy ma możliwość bezproblemowej rezygnacji po tych lekcjach wstępnych. Później zaczynają się projekty grupowe i rezygnacja w trakcie również jest możliwa, ale tutaj trzeba uważać, aby wycofanie się jakiejś osoby nie zepsuło projektu reszcie. Po dokształceniu się każdy jest mile widziany na kolejnej edycji kursu. Podstaw nie uczę także dlatego, że to trwa bardzo długo. Najwięcej czasu trzeba poświęcić każdemu uczestnikowi z osobna. Najpierw jest to rozwiązywanie podstawowych problemów z aplikacjami (kompilatory, IDE), później zrozumienie podstaw języka. Mógłbym takie rzeczy robić, ale nie lubię naciągać ludzi na pieniądze. Takich rzeczy można zupełnie za darmo nauczyć się w internecie. Polecałem już kursy pana Zelenta i wspomnę o nich tutaj jeszcze raz. Zresztą każdy przed moim kursem ma pre-work w postaci przerobienia tych kursów i odświeżenia swojej wiedzy. Na koniec chciałbym dodać, że w kursie online będzie jakieś szersze wprowadzenie do podstaw. Mogę sobie na to pozwolić, bo zrobię to jednorazowo. Poza tym podlinkuję dużo innych już gotowych i dobrych materiałów dla juniorów. ","date":"2020-01-14","objectID":"/poradnik/:7:2","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Pytania od publiczności ","date":"2020-01-14","objectID":"/poradnik/:8:0","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Szkoła programowania w CV Pytanie, które czasami dostaję jest “Czy lepiej pisać, czy nie pisać szkoły programowania w CV?\" W mediach społecznościowych niektórzy mówią, że podobno pracodawcy unikają takich osób. No cóż, skoro jest zalew juniorów o podobnych, ale nie wystarczających kompetencjach to możliwe, że unikają. A jeśli unikają to dlatego, że mieli złe doświadczenia w ich rekrutowaniu. Być może chodzi o za małą wiedzę, może o złą postawę - “Jestem po kursie za miliony monet i praca mi się należy jak 500+ dla singli” A może jeszcze coś innego. Ja nie mogę potwierdzić czy faktycznie są jakieś firmy, które unikają takich pracowników. Chciałbym za to zauważyć, że tak być może jest w innych językach programowania niż C++. Dlaczego nie w C++? Bo nie ma zbyt wielu kursów tego języka. Jeśli ktoś go kończy, to raczej jest to mała grupa osób. Nie ma więc tego zalewu juniorów jak w przypadku technologii front-endowych. Ja nie wstydzę się tego, jakich absolwentów wypuszczam. Nie każdy też dostaje u mnie certyfikat. Trzeba na niego zasłużyć. Ale też nie zamykam bram dla osób, które certyfikatu nie dostaną. Jeśli podniosą oni swoją wiedzę, to mogą po specjalnej rozmowie kwalifikacyjnej ze mną dostać certyfikat w przypadku jej pomyślnego ukończenia. Podobnie jest z wieloma firmami, które znam. Dawniej myślałem, że jeśli nie pójdzie mi na rozmowie rekrutacyjnej, to ta firma już będzie do końca mojego życia spalona. Jest to bardzo mylne myślenie i często można już po pół roku lub roku jeszcze raz startować do tej samej firmy, w której się nie udało. Będzie się bogatszym wtedy o pewne doświadczenia i zapewne przez ten okres człowiek zdąży się douczyć. ","date":"2020-01-14","objectID":"/poradnik/:8:1","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Upragniony certyfikat, czyli co zrobić, gdy zabraknie papieru toaletowego? Muszę też wspomnieć o bardzo ważnej rzeczy. Jeśli ktoś myśli, że certyfikat z dowolnej szkoły programowania otwiera przed nim drzwi do kariery w IT to jest w dużym błędzie. To, co otwiera te drzwi to profesjonalna wiedza, a częściej oczywiście doświadczenie. Sam certyfikat to tylko papierek, który raczej nie znaczy wiele w branży IT. Są oczywiście certyfikaty Microsoftu, które są honorowane w technologiach .NET albo certyfikaty Oracle dla Javy, ale dla C++ nie ma oficjalnych jednostek, które takie certyfikaty wydają (czyt. właścicielem tego języka nie jest jedna firma). Pracodawcy, zamiast patrzeć na certyfikat po prostu sprawdzą Twoją wiedzę oraz umiejętności miękkie, jeśli takich będą wymagać. ","date":"2020-01-14","objectID":"/poradnik/:8:2","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Brakujące doświadczenie Jeśli masz wiedzę, ale nie masz doświadczenia, to na kursie możesz jakieś zdobyć. Podczas realizowania projektów wewnętrznych w szkołach lub dowolnych projektów open-sourcowych, które zestawione są w podobny sposób do projektów komercyjnych, już nabija Ci się doświadczenie i powinno się je wpisywać do CV. Pamiętaj, że doświadczenie != zatrudnienie. Możesz więc mieć rok doświadczenia, nie mając żadnego zatrudnienia, kontrybuując jedynie do projektów open-sorce. Na moim własnym przykładzie mogę stwierdzić, że popełniłem przy wielu rekrutacjach duże błędy, nie podając informacji w CV, że spędziłem prawie 10 lat na prowadzeniu i tworzeniu własnej strony internetowej w pierwszym dziesięcioleciu XXI wieku. Samo prowadzenie to nie było wyłącznie pisanie treści, chociaż to oczywiście też, ale zaprogramowanie własnego silnika CMS dla tego serwisu, używającego baz danych. 10 lat doświadczenia jak na człowieka, który dopiero co skończył studia? Nie do pomyślenia. Ale jednak możliwe. Szkoda tylko, że wtedy o tym nie wiedziałem i nie wykorzystałem tego odpowiednio. ","date":"2020-01-14","objectID":"/poradnik/:8:3","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Czy po kursie online mogę uzyskać certyfikat? Jeśli bardzo chcesz mieć taki papierek, to owszem, możesz go uzyskać. Po ukończeniu kursu online musisz się ze mną skontaktować mailowo i napisać, że chcesz certyfikat. Będziemy musieli się umówić na około 3-godzinne spotkanie (prawdopodobnie we Wrocławiu), podczas którego sprawdzę Twoją wiedzę na symulacji rozmowy rekrutacyjnej. Spotkanie takie jest dodatkowo płatne, ale na razie nie podaję szczegółów, bo rozpiszę je, gdy zakończymy kurs i faktycznie ktoś będzie się do mnie z takimi prośbami zgłaszać. Być może uda mi się zautomatyzować proces wystawiania takich zaświadczeń o ukończeniu kursu online :) ","date":"2020-01-14","objectID":"/poradnik/:8:4","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Nie od zera? Jak to? Jeszcze jedna ważna informacja. Ten kurs nie będzie dla osób zupełnie początkujących. Musisz znać przynajmniej podstawy programowania w dowolnym języku, a najlepiej także podstawy programowania obiektowego. Jeśli nie znasz aż takich podstaw C++ to na pewno znajdziesz w Internecie darmowe kursy online, które cię tego nauczą. Ja polecam trochę przestarzały, ale ciekawie wytłumaczony i przede wszystkim darmowy kurs C++ pana Mirosława Zelenta oraz kurs obiektowego C++ tego samego autora. Nie jest on zbyt aktualny, ale jednak pozwoli nauczyć się podstaw, które będą przydatne w naszym kursie. Oprócz tego nauczysz się paru nieprzydatnych rzeczy, ale jeśli i tak oczekujesz na mój kurs, to tego czasu trochę będziesz mieć. Wykorzystaj ten okres oczekiwania na zrealizowanie tychże dwóch kursów. Być może w przyszłości sam udostępnię lekcje od zera, ale na razie wolę odsyłać do sprawdzonych gotowych rozwiązań :) ","date":"2020-01-14","objectID":"/poradnik/:8:5","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Pomorze ktoś? Niestety, Mazowsze Kurs C++ online będzie rozwijany w trybie ciągłym, gdyż on sam jest dużym projektem programistycznym. Prawdopodobnie nie będę pracował nad nim sam. W przyszłości zapewne uformuje się jakiś zespół, który wspólnie ze mną będzie dodawał nowe rzeczy do świata ceplusplusowych ninja. Jeśli chcesz dostawać informacje o tym, jak idzie rozwijanie tego kursu i jako jedna z pierwszych osób dostawać do przetestowania jego fragmenty to (zapisz się proszę na tę listę)[mailing jakiś pewnie w MailChimpie]. Na pewno też powiadomię Cię, gdy wystartuje przedsprzedaż kursu. Otrzymasz także zniżkę na moje przyszłe kursy na Udemy, gdy te się pojawią :) Cena kursu na pewno będzie rosła w czasie. Im więcej nowych modułów będzie do niego dorzucanych, to tym więcej będzie on kosztował. Im wcześniej go kupisz, tym mniej zapłacisz. Na pewno nigdy nie będzie tak tanio, jak w przedsprzedaży. Jeśli taka narracja kursu wzięta żywcem z gier online do Ciebie przemawia — cieszę się niezmiernie :) Daj mi proszę o tym znać pisząc mi maila. To wiele dla mnie znaczy, bo wtedy wiem, że nie robię tego na darmo, tylko że są osoby, które z niecierpliwością oczekują, aż przedstawię światu moją pracę. Tak jak wspomniałem wcześniej, moim celem nie jest zdobycie maksymalnej liczby klientów i sprzedanie im produktu. Nie chciałbym nikomu wciskać czegoś, co nie będzie mu potrzebne i nie będzie mieć z tego dobrego użytku. Zamiast tego chcę zrobić coś naprawdę dobrej jakości, czego jeszcze nigdy nie było w polskim Internecie. Kurs będzie dostępny w języku polskim. Jeśli się przyjmie, to później zostanie dorobiona jego wersja angielska. Jeśli uważasz, że możesz mnie wesprzeć np. oferując swoje usługi programistyczne podczas tworzenia platformy do kursu lub testując ten kurs, to koniecznie napisz mi maila. Jeśli jesteś programistą C++ i masz inne spojrzenie na opisane przeze mnie rzeczy, to daj znać w komentarzu. Chętnie podyskutuję. A jeśli wiesz, że ktoś z twoich znajomych uczy się lub będzie się uczyć C++, to proszę, wyślij mu ten artykuł. ","date":"2020-01-14","objectID":"/poradnik/:8:6","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Artykuł","Warto wiedzieć"],"content":"Podsumowanie Dziękuję, że dotarłeś/-aś ze mną do samego końca. Raz jeszcze zachęcam Cię do zapisania się na newsletter, aby otrzymywać raporty z pola bitwy. Jak widzisz, tematyka naszego poradnika jest dość spora. Dotyka ona nie tylko zagadnień związanych z tym, czego się uczyć, ale też dużo podpowiada o tym, jak się uczyć. Moje formy uczenia są wybrane w taki sposób, aby treść możliwie najłatwiej sama pchała się do głowy i nie chciała potem stamtąd wypływać. Skoro udało Ci się doczytać ten artykuł prawie do końca, to pewnie jesteś osobą, która jest zdecydowana na poszerzanie swojej wiedzy z języka C++. Jeśli cała ta ścieżka jest dopiero przed Tobą, to wiedz, że będzie Cię czekać dużo ciężkiej pracy. Nie wystarczy poczytanie książek czy internetu, aby nauczyć się programowania. Trzeba bardzo dużo praktykować. Jeśli nie znajdziesz na to czasu, to nawet nie zaczynaj. Tutaj potrzebny jest czas. Ale może nawet nie tak dużo, jak myślisz. Ważniejsza jest regularność. Lepiej spędzać na nauce 1 godzinę dziennie codziennie niż 10 godzin tylko w weekendy. Wiem doskonale co piszę. Przeładowywanie mózgu informacjami i komasowanie sesji zdobywania wiedzy powoduje pogorszenie efektów nauki niż ich rozłożenie w czasie na mniejsze kawałki. Poza tym im wcześniej coś zaczniesz, to potem łatwiej korygować kurs, gdyby się okazało, że za daleko odpływasz w niewłaściwą stronę. Gdy na stałe będziesz obcować z kompilatorem to zaczniesz go bardzo dobrze rozumieć :) Jeśli udało Ci się doczytać ten artykuł do końca, to kliknij tutaj proszę -- Celem tego artykułu było pokazanie Ci, jak wielką wagę przykładam nie tylko do samej tematyki zdobywanej wiedzy, ale warunków, w których jest ona zdobywana. Jeśli chcesz otrzymywać informacje na temat rozwoju kursu C++ online, ofertach jego sprzedaży oraz informacje o kursach stacjonarnych oraz od czasu do czasu jakieś darmowe materiały do nauki to najlepsze co możesz dla mnie zrobić to: Zapisać się na newsletter Wysłać linka do tego artykułu do kogoś, komu się on przyda Podzielić się tym artykułem przez media społecznościowe klikając jedną z poniższych ikonek Tymczasem żegnam się i życzę sukcesów w nauce programowania￼. ","date":"2020-01-14","objectID":"/poradnik/:9:0","tags":["nauka","mity","c++","poradnik"],"title":"Poradnik nauki programowania, czyli jak się uczyć C++ i innych języków","uri":"/poradnik/"},{"categories":["Post","Wielowątkowość"],"content":"Wszystkiego dobrego w Nowym Roku 🙂 Już niedługo w Coders School odbędzie się kurs wielowątkowość w języku C++. Oto detale: ","date":"2020-01-08","objectID":"/post/wielowatkowosc-2020/:0:0","tags":["c++","mini kurs","wielowątkowość","wrocław"],"title":"Wielowątkowość w C++ w lutym i marcu 2020","uri":"/post/wielowatkowosc-2020/"},{"categories":["Post","Wielowątkowość"],"content":"Terminy spotkań 16 lutego (niedziela) 10:00-15:00 23 lutego (niedziela) 10:00-15:00 1 marca (niedziela) 10:00-15:00 8 marca (niedziela) 10:00-15:00 ","date":"2020-01-08","objectID":"/post/wielowatkowosc-2020/:1:0","tags":["c++","mini kurs","wielowątkowość","wrocław"],"title":"Wielowątkowość w C++ w lutym i marcu 2020","uri":"/post/wielowatkowosc-2020/"},{"categories":["Post","Wielowątkowość"],"content":"Tematyka wielowątkowość – teoria zrównoleglania wątki (std::thread) współdzielenie danych (mutex, locks) zmienne warunku (conditione_variable) zmienne atomowe (atomic) model pamięci (memory model) jednokrotne wywołania (call_once) komunikacja jednokierunkowa (future, promise) zadania asynchroniczne (async, packaged_task) problemy współbieżności współbieżne wzorce projektowe testowanie programów współbieżnych Powyższa tematyka pokrywa CAŁĄ część o wielowątkowości w bibliotece standardowej C++17. Opowiemy sobie też o rzeczach, które wejdą w C++20. Będzie dużo prac domowych oraz projekt grupowy, który będzie rozwijany podczas kursu 🙂 ","date":"2020-01-08","objectID":"/post/wielowatkowosc-2020/:2:0","tags":["c++","mini kurs","wielowątkowość","wrocław"],"title":"Wielowątkowość w C++ w lutym i marcu 2020","uri":"/post/wielowatkowosc-2020/"},{"categories":["Post","Wielowątkowość"],"content":"Co daje kurs? Kurs da Ci wiedzę z zakresu wielowątkowości, to znaczy z tego jak zachowują się programy, które mogą wykorzystywać wiele procesorów i rdzeni, aby przyspieszyć obliczenia. Dowiesz się i przekonasz o wielu problemach, które na 100% przydarzą Ci się podczas normalnej pracy z takimi aplikacjami, takimi jak synchronizacja danych, czy… spowolnienie programu podczas jego wykonania na wielu rdzeniach. Samo zagadnienie przetwarzania wieloprocesorowego oraz problemów synchronizacji jest uniwersalne dla każdego języka programowania. Twory takie jak wątki, mutexy czy zmienne warunku również są uniwersalne dla wielu języków programowanie. Po kursie oczywiście dostaniesz certyfikat jego ukończenia, jeśli uda Ci się zdobyć wymaganą liczbę punktów za zadania 🙂 ","date":"2020-01-08","objectID":"/post/wielowatkowosc-2020/:3:0","tags":["c++","mini kurs","wielowątkowość","wrocław"],"title":"Wielowątkowość w C++ w lutym i marcu 2020","uri":"/post/wielowatkowosc-2020/"},{"categories":["Post","Wielowątkowość"],"content":"Trener Co najmniej 90% kursu poprowadzę ja (Łukasz Ziobroń) 🙂 Jest możliwe, że 10% poprowadzi nowy trener, którego przestawię w późniejszym czasie. Ja będę obecny na każdej lekcji. ","date":"2020-01-08","objectID":"/post/wielowatkowosc-2020/:4:0","tags":["c++","mini kurs","wielowątkowość","wrocław"],"title":"Wielowątkowość w C++ w lutym i marcu 2020","uri":"/post/wielowatkowosc-2020/"},{"categories":["Post","Wielowątkowość"],"content":"Przygotowanie Aby uczestniczyć w tym kursie musisz mieć podstawową wiedzę o funkcjach lambda oraz zagadnieniach z C++11 (auto, using, pętla for po kolekcji, jednolita inicjalizacja, default, delete, override, semantyka przenoszenia). Wiedza o tym, czym jest RAII również się przyda. Bardzo polecam, aby pracować na Linuxie (lub na Macu). Linuxa możesz mieć zainstalowanego na laptopie natywnie, jako maszynę wirtualną w VirtualBoxie lub poprzez WSL w WIndows10. Oczywiście pod samym Windowsem też pisze się wielowątkowy kod, ale nie ma dobrych i darmowych narzędzi do testowania wielowątkowości pod Windowsem. Być może Visual Studio coś takiego posiada, ale ja zupełnie nie jestem w temacie. A sam Visual Studio w odróżnieniu od Visual Studio Code jest płatny. Zainstaluj sobie następujące programy: kompilator: g++ lub clang++ IDE: Visual Studio Code lub vim 🙂 valgrind gdb Jako bonus podrzucam też linka do fajnej gierki online – The Deadlock Empire. Przechodząc kolejne jej poziomy będziesz uzyskiwać wiedzę z kolejnych mechanizmów wielowątkowości. Miłej zabawy 🙂 ","date":"2020-01-08","objectID":"/post/wielowatkowosc-2020/:5:0","tags":["c++","mini kurs","wielowątkowość","wrocław"],"title":"Wielowątkowość w C++ w lutym i marcu 2020","uri":"/post/wielowatkowosc-2020/"},{"categories":["Post","Wielowątkowość"],"content":"Koszty Cały kurs Wielowątkowość w C++ kosztuje 1099 zł. Kolejne edycje wielowątkowości będą droższe, więc jeśli się wahasz to taniej może już nie być. ","date":"2020-01-08","objectID":"/post/wielowatkowosc-2020/:6:0","tags":["c++","mini kurs","wielowątkowość","wrocław"],"title":"Wielowątkowość w C++ w lutym i marcu 2020","uri":"/post/wielowatkowosc-2020/"},{"categories":["Post","Wielowątkowość"],"content":"Zapisy Zapisy na kurs przyjmuję poprzez formularz, który pojawi się po kliknięciu poniższego przycisku. Po zapisaniu się otrzymasz email ze szczegółami organizacyjnymi oraz z informacją o płatności. Kliknij tutaj, aby otworzyć formularz zapisowy (nieaktywne)  ","date":"2020-01-08","objectID":"/post/wielowatkowosc-2020/:7:0","tags":["c++","mini kurs","wielowątkowość","wrocław"],"title":"Wielowątkowość w C++ w lutym i marcu 2020","uri":"/post/wielowatkowosc-2020/"},{"categories":["Post","Wielowątkowość"],"content":"Rezygnacja W razie rezygnacji przed kursem zwracam 100% opłaty, więc gdyby coś Ci wyskoczyło to tylko daj znać, a zrobię zwrot. Zamierzam też dać damowy bonus wszystkim osobom zapisanym na kurs. Tego bonusu nie musisz w żaden sposób zwracać, bo będzie on w formie elektronicznej 🙂 W przypadku późniejszej rezygnacji dostaniesz zwrot proporcjonalny do liczy zajęć, które odbyły się do momentu rezygnacji, czyli za zrezygnowanie w połowie otrzymasz zwrot połowy kosztów. ","date":"2020-01-08","objectID":"/post/wielowatkowosc-2020/:8:0","tags":["c++","mini kurs","wielowątkowość","wrocław"],"title":"Wielowątkowość w C++ w lutym i marcu 2020","uri":"/post/wielowatkowosc-2020/"},{"categories":["Post","Wielowątkowość"],"content":"Miejsce zajęć Miejsce zostanie ustalone dopiero po zakończeniu zapisów, ponieważ muszę znać liczbę osób, które się zapiszą. Jeśli chętnych będzie dużo, to możliwe że powstaną nawet 2 grupy. Jeśli masz jakiekolwiek pytania to zawsze możesz napisać mi maila albo wysłać wiadomość poprzez formularz kontaktowy 🙂 ","date":"2020-01-08","objectID":"/post/wielowatkowosc-2020/:9:0","tags":["c++","mini kurs","wielowątkowość","wrocław"],"title":"Wielowątkowość w C++ w lutym i marcu 2020","uri":"/post/wielowatkowosc-2020/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Na początku października zakończyła się czwarta edycja kursu C++ w Coders School. Uczestniczyły w niej osoby, które mają teraz niesamowicie mocną wiedzę techniczną potwierdzoną przez realizowane wspólnie projekty, zadania domowe i testy. Absolwenci zyskali nie tylko wiedzę, ale przede wszystkim praktyczne umiejętności z zakresu inżynierii oprogramowania, które są uniwersalne dla każdego języka obiektowego. Zyskali też coś poza umiejętnościami technicznymi – ciekawe znajomości. W związku z tym utworzył nam się zintegrowany zespół programistów, którzy znają się, wspólnie kodują, a wieczorami chodzą razem na pizzę i piwo 🙂 W sam raz na outsourcing do jakiegoś projektu 😉 Wśród absolwentów są osoby, które są już programistami. Są też osoby, które już nie są junior developerami 🙂 ","date":"2019-10-15","objectID":"/post/edycja-letnia-2019-kursu-cpp-zakonczona/:0:0","tags":["c++","programowanie","kurs","wrocław","podsumowanie"],"title":"Edycja letnia 2019 kursu C++ zakończona","uri":"/post/edycja-letnia-2019-kursu-cpp-zakonczona/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"4 edycja w liczbach 2 grupy 34 zgłoszenia na kurs 19 certyfikowanych absolwentów 66 godzin zajęć w każdej grupie 2 lekcje online 132 nagrania z zajęć na YouTube 19 nagród książkowych Zawód: Programista 8 nagród książkowych C++17 STL. Receptury 24 nagrody – zaślepki na kamerkę ","date":"2019-10-15","objectID":"/post/edycja-letnia-2019-kursu-cpp-zakonczona/:1:0","tags":["c++","programowanie","kurs","wrocław","podsumowanie"],"title":"Edycja letnia 2019 kursu C++ zakończona","uri":"/post/edycja-letnia-2019-kursu-cpp-zakonczona/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Zmiany w 4 edycji kursu C++ Nagrania wideo z zajęć na YouTube. Poprzednia edycja również była nagrywana, ale był to jedynie braz z laptopa + głos trenera. W tej edycji trener również był nagrywany na wideo 🙂 Dzięki nagranim ieobecność na zajęciach nie była niedogodnością. System punktowy z nagrodami. Kursanci gromadzili punkty za różne aktywności: zadania domowe, rojekty, zadania algorytmiczne w serwisie Firecode.io, przeglądy kodu, aktywność na Discordzie, testy, pracowywanie materiałów, estymowanie zadań. Każda aktywność była opcjonalna i każdy sam wybierał obie, w jaki sposób uzyska punkty potrzebne do zaliczenia kursu. Za przekraczanie kolejnych progów unktowych rozdawaliśmy nagrody 🙂 Dodatkowe lekcje z STL i testowania. W tej edycji temat STLa został trochę bardziej rozszerzony oprzez dodatkowe lekcje online. Temat testowania również został dodatkowo przerobiony na zajęciach w ormie Coding Dojo. Lekcje online. Ta edycja zawierała także spotkania online, które były transmitowane na żywo na ouTube. Została na nich rozszerzona tematyka biblioteki standardowej STL. Dwóch trenerów. Nie byłem już jedynym trenerem na tym kursie. Swoją wiedzą dzielił się także hor, dzięki czemu kursanci mieli możliwość poznania różnych perspektyw na niektóre tematy. Przy zakończeniu trzeciej edycji kursu C++ opisywałem, jakie będą plany na czwartą edycję. Ten opis możecie znaleźć tutaj. Jedyną rzeczą, której nie udało się do końca zrealizować było otworzenie dodatkowej grupy od podstaw. Z mojej strony nie było czasu na prowadzenie dodatkowej grupy i przygotowywanie nowych materiałów. ","date":"2019-10-15","objectID":"/post/edycja-letnia-2019-kursu-cpp-zakonczona/:2:0","tags":["c++","programowanie","kurs","wrocław","podsumowanie"],"title":"Edycja letnia 2019 kursu C++ zakończona","uri":"/post/edycja-letnia-2019-kursu-cpp-zakonczona/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Wrażenia kursantów Bardzo mnie cieszy, że nigdy jeszcze nie było żadnej negatywnej opinii o kursie. Pojawiają się oczywiście ciągle propozycje usprawnień, za które jestem niesamowcie wdzięczny, bo to one pozwalają rozwijać kurs tak, aby był jeszcze lepszy. Kurs w obecnej formie jest już jednak dość dobrze dopracowany. Gdybym miał się podzielić informacjami zwrotnymi, które dostałem od kursantów to potrzebaby było na nie bardzo dużo miejsca. Zamieszczę jednak zrzut ekranu z jednego pytania ankietowego na temat ogólnej oceny kursu. 3 oznacza, że kurs był zgodny z oczekiwaniami. Ocena 5 oznacza, że kurs znacznie przewyższył oczekiwania kursantów. 40 osób które odpowiedziało na to pytanie to uczestnicy wszystkich edycji tego kursu, nie tylko obecnej. ","date":"2019-10-15","objectID":"/post/edycja-letnia-2019-kursu-cpp-zakonczona/:3:0","tags":["c++","programowanie","kurs","wrocław","podsumowanie"],"title":"Edycja letnia 2019 kursu C++ zakończona","uri":"/post/edycja-letnia-2019-kursu-cpp-zakonczona/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Kolejna edycja? Część osób pytała o kurs C++ już po zamknięciu zapisów. Wcześniej pisałem, że będzie to ostatnia edycja kursu C++. Na chwilę obecną nie jest zaplanowana kolejna edycja, pomimo coraz większego sukcesu tego kursu. Teraz będę skupiał sie na stworzeniu kursu C++ online, a prawdopodobnie pod koniec przyszłego roku otworzę także zapisy na stacjonarną edycję kursu C++ we Wrocławiu, ale w trochę innej odsłonie. Stay tuned 😉 Zachęcam do śledzenia strony Coders School na Facebooku. Jeśli nie chcesz, aby informacja o zapisach Ci umknęła, polecam zostawić e-mail w newsletterze. ","date":"2019-10-15","objectID":"/post/edycja-letnia-2019-kursu-cpp-zakonczona/:4:0","tags":["c++","programowanie","kurs","wrocław","podsumowanie"],"title":"Edycja letnia 2019 kursu C++ zakończona","uri":"/post/edycja-letnia-2019-kursu-cpp-zakonczona/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Organizuję ostatnią edycję kursu C++ w Coders School. W przyszłości raczej nie planuję już organizować kolejnej edycji stacjonarnej we Wrocławiu, więc jeśli interesuje Cię ten kurs, to może być dla Ciebie ostatnia okazja. Poniżej znajdziesz mnóstwo informacji odnośnie kursu. Gdyby te informacje nie były wystarczające to odsyłam Cię jeszcze na stronę kursu oraz do FAQ. ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:0:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Harmonogram kursu C++ Ostatnia edycja kursu C++ będzie trwała przez 3 miesiące – lipiec, sierpień i wrzesień. Chcę utworzyć co najmniej 2 grupy: grupa weekendowa – zajęcia w soboty i niedziele (10:00) grupa wieczorowa – zajęcia w poniedziałki i wtorki (16:30) Czasy trwania zajęć są różne. Pierwsze 3 zajęcia będą wspólne dla obu grup. Odbędą się one w pierwsze 3 soboty lipca (6, 13 i 20 lipca) i trwać będą po 5 godzin. Pozostałe zajęcia będą trwać zazwyczaj po 3,5 godziny. Zobacz dokładny harmonogram zajęć ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:1:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Tematyka zajęć Narzędzia programisty Podstawy C++ Obiektowy C++ Biblioteka STL i złożoność obliczeniowa Testowanie kodu Zarządzanie pamięcią Nowoczesny C++ Dobre praktyki programistyczne Szablony Wybrane wzorce projektowe Rekrutacja w branży IT ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:2:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Cena kursu W tej edycji jest kilka wariantów cenowych kursu C++. Oto one: 2399 zł – za wpłatę zaliczki do 17 czerwca 2019 włącznie 2499 zł – za wpłatę zaliczki od 18 czerwca do 24 czerwca 2019 włącznie 2599 zł – za wpłatę zaliczki od 25 czerwca ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:3:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Wpłata zaliczki Aby mieć zarezerwowane miejsce musisz dokonać wpłaty zaliczki. Zaliczkę w wysokości 600 zł możesz wpłacić póki co tylko przelewem on-line. Dane do przelewu dostaniesz na email po wypełnieniu formularza zgłoszeniowego. Kliknij, aby przejść do formularza zgłoszeniowego ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:4:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Faktura za płatność Faktura za dokonaną płatność zostanie wystawiona i przesłana w formie elektronicznej na twój adres e-mail najpóźniej 1 lipca 2019. Znajdą się niej Twoje dane adresowe z przelewu bankowego. Jeśli chcesz, aby faktura została wystawiona na inne dane lub na firmę to prześlij mi proszę te dane. ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:5:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Wpłata pozostałej kwoty Pozostała kwota może zostać wpłacona w całości do 22 lipca 2019 lub możesz dokonywać płatności ratalnych za kurs Terminy opłat ratalnych: 22 lipca 2019 – 600 zł 19 sierpnia 2019 – 600 zł 16 września 2019 – pozostała kwota (599 zł w najniższej cenie) ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:6:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Czy mogę wpłacić całość jako zaliczkę? Ta edycja kursu C++ będzie mieć trochę inną formułę niż poprzednie edycje. Pierwsze 3 lekcje są wspólne dla wszystkich kursantów, niezależnie od preferowanej grupy. Bazując na mojej wiedzy i doświadczeniu z poprzednich grup wiem, że kilka osób zdecyduje się zrezygnować z kursu (z różnych powodów, zarówno osobistych jak i takich, że nie znajdują czasu na pracę własną nad C++). Zaliczkę traktuję jako opłatę za pierwsze 3 lekcje kursu. Na każdej z tych lekcji będzie duża ilość nowych informacji. Stopień trudności tematu będzie rósł i lekcja z Obiektowego C++ będzie już trudniejsza. Jeśli po tych 3 lekcjach uznasz, że nie dasz rady poświęcać czasu w domu na naukę C++, to możesz wtedy zrezygnować nie wnosząc pozostałej opłaty za kurs. Z tego też powodu wolę, aby na początku wpłacona była tylko zaliczka, bo nie muszę wtedy wykonywać zwrotów. Poziom trudności całej reszty lekcji jest względny. Wiele osób uważa, że STL jest łatwym i bardzo przyjemnym tematem, więc aby zrealizować ten kurs w zakresie podstawowym polecałbym jeszcze uczestniczenie w tych zajęciach. ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:7:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Rezygnacja z kursu Z kursu możesz zrezygnować w dowolnym momencie. Poniesiesz wtedy opłatę proporcjonalną do ilości zajęć, które odbyły się do momentu rezygnacji. Przykładowo jeśli zrezygnujesz w połowie kursu, to zapłacisz połowę jego ceny. W przypadku rezygnacji nie otrzymasz certyfikatu ukończenia szkolenia. ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:8:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Nieobecność na zajęciach Nasze zajęcia będą nagrywane. Na nagraniu na pewno będzie głos trenera oraz obraz z laptopa trenera. Jeśli więc opuścisz zajęcia, to możesz je obejrzeć i przerobić materiał w późniejszym terminie. Jeśli wolisz naukę z trenerem to możesz przyjść na zajęcia do drugiej grupy, o ile tylko mnie o tym wcześniej powiadomisz, bo muszę znać liczbę uczestników w celu przygotowania materiałów i ustawienia sali szkoleniowej. ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:9:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Jak zapisać się na kurs? Wypełnij formularz zgłoszenia zainteresowania i wpłać zaliczkę. Im szybciej tym lepiej, liczba miejsc jest ograniczona. Kliknij, aby przejść do formularza zgłoszeniowego ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:10:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Stacjonarny Kurs C++"],"content":"Co dalej? Są dwa darmowe kursy online, które polecam zrealizować każdemu przed moim kursem. Dzięki temu mam pewność, że każdy ma wymagane przeze mnie podstawy i nie spędzimy za dużo czasu na ich omawianiu, bo można się ich na uczyć za darmo z internetu. Polecane przez mnie kursy to: Kurs C++ Mirosława Zelenta oraz Kurs Obiektowy C++ Mirosława Zelenta. Jeśli masz jakieś pytania odnośnie kursu to możesz się ze mną skontaktować za pomocą tego formularza. Chętnie na nie odpowiem 🙂 ","date":"2019-06-07","objectID":"/post/ostatnia-edycja-kursu-cpp/:11:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Ostatnia edycja kursu C++","uri":"/post/ostatnia-edycja-kursu-cpp/"},{"categories":["Post","Wielowątkowość"],"content":"Jesteśmy już po pierwszej edycji kursu Wielowątkowość w C++. Był to zupełnie nowy kurs, przygotowany od zera w głównej mierze przeze mnie, ale nie tylko. W premierowej edycji mini kursu z Wielowątkowości w C++ wzięło udział 12 osób. Większość z nich stanowili już dotychczasowi kursanci, który ukończyli Kurs C++ lub mini kurs z STLa i postanowili jeszcze bardziej rozwinąć swoje umiejętności. W ciągu 4 spotkań omówiliśmy i przećwiczyliśmy mnóstwo zagadnień. Pokryliśmy praktycznie całą część biblioteki standardowej związanej z wielowątkowością w standardzie C++17. ","date":"2019-05-22","objectID":"/post/wielowatkowosc-w-cpp-podsumowanie-mini-kursu/:0:0","tags":["c++","mini kurs","wielowątkowość","wrocław","podsumowanie"],"title":"Wielowątkowość w C++ 2019 – podsumowanie mini kursu","uri":"/post/wielowatkowosc-w-cpp-podsumowanie-mini-kursu/"},{"categories":["Post","Wielowątkowość"],"content":"Tematyka mini kursu Wielowątkowość w C++ Teoria wielowątkowości` Wątki (std::thread)` Współdzielenie danych (std::mutex, std::lock_guard, std::unique_lock, std::shared_lock,std::scoped_lock, std::lock)` Zmienne warunku (std::condition_variable)` Zmienne atomowe i model pamięci (std::atomic)` Jednokrotne wywołania (std::call_once, std::once_flag)` Komunikacja jednokierunkowa (std::promise, std::future)` Funkcje asynchroniczne (std::async, std::packaged_task)` Problemy współbieżności (zakleszczenia, zagłodzenia, problem producenta i konsumenta, problemczytelników i pisarzy, problem ucztujących filozofów)` Testowanie aplikacji współbieżnych` Współbieżne wzorce projektowe (thread pool, active object, proactor, monitor, barrier, scheduler, #8230;)` Standardowo dużo pracy miało miejsce poza spotkaniami. Do zaimplementowania były różne wielowątkowe aplikacje, które miały obrazować problemy na jakie standardowo można się natknąć podczas pisania takich aplikacji. ","date":"2019-05-22","objectID":"/post/wielowatkowosc-w-cpp-podsumowanie-mini-kursu/:1:0","tags":["c++","mini kurs","wielowątkowość","wrocław","podsumowanie"],"title":"Wielowątkowość w C++ 2019 – podsumowanie mini kursu","uri":"/post/wielowatkowosc-w-cpp-podsumowanie-mini-kursu/"},{"categories":["Post","Wielowątkowość"],"content":"Dodatkowy trener Jakiś czas temu zgłosił się do mnie Ihor, który chciał dołączyć do Coders School jako trener. Przeprowadził on lekcję o std::promise i std::future, która została bardzo dobrze odebrana przez uczestników. Ponadto Ihor przeglądał rozwiązania kursantów i sugerował im poprawki oraz czuwał nad jakością moich materiałów szkoleniowych i zgłaszał nieścisłości lub błędy, które udało mu się wychwycić, za co bardzo mu dziękuję 🙂 Zapewne będziemy wspólnie prowadzić 4 edycję Kursu C++, która odbędzie się w te wakacje. ","date":"2019-05-22","objectID":"/post/wielowatkowosc-w-cpp-podsumowanie-mini-kursu/:2:0","tags":["c++","mini kurs","wielowątkowość","wrocław","podsumowanie"],"title":"Wielowątkowość w C++ 2019 – podsumowanie mini kursu","uri":"/post/wielowatkowosc-w-cpp-podsumowanie-mini-kursu/"},{"categories":["Post","Wielowątkowość"],"content":"Kolejna edycja dopiero za rok Kurs zakończył się 5 maja. Kursanci otrzymali certyfikaty ukończenia kursu. Kolejna edycja mini kursu Wielowątkowość w C++ planowana jest dopiero w 2020 roku. Kurs zostanie też uzupełniony o nowości, które pojawią się w bibliotece standardowej C++20. Wszystkim uczestnikom mini kursu Wielowątkowość w C++ bardzo serdecznie dziękuję za wspólnie spędzony czas. Mam nadzieję, że zdobyta wiedza i umiejętności zostaną przez was dobrze spożytkowane 🙂 ","date":"2019-05-22","objectID":"/post/wielowatkowosc-w-cpp-podsumowanie-mini-kursu/:3:0","tags":["c++","mini kurs","wielowątkowość","wrocław","podsumowanie"],"title":"Wielowątkowość w C++ 2019 – podsumowanie mini kursu","uri":"/post/wielowatkowosc-w-cpp-podsumowanie-mini-kursu/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Kolejna edycja kursu C++ już za nami. Kolejni absolwenci podnieśli swój poziom umiejętności programowania w języku C++ 🙂 Od początku stycznia do końca marca 2019 uczyliśmy się wspólnie profesjonalnego programowania w języku C++. Spędziliśmy wspólnie w jednym pomieszczeniu 53 godziny (oraz kilka dodatkowych godzin na integracji przy pizzy i piwie). Kodziliśmy często do późnych godzin nocnych. Dyskusje on-line na naszym grupowym Discordzie trwały do późna. A teraz możemy spokojnie odpocząć 🙂 Kurs ukończyło 9 osób. ","date":"2019-04-05","objectID":"/post/3-edycja-kursu-cpp-zakonczona/:0:0","tags":["c++","kurs","wrocław","programowanie"],"title":"3 edycja kursu C++ zakończona","uri":"/post/3-edycja-kursu-cpp-zakonczona/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Zmiany w 3 edycji kursu C++ Tylko grupa wieczorowa. W tej edycji otworzyłem tylko jedną grupę. Zajęcia 2 razy w tygodniu. We wcześniejszych edycjach nie spotykaliśmy się częściej niż raz na tydzień. W tej edycji na początku spotykaliśmy się 2 razy w tygodniu, a później, gdy potrzeba było więcej czasu do realizacji projektów spotkania odbywały się co tydzień. Poprzednie grupy stwierdziły także, że przerwy między zajęciami dłuższe niż 2 tygodnie działają demotywująco, więc podczas tej edycji była tylko jedna przerwa trwająca dokładnie 2 tygodnie. 3 miesiące. Tyle trwał nasz kurs, ponieważ spotykaliśmy się trochę częściej. Wcześniejsze edycje trwały minimum 4 miesiące. Nagrania wideo z kursów. Od tej edycji zajęcia były nagrywane, więc uczestnicy mogli i dalej mogą oglądać powtórki z zajęć, dzięki czemu mogą bardziej utrwalić sobie wiedzę. W przypadku nieobecności na zajęciach również nie traci się tak wiele. Więcej testów. Udało mi się ułożyć 2 dodatkowe testy, dzięki którym uczestnicy mogli sprawdzać swoją wiedzę z poszczególnych tematów Skrypt do automatycznego sprawdzania poprawności kodu. Udało się stworzyć taki skrypt, ale tylko jedna lekcja została przeprowadzona z jego użyciem. Skrypt wymaga drobnych poprawek. Niestety nie można też zautomatyzować wszystkiego, bo każde zadanie może mieć wiele poprawnych rozwiązań. W przyszłości będę ulepszać skrypt i próbować go zastosować także do pozostałych lekcji. ","date":"2019-04-05","objectID":"/post/3-edycja-kursu-cpp-zakonczona/:1:0","tags":["c++","kurs","wrocław","programowanie"],"title":"3 edycja kursu C++ zakończona","uri":"/post/3-edycja-kursu-cpp-zakonczona/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Tematyka kursu Tematyka kursu nie zmieniła się znacząco od poprzednich edycji. Znalazła się tam tylko dodatkowa lekcja, która w zamierzeniu miała w pewien sposób wyrównać poziom w grupie, ale nad tym trzeba będzie jeszcze popracować 😉 Narzędzia programisty: linux, git, kompilatory, make, cmake, vim Obiektowy C++: abstrakcja, enkapsulacja, dziedziczenie, polimorfizm Biblioteka STL: kontenery, iteratory, funkcje, funktory i lambdy, algorytmy Testowanie: testy jednostkowe, TDD, Google Test, Catch2, debuggowanie Zarządzanie pamięcią: wskaźniki, wycieki pamięci, inteligentne wskaźniki, RAII, Zasada 5, Zasada 0 Nowoczesny C++: C++11, C++14, C++17 Dobre praktyki programistyczne: Clean Code, SOLID, Coding Dojo, Code Review Wybrane wzorce projektowe Wyjątki Szablony ","date":"2019-04-05","objectID":"/post/3-edycja-kursu-cpp-zakonczona/:2:0","tags":["c++","kurs","wrocław","programowanie"],"title":"3 edycja kursu C++ zakończona","uri":"/post/3-edycja-kursu-cpp-zakonczona/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Plany na kolejną edycję Kurs odbędzie się w okresie wakacyjnym Otworzę zapisy na 2 grupy, według dotychczasowej tematyki i poziomu zaawansowania Otworzę także zapisy na grupę od podstaw Zrobię ciekawsze zasady zaliczania i punktowania zadań oparte o grywalizację 🙂 Udoskonalę nagrania wideo z kursu Informacje odnośnie organizacji kolejnego kursu pojawią się na początku maja. Zachęcam do śledzenia strony Coders School (na której właśnie jesteś) lub naszego Facebooka. Jeśli nie chcesz, aby informacja o zapisach Ci umknęła, polecam zostawić e-mail w newsletterze. ","date":"2019-04-05","objectID":"/post/3-edycja-kursu-cpp-zakonczona/:3:0","tags":["c++","kurs","wrocław","programowanie"],"title":"3 edycja kursu C++ zakończona","uri":"/post/3-edycja-kursu-cpp-zakonczona/"},{"categories":["Post","Raport"],"content":"Przyszedł czas na podsumowanie poprzedniego roku. Dlaczego piszę ten wpis dopiero teraz a nie na samym początku roku? Powód jest prosty - mało czasu. Ale myślę, że koniec stycznia jest lepszy na publikację podsumowania niż jego początek. Gdy mija już Blue Monday i większość ludzi łapie doła z powodu słabej realizacji noworocznych postanowień, dobrze jest przysiąść jeszcze raz nad planami na Nowy Rok i bardziej je urealnić. ","date":"2019-01-30","objectID":"/post/podsumowanie-roku-2018/:0:0","tags":["podsumowanie"],"title":"Podsumowanie roku 2018","uri":"/post/podsumowanie-roku-2018/"},{"categories":["Post","Raport"],"content":"Podsumowanie roku 2018 Szkoła Coders School zaczęła oficjalnie działać dokładnie rok temu, czyli w styczniu 2018. Coders School zostało zołożone z mojej inicjatywy, ponieważ bardzo lubiłem szkolić ludzi i dzielić się wiedzą i miałem w tym już niemałe doświadczenie, które zdobyłem pracując na etacie (i nadal pracuję na etacie, ale niepełnym). Otwierając Coders School miałem pewne założenia, które musiałem zrealizować, aby w ogóle przekonać się, czy takie szkolenia otwarte, na które sam muszę uzbierać grupę ludzi mają sens. Na rynku jest trochę szkół programowania, które oferują tzw. bootcampy, czyli bardzo intensywne szkolenia z programowania (40 godzin tygodniowo przez nawet pół roku). Bootcampy szkolą ludzi od zera. Założenia Coders School były inne. Oto one:  Nie szkolę od zera. Osoby przychodzące do nas muszą znać programowanie w akademickim zakresie lub zrobić wcześniej jakiś kurs online, bo nie tłumaczymy jak działają instrukcje warunkowe if, pętle for czy inne podstawowe konstrukcje programistyczne. Otwierając Coders School pracowałem na pełny etat i nie miałem czasu, aby zorganizować kurs od podstaw, bo z jednej strony będzie on niezwykle czasochłonny i angażujący, a z drugiej strony może być lekko frustrujący dla mnie 😉  Skupiam się na języku C++. Mało szkół prowadzi kursy z C++, jest za to ogrom kursów z Javy, Javascriptu, Front-endu. Ja specjalizuję się w C++ i Pythonie.  Osiągnę przychód 27 000 PLN. Nie mam wytłumaczenia dlaczego tyle, po prostu jako początkujący przedsiębiorca uznałem, że jest to kwota poniżej której nie zejdę, bo szkolenia nie będą opłacalne.  Przeszkolę minimum 20 osób. To miało na celu sprawdzenie, czy będę w stanie przyciągnąć wystarczającą liczbę osób.  Zrobię 3 edycje kursu C++. Założenie było takie, aby przeszkolić odpowiednio w każdej edycji 6, 8 i 6 osób.  Ciągły dostęp do mentora, także po kursie. Wolę budować fajne relacje z kursantami, aby nie bali się mnie pytać o dowolne rzeczy związane z programowaniem. Dzięki temu może polecą mnie komuś w przyszłości 🙂 Plany były moim zdaniem realne do osiągnięcia, ale w momencie ich definiowania byłem początkującym przedsiębiorcą. Jak wyszła ich realizacja? Poniżej prezentuję osiągnięcia Coders School w 2018 roku 🙂 ","date":"2019-01-30","objectID":"/post/podsumowanie-roku-2018/:1:0","tags":["podsumowanie"],"title":"Podsumowanie roku 2018","uri":"/post/podsumowanie-roku-2018/"},{"categories":["Post","Raport"],"content":"Kurs C++ 2 edycje 3 grupy 25 absolwentów 150 godzin zajęć ","date":"2019-01-30","objectID":"/post/podsumowanie-roku-2018/:2:0","tags":["podsumowanie"],"title":"Podsumowanie roku 2018","uri":"/post/podsumowanie-roku-2018/"},{"categories":["Post","Raport"],"content":"Szkolenia firmowe 1 firma 4 dni 12 kursantów 24 godziny szkoleń ","date":"2019-01-30","objectID":"/post/podsumowanie-roku-2018/:3:0","tags":["podsumowanie"],"title":"Podsumowanie roku 2018","uri":"/post/podsumowanie-roku-2018/"},{"categories":["Post","Raport"],"content":"Kurs Java 1 edycja 1 grupa 5 absolwentów 50 godzin zajęć We wrześniu do Coders School dołączył Paweł Beder, który przygotował szkolenie z Javy. Dostałem też oferty przygotowania innych szkoleń od innych trenerów, co było dla mnie miłym zaskoczeniem. Dla mnie to oznaka, że to co robię jest zauważane, pozytywnie odbierane przez innych, a także inspirujące 🙂 Odniosę się do wcześniej opisanych założeń i przedstawię je teraz w świetle planów na 2019 rok.  Nie szkolę od zera. Wszystkie przeprowadzone przeze mnie kursy nie były od zera. Oczywiście w każdej grupie zdarzają się ludzie mocniejsi i słabsi, ale program był dopasowywany na bieżąco do potrzeb grup. Niemniej jednak dostaję czasem zapytania o kursy od podstaw. W tym roku nadal nie planuję kursów od zera, ale w ofercie pojawiły się mini kursy, z których część wymaga jedynie podstawowej wiedzy o języku C++. Są też takie, które wymagają bardziej specjalistycznej wiedzy.  Skupiam się na języku C++. W tym roku również ciągniemy głównie C++. Widzę, że pomimo tego, co niektórzy mówią jest na niego bardzo duże zapotrzebowanie, które w przyszłości będzie rosło, chociażby z powodu wprowadzenia WASM (WebAssembly), które pozwoli na odpalanie aplikacji desktopowych przez przeglądarkę.  Osiągnę przychód 27 000 PLN. Dopiero po kilku miesiącach pracy uświadomiłem sobie, że przychód nie jest żadnym wyznacznikiem tego, jak firma prosperuje. Ważniejszy jest dochód, czyli przychód - koszty. Ale cel 27 000 zł przychodu został osiągnięty już w połowie roku, czyli w lipcu 2018 🙂  Przeszkolę minimum 20 osób. Z samego C++ przeszkolonych zostało 25 osób, a z Javy 5 (kurs zakończył się w styczniu 2019)  Zrobię 3 edycje kursu C++. Były 2 edycje. Okazało się, że już przeprowadzenie 2 edycji zrealizowało cele, które stawiałem na początku. Próbowałem mimo to rozpocząć jeszcze jedną edycję w listopadzie, nie było tak dużego zainteresowania. Czas ten poświęciłem na lekkie dopracowanie kursu C++ oraz na odpoczynek.  Ciągły dostęp do mentora, także po kursie. To się bardzo fajnie sprawdzało, ale nie ukrywam, że pochłaniało mi dużo czasu. Wsparcie realizuję poprzez Discorda, gdzie mamy specjalny serwer z podziałem na kanały tematyczne. Obiecam tylko sobie, że trochę mniej czasu spędzę w nocy na odpisywaniu. Zresztą nie tylko ja tam pomagam, bo pomagamy sobie nawzajem w całej grupie. ","date":"2019-01-30","objectID":"/post/podsumowanie-roku-2018/:4:0","tags":["podsumowanie"],"title":"Podsumowanie roku 2018","uri":"/post/podsumowanie-roku-2018/"},{"categories":["Post","Raport"],"content":"Plany na 2019 rok Zrobić co najmniej 1 mini kurs w wersji online Skupić się bardziej na mini kursach zamiast na pełnym kursie C++ Dochód 36 000 zł. To tylko główne cele, są też i cele pomniejsze, takie jak większa aktywność w mediach społecznościowych, czy też automatyzacja procesu zapisów na kursy, ale gdybym miał się podzielić pełną listą pomysłów, to wpis byłby baaaardzo długi 🙂 Jeśli macie jakieś szczególne życzenia albo pomysły, które chętnie byście zobaczyli to zapraszam do komentowania tutaj lub na Facebooku 🙂 Dobrego całego 2019 Roku i pomyślnej realizacji planów. ","date":"2019-01-30","objectID":"/post/podsumowanie-roku-2018/:5:0","tags":["podsumowanie"],"title":"Podsumowanie roku 2018","uri":"/post/podsumowanie-roku-2018/"},{"categories":["Post","Mini kursy"],"content":"Tydzień temu dodaliśmy do naszej oferty nowość, jaką są mini kursy C++. Do tej pory możecie zobaczyć w ofercie 3 takie mini kursy, którymi są: Biblioteka STL i złożoność obliczeniowa, Wielowątkowość w C++ oraz Zarządzanie pamięcią w C++. W produkcji kolejne! Planujemy w ciągu tego roku zrealizować także wiele innych mini kursów o poniższej tematyce: Podstawy C++ (ale nie od zera) Nowoczesny C++ (C++11, C++14, C++17) Testowanie kodu w C++ Szablony C++ devops (narzędzia programisty) Dobre praktyki programistyczne Wzorce projektowe w C++ Optymalizacje i wydajność w C++ Rekrutacja Tematyka oraz terminy tych mini kursów będą sukcesywanie pojawiać się na stronie. Jeśli chcesz dostawać powiadomienia, gdy tylko otworzymy nowy mini kurs to zostaw nam swój adres e-mail. Na tę chwilę można już zapisywać się na ogłoszone mini kursy, jak również na te, które dopiero planujemy. W przypadku, gdy wybrany mini kurs nie jest dostępny na pewno dostaniesz powiadomienie, gdy już go udostępnimy. Idea mini kursów jest taka, aby uzupełnić swoją wiedzę tylko w jednej wybranej dziedzinie C++. Zapisując się na jeden z naszych mini kursów dostaniesz zniżkę w wysokości 10% na wszystkie pozostałe mini kursy C++. Zakres mini kursów jest trochę szerszy niż zakres treści naszego Kursu C++. Uczestnicząc w nich otrzymasz porządną dawkę wiedzy. Jeśli przyswoich informacje ze wszystkich mini kursów, to będziesz mieć odpowiednie przygotowanie, aby pracować na regularnym lub nawet seniorskim stanowisku programisty C++ (musisz oczywiście mieć też doświadczenie zawodowe, aby pracować na takim stanowisku, nie można tak po prostu zacząć jako senior bez doświadczenia). Który mini kurs interesuje Cię najbardziej? Który z nich powinniśmy otworzyć jako kolejny? Wypowiedz się w ankiecie na naszym profilu FB 🙂 ","date":"2019-01-12","objectID":"/post/mini-kursy-c-nasza-nowa-inicjatywa/:0:0","tags":["mini kurs","wielowątkowość","zarządzanie pamięcią","stl","c++"],"title":"Mini kursy C++ – nasza nowa inicjatywa","uri":"/post/mini-kursy-c-nasza-nowa-inicjatywa/"},{"categories":["meetup","wrocław"],"content":"17 grudnia poprowadziliśmy Meetup Nowoczesny C++, na którym uczestniczy mogli zdobyć i poszerzyć wiedzę na temat C++11 i C++14. Były także zadania praktyczne, dzięki którym można było od razu ugruntować nowo poznaną wiedzę. Mówiliśmy o takich rzeczach jak: nullptr aliasy using automatyczna dedukcja typów (auto) zakresowa pętla for po kolekcji nowe słowa kluczowe: default, delete, final, override jednolita inicjalizacja z użyciem {} oraz std::initializer_list\u003cT\u003e smart pointery - unique_ptr i shared_ptr Każdy mógł pracować lokalnie na własnym laptopie używając swojego kompilatora lub też online, gdy pojawiły się jakieś problemy z konfiguracją środowiska poprzez serwis Tech.io. Znajdziecie w nim zadania z naszego Meetupu. Na podstawie informacji zwrotnej od uczestników uzyskaliśmy średnią ocenę 5.0 (max) oraz dowiedzieliśmy się, że było to dla nich przede wszystkim rozwijające doświadczenie oraz możliwość nauki czegoś nowego. W przyszłości będziemy również organizować podobne wydarzenia. Jest to możliwe dzięki naszym kursom programowania, które sponsorują i pokrywają koszty Meetupów. Zapraszamy do zapisania się do naszej grupy na Meetupie (Kurs programowania C++), dzięki czemu będziecie powiadamiani o przyszłych wydarzeniach. W przeszłości organizowaliśmy także Meetup o kontenerach STL. Meetup Nowoczesny C++ oraz ten o STL uczyły w praktyce wiedzy, która powinna mieć osoba aplikująca na stanowisko programisty C++. ","date":"2018-12-27","objectID":"/post/meetup-nowoczesny-cpp/:0:0","tags":["Post","Meetup"],"title":"Meetup Nowoczesny C++","uri":"/post/meetup-nowoczesny-cpp/"},{"categories":["Post","Warto wiedzieć"],"content":"Wokół zawodu programisty narosło wiele mitów, które są powielane przez osoby, nie mające żadnego pojęcia o programowaniu. W tym artykule znajdziesz 10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą. Jeśli nigdy nie pracowałeś jako programista, to zakładam, że większości z tych rzeczy nie jesteś świadomy. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:0:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"1. Uczelnie nie przygotują Cię do zawodu programisty Wykładowcy na uczelniach słabo zarabiają na samym nauczaniu. Najbardziej opłacalne dla nich są granty z projektów badawczych. Ogrom prowadzących ma materiały z programowania nie aktualizowane od kilku do nawet kilkunastu lat. A języki i świat programowania zmieniają się niesamowicie szybko. Prowadzącym zwyczajnie finansowo nie opłaca się aktualizować swoich materiałów. Poza tym nie są praktykami. Nie piszą wcale tak dużo kodu, jeśli ich jedynym pracodawcą jest uczelnia. Uczelnie są jak najbardziej w porządku, ale dają one dość płytką wiedzę z bardzo wielu tematów. Przydaje się to bardzo, aby rozszerzać swoje horyzonty i eksplorować dostępne możliwości, ale nie jest niezbędne, aby zostać programistą. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:1:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"2. Znajomość samego języka programowania nie wystarczy Musisz znać też podstawowe biblioteki i/lub frameworki. Każdy język ma swoje własne najczęściej używane biblioteki. W przypadku C++ taką biblioteką jest STL. Dodatkowo mamy inne, które niekoniecznie już są wykorzystywane wszędzie, jak np. Boost oraz Qt. W przypadku Javy będzie to Spring i Hibernate. Świadomy programista nie tylko zna biblioteki i algorytmy w nich zaimplementowane, ale również potrafi ocenić ich złożoność obliczeniową. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:2:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"3. Musisz znać system kontroli wersji Obecnie standardem jest git. Kodu nie wysyła się mailem, co niestety robią często studenci współpracując w grupach. I nie trzyma się kilku wersji na dysku z dopiskami przy nazwie katalogu “nowe”, “nowsze”, “new”, “newer”, “newest”, “the newest” lub “1”, “2”, “3”… Za trudno się w tym wszystkim połapać. Która to wersja ostatnio dobrze działała? Już tak sobie nabruździłem, że nie wiem jak wrócić do stanu, aby cokolwiek działało. Te wszystkie problemy rozwiązują systemy kontroli wersji. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:3:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"4. Wysokie stawki mają tylko prawdziwi specjaliści Ale średniacy zarabiają i tak dużo powyżej średniej krajowej. Czy wiesz ile możesz zarobić jako junior? Jest wiele mitów odnośnie stawek juniorów. Niektórzy mówią, że pracują jak wszyscy za minimalną krajową. Inni, że już na starcie mogą wyciągnąć 10k. A jaka jest prawda? Jak zawsze prawda leży po środku i stawki w głównej mierze zależą od umiejętności. Znajdziesz juniorów pracujących za grosze oraz takich dużo zarabiających. Ale Ci dobrze zarabiający tworzyli własne projekty, sami dużo się uczyli i po prostu są lepsi od tych juniorów, którzy tylko ukończyli studia. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:4:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"5. Firmy niechętnie rekrutują osoby bez doświadczenia Mówi się, że na polskim rynku brakuje 50 tysięcy specjalistów. 50 tysięcy specjalistów, nie 50 tysięcy byle kogo. A jak zdobyć doświadczenie skoro żadna firma nie chce Cię zatrudnić? Standardowy problem jajka i kury, ale z bardzo prostym rozwiązaniem. Nikt nie mówi, że doświadczenie zdobywa się tylko pracując na etacie. Własne projekty to również jest doświadczenie. Ważne, żeby zrobić coś więcej niż tylko każą na uczelniach. Dzięki temu będziesz mieć coś do pokazania na rozmowie rekrutacyjnej. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:5:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"6. Formatowanie kodu jest niesamowicie ważne Potrafię bezbłędnie powiedzieć czy dany kod napisał student, czy specjalista. Uczelnie z reguły nie przykładają żadnej wagi do poprawnego formatowania kodu. Wyjątkiem może być tutaj język Python, w którym sama składnia języka wymusza jego formatowanie. Dbanie o tzw. Clean Code jest domeną doświadczonych i szanujących się programistów. Ile razy zdarzyło Ci się usiąść nad kodem, który napisałeś tydzień temu i stwierdziłeś, że go nie rozumiesz? Są pewne wytyczne pisania dobrego kodu, które w jednym zdaniu można opisać tak: kod jest dobry, jeśli potrafi go zrozumieć Twoja babcia. Niestety na uczelniach Ci o tym nie powiedzą. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:6:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"7. Znajomość testowania oprogramowania jest kluczowa Wystarczą zwykle testy jednostkowe. Program bez testów nie działa poprawnie. To założenie jest zawsze prawdziwe. Bo w jaki sposób udowodnisz, że program działa? Czy uważasz że jesteś w stanie przewidzieć wszystkie sytuacje w kodzie i uodpornić się na nie? Ja nie jestem. Tym bardziej jeśli program ma być rozwijany i często trzeba go modyfikować. Jeśli nie masz porządnego zestawu testów automatycznych, to nigdy nie możesz mieć pewności, że nie zepsułeś czegoś co wcześniej działało. Dlatego kluczowe jest pisanie testów do swoich programów. Naucz się najpopularniejszego frameworka do testów jednostkowych w Twoim języku. Dla C++ najpopularniejsze obecnie są Google Test oraz Catch. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:7:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"8. W miarę upływu czasu zauważysz, że wybrany język programowania nie jest ważny Ważna jest bardzo dobra znajomość inżynierii oprogramowania, czyli zasad pisania kodu i wytwarzania oprogramowania uniwersalnych i niezależnych od wybranego języka, takich jak SOLID. Oczywiście sam język trzeba znać i wiedzieć na co pozwala i jakie są dobre praktyki. Ale język to tylko narzędzie i zapewne w swojej karierze zdarzy Ci się programować w kilku różnych językach. Mając dobrze opanowaną inżynierię oprogramowania bez problemu przestawisz się na inny język. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:8:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"9. Potrzebujesz naprawdę dużo czasu, aby dobrze opanować programowanie Nie wystarczy, że napiszesz Hello World w danym języku i już go sobie wpiszesz do CV. Nauka programowania naprawdę jest czasochłonna i wymaga regularności. To tak samo jak z nauką języków obcych. Nie można się ich nauczyć przez tydzień. Dlatego jeśli nie dysponujesz przynajmniej 1 godziną dziennie, którą możesz poświęcić na programowanie, to nie ma sensu nawet zaczynać. Serio. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:9:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"10. Nauka programowania wymaga dużo praktyki Samo czytanie książek o programowaniu nie spowoduje, że poznasz programowanie. Samo obejrzenie kursu online również. Musisz po prostu pisać programy. W ten sposób zyskujesz doświadczenie. Nie bez powodu w poprzednim punkcie napisałem, że przydałaby się ta 1 godzina dziennie na programowanie. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:10:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Post","Warto wiedzieć"],"content":"Podsumowanie To koniec mojej listy, ale te 10 punktów nie wyczerpuje tematu. Na pewno nie chcę nikogo zniechęcić do zostania programistą. W końcu prowadząc kursy programowania dla osób mniej doświadczonych ode mnie, zarabiam 🙂 Jeśli po lekturze tej listy nadal chcesz być programistą, to bardzo się cieszę. Najważniejsze jest to, aby ta decyzja była świadoma. Jeśli Twoją jedyną motywacją są duże zarobki, to wiem, że nie uda Ci się zostać programistą, bo braknie Ci motywacji. Tutaj niestety trzeba poświęcić dużo czasu. Ale dla większości osób, które już zaczną, często przeradza się to w pasję, dzięki której mają to co najważniejsze motywację. Polecam Ci też lekturę wpisu Od zera do developera z bloga Samouczek Programisty. Porusza on tę samą tematykę co ten artykuł. ","date":"2018-12-12","objectID":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/:11:0","tags":["nauka","programowanie","mity"],"title":"10 rzeczy, które powinieneś wiedzieć, jeśli chcesz być programistą","uri":"/post/10-rzeczy-ktore-powinienes-wiedziec-jesli-chcesz-byc-programista/"},{"categories":["Warto wiedzieć"],"content":"Poniższe pytania i odpowiedzi odnoszą się do kursu stacjonarnego C++. Jeśli interesuje Cię kurs online, to przeczytaj FAQ na stronie kursu online Jak wyglądają zapisy na kurs? Wypełniasz formularz zgłoszeniowy na dany kurs Dostaniesz na maila do wypełnienia test wstępny z C++. Przy jego wypełnianiu MOŻESZ posiłkować się Internetem. Jeśli uzyskasz min. 50% to kwalifikujesz się na kurs Do 14 dni po zgłoszeniu przysyłasz swoją implementację rozwiązania prostego problemu, który otrzymasz w mailu. Przykład: konwersja liczby z systemu dziesiętnego na binarny lub wyszukiwanie ciągu znaków w tekście Do podanego terminu wpłacasz zaliczkę Widzimy się na pierwszych zajęciach Czy podpisujemy umowę szkoleniową? Tak. Umowę szkoleniową dostaniesz przed pierwszymi zajęciami, abyś mógł się z nią zapoznać. Na pierwszych zajęciach podpisujemy umowę. W jaki sposób mogę wpłacić zaliczkę? Na chwilę obecną udostępniamy tylko przelew bankowy. Dane do przelewu wysyłamy po zgłoszeniu zainteresowania, ale znajdziesz je też w dziale Kontakt. Oferujemy także szybkie płatności online, takie jak BLIK. Czy mogę zapłacić za kurs w ratach? Tak. Domyślnie zakładamy comiesięczne raty. Informacja o terminach wpłat oraz wysokości rat jest wysyłana w mailu po zgłoszeniu zainteresowania. Zazwyczaj jest to cena kurs / liczbę rat. Czy oferujecie jakieś zniżki na kurs? To zależy od kursu. Kurs może być tańszy niż cena podana w cenniku w kilku przypadkach: Opłacisz cały kurs z góry (rabat 5%) Zostałeś polecony przez naszego kursanta lub absolwenta Uczestniczyłeś w innym naszym kursie (rabat indywidualny w zależności od kursu) Jesteś zapisany na nasz newsletter (indywidualne promocje dla subskrybentów) Szczegóły znajdziesz przy każdym kursie. Co jeśli się rozmyślę i zrezygnuję z kursu po wpłaceniu zaliczki? Możesz bezproblemowo zrezygnować z kursu nawet po pierwszych zajęciach. Dostaniesz wtedy zwrot całej wpłaconej kwoty, bez jakichkolwiek potrąceń. W przypadku kursu online oferujemy możliwość bezpłatnej rezygnacji aż do 30 dni od rozpoczęcia kursu. Czy mogę zrezygnować z kursu w czasie jego trwania? Tak. W przypadku rezygnacji w późniejszym momencie dostaniesz zwrot kwoty proporcjonalny do liczby odbytych zajęć. Np. w przypadku rezygnacji w połowie kursu zapłacisz tylko połowę jego ceny. Musisz też wiedzieć, że rezygnując z kursu nie dostaniesz certyfikatu jego ukończenia. Czy po kursie dostanę certyfikat? Tak, jeśli uzyskasz minimalną wymaganą liczbę punktów. Na dodatku do certyfikatu będą też widoczne wszystkie przerobione przez nas tematy, dzięki czemu potencjalni pracodawcy będą widzieć, z jakich zagadnień Cię przeszkoliliśmy. Jakie warunki muszę spełnić, aby uzyskać certyfikat? Głównym wyznacznikiem jest tutaj przyswojenie wiedzy i umiejętności, które przekazujemy. Wiedzę sprawdzamy w testach. Umiejętności sprawdzamy w zadaniach domowych, projektach grupowych i indywidualnych. Wystarczy, że nie będziesz się obijać, będziesz odrabiać post-worki i pre-worki i naprawdę chcesz się nauczyć programowania. Czy oferujecie pracę po kursie? Nie. Nasz kurs nie jest w żaden sposób powiązany z rekrutacją na jakieś stanowiska. Jego celem jest, abyś mógł/mogła bez problemu przejść rozmowy kwalifikacyjne w dowolnej firmie, która będzie poszukiwać programistów C++. To co oferujemy to polecenia do ciekawych projektów we wrocławskich firmach. Nie ukrywamy, że polecenia w tej branży są płatne i jeśli dzięki nam dostaniecie gdzieś pracę, to my również możemy za to dostać gratyfikację. Zastrzegamy sobie możliwość polecania tylko tych osób, które zaangażowały się w kurs i faktycznie przyswoiły większość przekazanej przez nas wiedzy. Jakie materiały (ksiażki, kursy) polecacie do samodzielnej nauki C++? Nie polecamy żadnych książek 🙂 Jeśli ktoś bardzo chce poznać podstawy C++, to polecamy przejrzeć stronę Materiały do nauki C++. Są tam 2 pozycje godne polecenia początkującym. Opus Magnum C++11 Jerzego Grębosza oraz Programowanie. Teoria i praktyka Bjarne Stroustrupa. Z trochę bardziej zaawansowanego C++ i dobrych praktyk polecamy wszystkie książki Scotta Meyersa: Effective C++, More Effective C++, Effective STL i Effective Modern C++. Są bardzo przystępnie napisane i można się z nich nauczyć dobrych praktyk w języku C++. Są też dostępne w języku polskim. Co do kursów online to każdemu zalecamy przynajmniej przejrzenie Kursu C++ Mirosława Zelenta i Kursu Obiektowego C++ (ten jest ważniejszy) tego samego autora. Trzeba zaznaczyć, że te kursy nie są aktualne i miejscami prezentują złe praktyki. Ale wychodzimy z założenia, że lepsza jest ogólna znajomośc języka, którą dają niż jej brak. Czy mogę dostać fakturę za wasz kurs? Tak, za opłacenie kursu dostaniesz fakturę (zwolnioną z podatku VAT). Czy poziom kursu jest bardzo zaawansowany? Z perspektywy trenera i doświadczonego programisty – nie. Z perspektywy studenta tak. W wymaganiach opisujemy, co musisz potrafić, aby przystąpić do naszego kursu. Mamy też test wstępny i jeśli go zaliczysz, to nie powinieneś/-aś mieć problem","date":"2018-12-05","objectID":"/faq/:0:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"FAQ","uri":"/faq/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Dwie grupy kursantów właśnie ukończyły kurs programowania w języku C++ w Coders School. Rekruterzy, mam niezwykle mocnych kandydatów na stanowiska juniorskie (a nawet wyższe), którzy wiedzą i doświadczeniem przebiją studentów uczelni wyższych. Letnia edycja kursu programowania C++ rozpoczęła się w lipcu, a zakończyła właśnie teraz, wraz z końcem października. O rozpoczęciu kursu informowałem tutaj. Przez 4 miesiące wspólnie uczyliśmy się o szczegółach działania i używania języka C++ takich jak: obiektowość w C++ biblioteka STL - kontenery, iteratory, funktory, algorytmy nowoczesny C++ - C++11, C++14, C++17 zarządzanie pamięcią - smart pointery, wycieki pamięci, valgrind testowanie z bibliotekami gtest, gmock, catch szablony Jednakże większa część tematów nie była związana ściśle z językiem C++, lecz z szeroko pojętą inżynierią oprogramowania, do której zaliczały się: narzędzia programisty - git, make, cmake, kompilatory, vim programowanie zorientowane obiektowo testowanie kodu - testy jednostkowe, TDD debuggowanie z użyciem konsolowego debuggera gdb wzorce projektowe zasady Clean Code - SOLID, DRY, KISS, YAGNI dobre praktyki programistyczne - Continuous Integration, Code Review, Coding Dojo, Pair Programming Ale sama wiedza to nic. W dzisiejszych czasach bez doświadczenia znalezienie pracy jako programista jest niesamowicie trudne. Na szczęście w czasie trwania kursu wiedza była utrwalana u kursantów poprzez projekty grupowe. Praca w nich była zorganizowana w metodologii Scrum. Pracowaliśmy zespołowo współdzieląc kod na GitHubie. Zaznaczę też bardzo ważną rzeczą - nasi absolwenci kursu C++ mieli wcześniej wiedzę programistyczną, także tę na temat programowania obiektowego. Nasz kurs nie był od zera, tak jak większość popularnych dzisiaj kursów. Wymagana była uczelniana wiedza na temat programowania. Na kursie poszerzyliśmy tę wiedzę przygotowując kursantów z tematyki wymaganej przez każdego pracodawcę, który poszukuje programistów C++. Absolwenci kursu są w większości chętni do podjęcia pracy od zaraz. Jeśli poszukujesz bardzo mocnych kandydatów na stanowisko młodszego programisty C++ to zapraszam do kontaktu. Warto się spieszyć, gdyż niektórzy z kursantów dostali już pracę podczas trwania kursu 🙂 ","date":"2018-10-30","objectID":"/post/absolwenci-kursu-cpp-gotowi-do-pracy/:0:0","tags":["absolwenci","c++","kurs","praca","wrocław","podsumowanie"],"title":"Absolwenci kursu C++ gotowi do pracy","uri":"/post/absolwenci-kursu-cpp-gotowi-do-pracy/"},{"categories":["Post","Konsultacje"],"content":"Dlaczego oferujemy darmowe konsultacje? Odpowiadamy na potrzeby, z którymi zgłaszają się do nas osoby pragnące zostać programistami C++. Wiele z tych osób chciałoby mieć możliwość zapytania przede wszystkim o to, czego powinni się uczyć oraz czy “dobre praktyki”, które są wykładane na uczelniach faktycznie mają zastosowanie w prawdziwych projektach. Coraz więcej osób chcących zostać programistami jest świadoma tego, że wiele informacji, które są dostępne za darmo w internecie często jest ze sobą sprzecznych. Poprzez ich ogrom cieżko jest wybrać właściwą ścieżkę. My pracujemy w prawdziwych projektach i potrafimy wskazać, czego warto się uczyć i w którą stronę podążać. Pragnąc odpowiedzieć na te potrzeby wychodzimy z inicjatywą i oferujemy darmowe konsultacje z języka C++ 🙂 ","date":"2018-10-06","objectID":"/post/darmowe-konsultacje-z-cpp/:1:0","tags":["c++","konsultacje","programowanie"],"title":"Darmowe konsultacje z C++","uri":"/post/darmowe-konsultacje-z-cpp/"},{"categories":["Post","Konsultacje"],"content":"Jak się zgłosić? Jeśli chcesz skorzystać z darmowych konsultacji, na których spotkasz się z profesjonalnym programistą C++ i przez godzinę w luźnej atmosferze będziesz mógł zapytać o dowolną rzecz związaną z językiem C++ to musisz jedynie wypełnić naszą ankietę. Pytamy w niej o takie rzeczy, dzięki którym nie zmarnujemy za dużo czasu na spotkaniu na zapoznanie się z tym, co chciałbyś z tego spotkania wynieść. Pytamy tam o Twoje doświadczenie w C++ i rodzaj problemów z którymi do nas przychodzisz. Po wypełnieniu ankiety otrzymasz na maila odpowiedź w ciągu 48 godzin z proponowanymi terminami spotkań. ","date":"2018-10-06","objectID":"/post/darmowe-konsultacje-z-cpp/:2:0","tags":["c++","konsultacje","programowanie"],"title":"Darmowe konsultacje z C++","uri":"/post/darmowe-konsultacje-z-cpp/"},{"categories":["Post","Konsultacje"],"content":"Do kogo kierujemy tę ofertę? Dla każdego. Zapraszamy Cię, jeśli tylko: masz problem z językiem C++, potrzebujesz dowiedzieć się, które rozwiązanie będzie lepsze, chcesz wiedzieć jakie są dobre praktyki, potrzebujesz porad rekrutacyjnych, chcesz się po prostu spotkać i pogadać o C++. Konsultacje trwają 1 godzinę i możesz w tym czasie zapytać o dowolną rzecz związaną z C++. Gwarantujemy, że dostaniesz wtedy mnóstwo wiedzy. Szczególnie zachęcamy studentów, którzy poważnie myślą o karierze jako programista C++. Ponadto, zapraszamy każdego, komu potrzebny jest obecnie język C++ oraz każdego, kto wiąże swoją przyszłośc z tym językiem. Spotkania odbywają się na terenie Wrocławia. Możemy umówić się w kawiarni lub w biurze coworkingowym. Z darmowych konsultacji można skorzystać tylko raz. Zgłoś się na darmowe konsultacje ","date":"2018-10-06","objectID":"/post/darmowe-konsultacje-z-cpp/:3:0","tags":["c++","konsultacje","programowanie"],"title":"Darmowe konsultacje z C++","uri":"/post/darmowe-konsultacje-z-cpp/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"UWAGA: Aktualizacja. Terminy przesunięte na styczeń-marzec 2019 Udostępniamy wam dzisiaj wstępne harmonogramy kursu C++, który odbywał się będzie w formie stacjonarnej we Wrocławiu. Zaczęliśmy już przyjmować zgłoszenia na kurs, nadal mamy jeszcze wolne miejsca. Pierwsze informacje o kursie opisywaliśmy tutaj. UWAGA: Aktualizacja. Terminy przesunięte na styczeń-marzec 2019 ","date":"2018-09-10","objectID":"/post/harmonogramy-kursu-cpp-w-edycji-listopadowej/:0:0","tags":["c++","kurs","programowanie","wrocław","harmonogram"],"title":"Harmonogramy kursu C++ w edycji styczniowej 2019","uri":"/post/harmonogramy-kursu-cpp-w-edycji-listopadowej/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Grupa weekendowa zajęcia w soboty w godzinach 10:00-15:00 rozpoczęcie kursu 12 stycznia 2019 koniec kursu 16 marca 2019 ","date":"2018-09-10","objectID":"/post/harmonogramy-kursu-cpp-w-edycji-listopadowej/:1:0","tags":["c++","kurs","programowanie","wrocław","harmonogram"],"title":"Harmonogramy kursu C++ w edycji styczniowej 2019","uri":"/post/harmonogramy-kursu-cpp-w-edycji-listopadowej/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Grupa wieczorowa zajęcia we wtorki i poniedziałki w godzinach 16:30-20:00 rozpoczęcie kursu 8 stycznia 2019 koniec kursu 19 marca 2019 ","date":"2018-09-10","objectID":"/post/harmonogramy-kursu-cpp-w-edycji-listopadowej/:2:0","tags":["c++","kurs","programowanie","wrocław","harmonogram"],"title":"Harmonogramy kursu C++ w edycji styczniowej 2019","uri":"/post/harmonogramy-kursu-cpp-w-edycji-listopadowej/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Terminarz zajęć dla grupy weekendowej 12.01 - narzędzia programisty (6h) 19.01 - wyrównanie wiedzy - podstawy C++ i obiektowy C++ (6h) 26.01 - STL - kontenery, projekt 1 02.02 - STL algorytmy 09.02 - Testowanie kodu, poprawki projektu 1 + testy 16.02 - Zarządzanie pamięcią - projekt 2 23.02 - Nowoczesny C++ 02.03 - Dobre praktyki, Coding Dojo (6h) 09.03 - Szablony, wzorce projektowe, powtórka 16.03 - Rekrutacja ","date":"2018-09-10","objectID":"/post/harmonogramy-kursu-cpp-w-edycji-listopadowej/:3:0","tags":["c++","kurs","programowanie","wrocław","harmonogram"],"title":"Harmonogramy kursu C++ w edycji styczniowej 2019","uri":"/post/harmonogramy-kursu-cpp-w-edycji-listopadowej/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Terminarz zajęć dla grupy wieczorowej 08.01 - narzędzia programisty (git, vim) 14.01 - narzędzia programisty (kompilatory, make, cmake) 15.01 - wyrównanie wiedzy - podstawy C++ (operatory, wskaźniki, referencje, słówka kluczowe, wyjątki) 21.01 - wyrównanie wiedzy - obiektowy C++ (konstruktory, dziedziczenie, polimorfizm, funkcje wirtualne, problem diamentowy) 22.01 - STL kontenery sekwencyjne, projekt 1 04.02 - STL reszta kontenerów, iteratory, funktory, lambdy 05.02 - STL algorytmy, wstęp do testowania, poprawki projektu 1 + testy 11.02 - TDD, mocki, stuby, dummy, gdb 12.02 - Zarządzanie pamięcią, projekt 2 19.02 - Nowoczesny C++ #1 26.02 - Nowoczesny C++ #2 05.03 - Dobre praktyki programistyczne, Coding Dojo 12.03 - Szablony, wzorce projektowe, powtórka 18.03 - Powtórka, rekrutacja 19.03 - Rekrutacja Zastrzegamy możliwość zmiany harmonogramów. Jeśli chcesz zostać kompetentnym i wszechstronnym programistą lepszym niż absolwenci uczelni technicznych to zapraszamy do nas 🙂 Pomożemy Ci zabłysnąć na rozmowie o pracę. Zapisy przyjmujemy poprzez formularz dostępny na naszej stronie. ","date":"2018-09-10","objectID":"/post/harmonogramy-kursu-cpp-w-edycji-listopadowej/:4:0","tags":["c++","kurs","programowanie","wrocław","harmonogram"],"title":"Harmonogramy kursu C++ w edycji styczniowej 2019","uri":"/post/harmonogramy-kursu-cpp-w-edycji-listopadowej/"},{"categories":["kurs c++","kurs","Nokia Garage","programowanie","wrocław"],"content":"Z początkiem lipca w Coders School wystartowała kolejna edycja Kursu C++ dedykowanego dla osób, które chcą zostać młodszymi programistami C++. O samym kursie pisaliśmy już wcześniej np. tutaj. ","date":"2018-08-08","objectID":"/post/wystartowala-edycja-wakacyjna-kursu-c/:0:0","tags":["Post","Stacjonarny kurs C++"],"title":"Wystartowała edycja wakacyjna kursu C++","uri":"/post/wystartowala-edycja-wakacyjna-kursu-c/"},{"categories":["kurs c++","kurs","Nokia Garage","programowanie","wrocław"],"content":"Zakres kursu C++ Kurs obejmuje zagadnienia związane z ogólnie pojętą inżynierią oprogramowania. Są to zasady uniwersalne dla każdego języka programowania, takie jak: użycie odpowiednich narzędzi (git, vim, make cmake), pisanie czystego kodu, standardy formatowania, obiektowość używanie wyjątków, wzorce projektowe, testowanie, złożoność obliczeniowa, Scrum. Uczymy się na przykładzie języka C++, a więc zgłębiamy także rzeczy specyficzne dla tego języka, przede wszystkim: bibliotekę standardową STL, zarządzanie zasobami, nowoczesny C++ (C++11, C++14, C++17). Zakończeniem kursu jest przygotowanie uczestników do rozmów rekrutacyjnych poprzez omówienie, czego mają się spodziewać i jak się dobrze przygotować do takich rozmów. ","date":"2018-08-08","objectID":"/post/wystartowala-edycja-wakacyjna-kursu-c/:1:0","tags":["Post","Stacjonarny kurs C++"],"title":"Wystartowała edycja wakacyjna kursu C++","uri":"/post/wystartowala-edycja-wakacyjna-kursu-c/"},{"categories":["kurs c++","kurs","Nokia Garage","programowanie","wrocław"],"content":"Dwie grupy Ta edycja kursu C++ obejmuje aż 2 grupy – wieczorową oraz weekendową. Spotykamy się odpowiednio w środy w godzinach 16:30-20:00 lub co drugą niedziele w godzinach 10:00-15:00. Każde z zajęć mają odmienną formę. Na niektórych z nich robimy programowanie w parach, na innych programowanie w większych grupach, na jeszcze innych tzw. Coding Dojo. Robimy też spotkania Scrumowe takie jak daily, retrospektywy czy review. Słowem - wszystko czego absolwenci uczelni lub osoby uczące się samodzielnie nie wiedzą jeszcze o pracy programisty, a na pewno będzie im to potrzebne w przyszłej pracy. ","date":"2018-08-08","objectID":"/post/wystartowala-edycja-wakacyjna-kursu-c/:2:0","tags":["Post","Stacjonarny kurs C++"],"title":"Wystartowała edycja wakacyjna kursu C++","uri":"/post/wystartowala-edycja-wakacyjna-kursu-c/"},{"categories":["kurs c++","kurs","Nokia Garage","programowanie","wrocław"],"content":"Nokia Garage Jedne z pierwszych lekcji tej edycji odbyły się w Nokia Garage. Jest to miejsce, które sprzyja kreatywnej pracy i zostało zaprojektowane w szczególny sposób. Do wpisu wrzuciłem kilka zdjęć z Nokia Garage. Było tam kilka ciekawostek technologicznych, z których najbardziej użyteczną dla nas była możliwość bezprzewodowego wyświetlania obrazu na kilku telewizorach i projektorach jednocześnie. Bardzo ciekawe były tez smart-tablice, które wyglądały jak zwykłe flipcharty, ale po zeskanowaniu widniejącego na nich kodu QR, uczestnicy mogli na ekranach smartfonów śledzić to co jest obecnie pisane na tablicy. Plusem tego miejsca była jego wszechstronność – każdy mógł pracować w dowolnej pozycji – stojącej przy wysokim stole, albo nawet leżącej na niskich pufach. Nokia Garage jest miejscem, które wspiera rozwój rozwiązań z zakresu: IoT, 5G, Machine Learning, Artificial Intelligence, VR i AR. Jeśli masz pomysł, który chcesz rozwijać i jest związany z powyższymi technologiami, to możesz skontaktować się z Garage Band’em. I uwaga: wcale nie musisz być pracownikiem Nokii. ","date":"2018-08-08","objectID":"/post/wystartowala-edycja-wakacyjna-kursu-c/:3:0","tags":["Post","Stacjonarny kurs C++"],"title":"Wystartowała edycja wakacyjna kursu C++","uri":"/post/wystartowala-edycja-wakacyjna-kursu-c/"},{"categories":["java","kurs","programowanie","wrocław"],"content":"Organizacja W październiku planujemy pierwszą edycję kursu programowania w języku Java. Kurs ten pozwoli na poszerzenie znajomości Javy i dobrych praktyk dla przyszłych programistów. Jest on dedykowany wszystkim osobom, które mają podstawowe doświadczenie w programowaniu, znają podstawy programowania obiektowego i chciałyby w przyszłości rozpocząć pracę jako programista Java. Wszystkie szczegóły zostaną ustalone do końca sierpnia 2018. Kurs programowania Java będzie dostępny tylko dla jednej grupy: start 7 października 2018 spotkania po 4 godziny w soboty od 10:00 do 14:00 12 spotkań max 12 osób ","date":"2018-08-06","objectID":"/post/kurs-programowania-java-dla-przyszlych-programistow/:1:0","tags":["Post","Kurs stacjonarny Java"],"title":"Kurs programowania Java dla przyszłych programistów","uri":"/post/kurs-programowania-java-dla-przyszlych-programistow/"},{"categories":["java","kurs","programowanie","wrocław"],"content":"Koszty Kurs Javy stanowi poszerzenie naszej oferty. Pierwsza edycja dostępna jest w promocyjnej cenie 1500 zł (30 zł za godzinę). Domyślnie zakładamy płatności w comiesięcznych ratach. Do kursu wlicza się w sumie 50 godzin wspólnych spotkań, nielimitowana liczba godzin spędzonych na projektach grupowych i indywidualnych oraz nielimitowany czas konsultacji online. Pierwsze zajęcia z systemu kontroli wersji git będą darmowe i uczestnictwo w nich nie będzie powodowało obowiązku uczestniczenia w całym kursie. Zajęcia te odbędą się jednak w większym gronie. ","date":"2018-08-06","objectID":"/post/kurs-programowania-java-dla-przyszlych-programistow/:2:0","tags":["Post","Kurs stacjonarny Java"],"title":"Kurs programowania Java dla przyszłych programistów","uri":"/post/kurs-programowania-java-dla-przyszlych-programistow/"},{"categories":["java","kurs","programowanie","wrocław"],"content":"Formy zajęć Kurs Java dla przyszłych programistów będzie odbywać się w nietypowy sposób, gdzie każde zajęcia mają formę inną od poprzednich, aby pokazać różne techniki pracy programistów. Zastosujemy Pair Programming, Coding Dojo, ćwiczenia symulacyjne, ćwiczenia proceduralne, Code Review, Continuous Integration i parę innych rzeczy. Poznamy też Scruma 🙂 W samym kursie bardzo duży nacisk położony jest na pracę w grupie podczas tworzenia projektów grupowych. Tej umiejętności brakuje bez wyjątku każdej osobie, która samodzielnie uczyła się programowania albo opuściła mury uczelni. ","date":"2018-08-06","objectID":"/post/kurs-programowania-java-dla-przyszlych-programistow/:3:0","tags":["Post","Kurs stacjonarny Java"],"title":"Kurs programowania Java dla przyszłych programistów","uri":"/post/kurs-programowania-java-dla-przyszlych-programistow/"},{"categories":["java","kurs","programowanie","wrocław"],"content":"Tematyka kursu Narzędzia programisty Standardy pisania kodu Scrum Wyjątki Generyki Zarządzanie pamięcią i garbage collector Praca z kolekcjami, funkcyjne przetwarzanie strumieni danych Testy jednostkowe i TDD Nowoczesna java 8+ Dobre praktyki programistyczne (KISS, DRY, YAGNI, SOLID) Szablony Ile powinieneś zarabiać, dobre CV, porady rekrutacyjne Opcjonalnie po zakończeniu kursu można zdecydować się na symulacje rozmów kwalifikacyjnych - indywidualnie 2 h, 350 zł. Po takiej rozmowie od razu dostajesz informację zwrotną o tym jak Ci poszło i nad czym musisz poprawcować, aby lepiej wypaść. Po kursie istnieje możliwość polecenia najlepszych uczestników do pracy w dobrych projektach.Jeśli interesują Cię tylko niektóre wybrane lekcje z naszej oferty, również zapraszamy do kontaktu. ","date":"2018-08-06","objectID":"/post/kurs-programowania-java-dla-przyszlych-programistow/:4:0","tags":["Post","Kurs stacjonarny Java"],"title":"Kurs programowania Java dla przyszłych programistów","uri":"/post/kurs-programowania-java-dla-przyszlych-programistow/"},{"categories":["java","kurs","programowanie","wrocław"],"content":"Wymagania język angielski na poziomie B1 znajomość podstaw programowania obiektowego, w celu odświeżenia wiedzy lub nauczenia się podstaw polecamy darmowy kurs online Kurs Java - Kobiety do kodu (świetna strona nie tylko dla kobiet 😉 ","date":"2018-08-06","objectID":"/post/kurs-programowania-java-dla-przyszlych-programistow/:5:0","tags":["Post","Kurs stacjonarny Java"],"title":"Kurs programowania Java dla przyszłych programistów","uri":"/post/kurs-programowania-java-dla-przyszlych-programistow/"},{"categories":["java","kurs","programowanie","wrocław"],"content":"Zgłoszenia na kurs Java Zgłoszenia na kurs przyjmujemy na 3 sposoby: napisz maila na pawel@coders.school zadzwoń pod 721 158 313 wypełnij formularz zgłoszeniowy ","date":"2018-08-06","objectID":"/post/kurs-programowania-java-dla-przyszlych-programistow/:6:0","tags":["Post","Kurs stacjonarny Java"],"title":"Kurs programowania Java dla przyszłych programistów","uri":"/post/kurs-programowania-java-dla-przyszlych-programistow/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Organizacja W listopadzie planowana jest kolejna edycja kursu C++. Jest to kurs C++ dla przyszłych programistów. Kurs ten jest dedykowany wszystkim osobom, które mają akademickie doświadczenie w programowaniu, znają podstawy programowania obiektowego i chciałyby rozpocząć pracę jako programista C++. W samym Wrocławiu jest dużo ofert pracy na to stanowisko. Wszystkie szczegóły zostaną ustalone do końca października 2018. Wstępne założenia są takie: grupa weekendowa spotkania po 5 godzin w soboty start 17 listopada 2018 od 10:00 do 15:00 10 spotkań max 12 osób grupa wieczorowa spotkania po 3,5h we wtorki start 13 listopada 2018 od 16:30 do 20:00 14 spotkań max 12 osób ","date":"2018-07-18","objectID":"/post/kurs-c-dla-przyszlych-programistow/:1:0","tags":["c++","git","kurs","wrocław"],"title":"Kurs C++ dla przyszłych programistów","uri":"/post/kurs-c-dla-przyszlych-programistow/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Koszty Kurs C++ w tej edycji odbędzie się jeszcze w promocyjnej cenie (ale nie aż tak promocyjnej jak poprzednia). Zainteresowanie poprzednią edycją przekroczyło trochę nasze oczekiwania 🙂 Koszt całości jest obecnie ustalony na 2250 zł, czyli 45 zł za godzinę. Domyślnie zakładamy płatność w comiesięcznych ratach. Do kursu wlicza się w sumie 50 godzin wspólnych spotkań, nielimitowana liczba godzin spędzonych na projektach grupowych i indywidualnych oraz nielimitowany czas konsultacji online. Pierwsze zajęcia z systemu kontroli wersji git będą darmowe i uczestnictwo w nich nie będzie powodowało obowiązku uczestniczenia w całym kursie. Zajęcia te odbędą się jednak w większym gronie. ","date":"2018-07-18","objectID":"/post/kurs-c-dla-przyszlych-programistow/:2:0","tags":["c++","git","kurs","wrocław"],"title":"Kurs C++ dla przyszłych programistów","uri":"/post/kurs-c-dla-przyszlych-programistow/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Formy zajęć Kurs C++ dla przyszłych programistów będzie odbywać się w nietypowy sposób, gdzie każde zajęcia mają formę inną od poprzednich, aby pokazać różne techniki pracy programistów. Zastosujemy Pair Programming, Coding Dojo, ćwiczenia symulacyjne, ćwiczenia proceduralne, Code Review, Continuous Integration i parę innych rzeczy. Poznamy też Scruma 🙂 W samym kursie bardzo duży nacisk położony jest na pracę w grupie podczas tworzenia projektów grupowych. Tej umiejętności brakuje bez wyjątku każdej osobie, która samodzielnie uczyła się programowania albo opuściła mury uczelni. ","date":"2018-07-18","objectID":"/post/kurs-c-dla-przyszlych-programistow/:3:0","tags":["c++","git","kurs","wrocław"],"title":"Kurs C++ dla przyszłych programistów","uri":"/post/kurs-c-dla-przyszlych-programistow/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Tematyka kursu Narzędzia programisty Standardy pisania kodu Scrum Wyjątki Wskaźniki, referencje, kopie Obiektowy C++, polimorfizm Wycieki pamięci, inteligentne wskaźniki i zarządzanie pamięcią, valgrind STL – kontenery, iteratory, funktory, algorytmy Testy jednostkowe i TDD, debugowanie i gdb Nowoczesny C++ (C++11, C++14, C++17) Dobre praktyki programistyczne (KISS, DRY, YAGNI, SOLID) Szablony Ile powinieneś zarabiać, dobre CV, porady rekrutacyjne Opcjonalnie po zakończeniu kursu można zdecydować się na Symulacje rozmów kwalifikacyjnych - indywidualnie 2 h, 350 zł. Po takiej rozmowie od razu dostajesz informację zwrotną o tym jak Ci poszło i nad czym musisz poprawcować, aby lepiej wypaść. Po kursie istnieje możliwość polecenia najlepszych uczestników do pracy w dobrych projektach. Jeśli interesują Cię tylko niektóre wybrane lekcje z naszej oferty, również zapraszamy do kontaktu. ","date":"2018-07-18","objectID":"/post/kurs-c-dla-przyszlych-programistow/:4:0","tags":["c++","git","kurs","wrocław"],"title":"Kurs C++ dla przyszłych programistów","uri":"/post/kurs-c-dla-przyszlych-programistow/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Wymagania język angielski na poziomie B1 znajomość podstaw programowania (w celu odświeżenia wiedzy lub nauczenia się podstaw polecamy darmowy kurs online Kurs C++ Mirosława Zelenta) znajomość programowania obiektowego w C++(polecamy przerobić darmowy kurs online Obiektowy C++ Mirosława Zelenta) ","date":"2018-07-18","objectID":"/post/kurs-c-dla-przyszlych-programistow/:5:0","tags":["c++","git","kurs","wrocław"],"title":"Kurs C++ dla przyszłych programistów","uri":"/post/kurs-c-dla-przyszlych-programistow/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Zgłoszenia na kurs C++ Zgłoszenia na kurs przyjmujemy na 3 sposoby: napisz maila na lukasz@coders.school zadzwoń pod 787 362 825 wypełnij formularz: https://coders.school/zglos-zainteresowanie/ ","date":"2018-07-18","objectID":"/post/kurs-c-dla-przyszlych-programistow/:6:0","tags":["c++","git","kurs","wrocław"],"title":"Kurs C++ dla przyszłych programistów","uri":"/post/kurs-c-dla-przyszlych-programistow/"},{"categories":["Post"],"content":"Postanowiłem, że przedstawię wam wyniki testu C++, który jest od dłuższego czasu dostępny na Coders School. Niestety wyniki te są dla mnie zatrważające. Przygotowując ten test niecały rok temu, stwierdziłem że umieszczę w nim pytania praktyczne i przekrojowe. Takie pytania, które sam zadałbym na rozmowie rekrutacyjnej, gdybym miał zatrudnić do pracy osobę świeżo po studiach. W teście jest tylko 8 pytań i tylko jedna poprawna odpowiedź na każde pytanie. Miałem nadzieję, że rozkład punktów będzie rozkładem Gaussa i najwięcej będzie wyników w okolicach 50%. Ale rzeczywistość jest inna. Poniżej prezentuję rozkład wyników testu C++ na dzień dzisiejszy, czyli 12 lipca 2018. 2 Jest niepokojąco dużo wyników rzędu 1 lub 2 punkty. Mediana wyników wynosi 2, a średnia 2,9 punkta. W teście wzięło udział póki co 136 osób. Nie wiem czy mogę wyniki testu C++ interpretować tak, że na tę stronę zaglądają głównie osoby, które chcą się uczyć języka C++. Swoje kursy kieruję mimo wszystko do osób z wiedzą akademicką, czyli takich, które pisały już coś w języku C++ np. na studiach, ale nie mają jeszcze doświadczenia komercyjnego. Wiem jednak jakie są realia na kierunkach informatycznych i niestety nie uczą one dokładnie tego, czego oczekują pracowadcy od absolwentów. Przykładowo, standard języka C++11, który ma już 7 lat nie jest zbytnio wspominany na uczelniach, a w sposób znaczący zmienił on sposób programowania w języku C++. Wdrożenie i nauka absolwenta do pracy w firmie często trwa nawet 3 miesiące. Jest to realny koszt dla pracodawcy. Zanim absolwent będzie produktywny i będzie mógł samodzielnie dostarczać dobrej jakości rozwiązania, zazwyczaj mija dużo czasu. Dużo osób pyta mnie też o kurs języka C++ od podstaw. Ja jednak polecam samodzielną naukę podstaw z kursów online dostępnych w internecie. Są 2 bardzo dobre i co ważne, darmowe kursy online w języku polskim. Zawsze polecam przerobienie tych kursów wszystkim swoim kursantom przed rozpoczęciem kursu u mniej. Są to Kurs C++ Mirosława Zelenta oraz Kurs Obiektowego C++ Mirosława Zelenta Jeśli chcesz się przetestować to zapraszam do testu języka C++. A jeśli chcesz się doszkolić, aby łatwiej było Ci znaleźć pracę jako programista C++ to zgłoś zainteresowanie kursem C++ online lub stacjonarnym. Najbliższa edycja planowana jest na październik/listopad 2018. ","date":"2018-07-12","objectID":"/post/smutne-wyniki-testu-c/:0:0","tags":["c++","test","wyniki"],"title":"Smutne wyniki testu C++","uri":"/post/smutne-wyniki-testu-c/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Nasz zimowo-wiosenny kurs C++ zakończył się 13 maja 2018. Podczas kursu [uczestnicy][1] uczyli się m. in. o gicie, make-u i CMake-u, kompilatorach, zarządzaniu pamięcią, wyjątkach, STLu, C++11, C++14, C++17, Testowaniu (TDD, Google Test), refactoringu, zasadach SOLID, szablonach, Scrumie. Była to nasza pierwsza pełna edycja kursu C++, więc jest co świętować. Liczba commitów na [GitHubie][2] była liczona w setkach. Nasi absolwenci są przygotowani do podjęcia pracy w zawodzie programisty C++. Część z nich już dostała oferty pracy. Na zdjęciu są widoczni tylko niektórzy z nich 🙂 Życzymy powodzenia! ","date":"2018-05-25","objectID":"/post/zimowo-wiosenny-kurs-c-zakonczony/:0:0","tags":["c++","git","kurs","programowanie","wrocław","podsumowanie"],"title":"Zimowo-wiosenny kurs C++ zakończony","uri":"/post/zimowo-wiosenny-kurs-c-zakonczony/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Organizacja Jeśli jesteś zainteresowany/-a uczestnictwem w kolejnej edycji kursu C++ to mam garść informacji. Kurs programowania w języku C++ jest dedykowany wszystkim osobom, które chciałyby rozpocząć pracę jako programista C++. W samym Wrocławiu jest dużo ofert pracy na to stanowisko. Wszystkie szczegóły zostaną ustalone do końca maja 2018. Na razie wstępne plany są takie: grupa weekendowa start 1 lipca 2018 spotkania po ok. 6 h w niedziele co 2 tygodnie od 10:00 do 16:00 8 spotkań max 10 osób grupa wieczorowa start 4 lipca 2018 spotkania po 4 h w środy co tydzień od 16:00 do 20:00 12 spotkań max 10 osób ","date":"2018-03-19","objectID":"/post/kurs-programowania-cpp/:1:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ – edycja wakacyjna 2018","uri":"/post/kurs-programowania-cpp/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Koszty Kurs programowania w edycji wakacyjnej odbędzie się jeszcze w promocyjnej cenie (ale nie aż tak promocyjnej jak poprzednia). Koszt całości to 1800 zł. Można płacić w ratach. Pierwsze zajęcia z systemu kontroli wersji git będą darmowe i uczestnictwo w nich nie będzie powodowało obowiązku uczestniczenia w całym kursie. Zajęcia te odbędą się jednak w dużym gronie. ","date":"2018-03-19","objectID":"/post/kurs-programowania-cpp/:2:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ – edycja wakacyjna 2018","uri":"/post/kurs-programowania-cpp/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Formy zajęć Szkolenie będzie odbywać się w nietypowy sposób, gdzie każde zajęcia mają formę inną od poprzednich, aby pokazać różne techniki pracy programistów. Zastosujemy Pair Programming, Coding Dojo, ćwiczenia symulacyjne, ćwiczenia proceduralne, Code Review, Continuous Integration i parę innych rzeczy. Poznamy też Scruma 🙂 ","date":"2018-03-19","objectID":"/post/kurs-programowania-cpp/:3:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ – edycja wakacyjna 2018","uri":"/post/kurs-programowania-cpp/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Tematyka kursu Narzędzia programisty Standardy pisania kodu Scrum Wyjątki Wskaźniki, wycieki pamięci, inteligentne wskaźniki i zarządzanie pamięcią, valgrind STL – kontenery, iteratory, funktory, algorytmy Testy jednostkowe i TDD, gdb Nowoczesny C++ (C++11, C++14, C++17) Dobre praktyki programistyczne (KISS, DRY, YAGNI, SOLID) Szablony Ile powinieneś zarabiać, dobre CV, porady rekrutacyjne Opcjonalnie po zakończeniu kursu można zdecydować się na Symulacje rozmów kwalifikacyjnych - indywidualnie 2 h, 300 zł. Po takiej rozmowie od razu dostajesz informację zwrotną o tym jak Ci poszło i nad czym musisz poprawcować, aby lepiej wypaść. Po kursie istnieje możliwość polecenia najlepszych uczestników do pracy w dobrych projektach. Jeśli interesują Cię tylko niektóre wybrane lekcje z naszej oferty, również zapraszamy do kontaktu. ","date":"2018-03-19","objectID":"/post/kurs-programowania-cpp/:4:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ – edycja wakacyjna 2018","uri":"/post/kurs-programowania-cpp/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Wymagania język angielski na poziomie B1 znajomość podstaw programowania (w celu odświeżenia wiedzy lub nauczenia się podstaw polecam darmowy kurs C++ online Mirosława Zelenta znajomość programowania obiektowego w C++ ","date":"2018-03-19","objectID":"/post/kurs-programowania-cpp/:5:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ – edycja wakacyjna 2018","uri":"/post/kurs-programowania-cpp/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Zgłoszenia na kurs C++ Zgłoszenia na kurs przyjmujemy na 3 sposoby: napisz maila na lukasz@coders.school zadzwoń pod 787 362 825 wypełnij formularz zgłoszeniowy na stronie ","date":"2018-03-19","objectID":"/post/kurs-programowania-cpp/:6:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ – edycja wakacyjna 2018","uri":"/post/kurs-programowania-cpp/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Serdecznie zapraszam na zapisy na nową edycję kursu programowania C++ we Wrocławiu. Zapraszam każdego, kto zna same podstawy tego języka, czyli potrafi napisac Hello world, wie jak działa instrukcja if oraz pętla for. Czy wiesz, że... Ponad 50% studentów informatyki nawet nie słyszało o systemie kontroli wersji, takim jak Git? Nikt nie zatrudni programisty, który nie zna tego narzędzia. ","date":"2017-12-04","objectID":"/post/kurs-programowania-c-2018-wroclaw/:0:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ 2018","uri":"/post/kurs-programowania-c-2018-wroclaw/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Program i harmonogram kursu Narzędzia programisty (git, make, cmake), standardy pisania kodu (07.01.2018, godz. 10:00-15:00) Wyjątki, wskaźniki, wycieki pamięci, inteligentne wskaźniki i zarządzanie pamięcią, valgrind (21.01.2018, godz. 10:00-15:00) STL – kontenery, iteratory, funktory (04.02.2018, godz. 10:00-15:00) STL – algorytmy i zadania (18.02.2018, godz. 10:00-15:00) Testy jednostkowe i TDD, gdb (04.03.2018, godz. 10:00-15:00) C++11, C++14, C++17 (18.03.2018, godz. 10:00-15:00) Coding Dojo, dobre praktyki programistyczne (KISS, DRY, YAGNI, SOLID) (15.04.2018, godz. 10:00-15:00) Projekty grupowe, podsumowanie, powtórka, utrwalenie (29.04.2018, godz. 10:00-15:00) Ile powinieneś zarabiać, dobre CV, porady rekrutacyjne (13.05 2018, godz. 10:00-15:00) Symulacje rozmów kwalifikacyjnych (indywidualnie 2h/osoba) (20.05.2018) Pomimo, że z nazwy mój kurs programowania C++ brzmi jak kurs czysto techniczny, to są na nim także porady rekrutacyjne i symulacje rozmów kwalifikacyjnych, które są ogromnie przydatne, gdy będziesz chciał pracować jako programista. Powiem Ci też, którzy pracodawcy doceniają juniorów, a u których tylko zmarnujesz swój czas. Jeśli wyrazisz taką chęć, to z przyjemnością polecę Cię do pracy do ciekawych projektów we Wrocławiu. ","date":"2017-12-04","objectID":"/post/kurs-programowania-c-2018-wroclaw/:1:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ 2018","uri":"/post/kurs-programowania-c-2018-wroclaw/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Miejsce Kurs programowania C++ odbywa się w Centrum Przedsiębiorczości i Biznesu DĄBIE na terenie dawnej zajezdni tramwajowej Dąbie - Wróblewskiego 38, 51-627 Wrocław. Bezproblemowy dojazd tramwajami i autobusami, darmowy parking dla zmotoryzowanych. Woda, kawa i herbata gratis 🙂 ","date":"2017-12-04","objectID":"/post/kurs-programowania-c-2018-wroclaw/:2:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ 2018","uri":"/post/kurs-programowania-c-2018-wroclaw/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Cena Cena to 150 zł za zajęcia (30 zł / godz). Ostatnie zajęcia to symulacje rozmów kwalifikacyjnych, które są opcjonalne. Pomogą Ci przygotować się do podjęcia pracy jako programista. W przypadku płatności za cały kurs z góry zajęcia te są gratis. W przypadku płatności przed każdymi zajęciami koszt to 60 zł. ","date":"2017-12-04","objectID":"/post/kurs-programowania-c-2018-wroclaw/:3:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ 2018","uri":"/post/kurs-programowania-c-2018-wroclaw/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Sprzęt Na zajęcia powinieneś przynieść własnego laptopa. Przed pierwszymi zajęciami dam Ci jasne instrukcje, jak należy skonfigurować swoje środowisko programistyczne. Pierwsze zajęcia służą także rozwiązaniu problemów z konfiguracją. W przypadku, gdy nie posiadasz własnego laptopa, a chciałbyś uczestniczyć w zajęciach - daj znać. Zorganizujemy Ci jakiś sprzęt 🙂 ","date":"2017-12-04","objectID":"/post/kurs-programowania-c-2018-wroclaw/:4:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ 2018","uri":"/post/kurs-programowania-c-2018-wroclaw/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Trener Kurs poprowadzi trener Łukasz Ziobroń (to ja :)) Łukasz od ponad 5 lat zawodowo programuje w językach C++ i Python. Od ponad 3 lat szkoli studentów na Politechnice Wrocławskiej i Uniwersytecie Wrocławskim w ramach kursu Praktyczne Aspekty Rozwoju Oprogramowania organizowanym przez wrocławski oddział Nokii. Przeprowadził już wiele szkoleń wewnętrznych w Nokii, nie tylko z zakresu programowania. Na YouTube możesz znaleźć filmy z konferencji code::dive, na których Łukasz opowiada o sztucznej inteligencji w samochodach, historii i przyszłości języka C++, czy też o sztuczkach i kruczkach w standardach C++11 i C++14. ","date":"2017-12-04","objectID":"/post/kurs-programowania-c-2018-wroclaw/:5:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ 2018","uri":"/post/kurs-programowania-c-2018-wroclaw/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Organizacja Zachęcam do zapisów. Liczba miejsc jest ograniczona. Przyjdź na pierwszą lekcję i dowiedz się więcej. Nie zobowiązuje Cię to do przychodzenia na kolejne zajęcia. Dopiero gdy stwierdzisz, że to jest coś dla Ciebie to podpiszemy umowę szkoleniową. Przeczytaj kim jesteśmy, jak uczymy i co nas wyróżnia lub jakie korzyści możesz osiągnąć, biorąc udział w moim kursie. Najszybciej zapiszesz się pisząc maila na lukasz@coders.school lub dzwoniąc / pisząc SMS pod numer 787 362 825. Możesz też skorzystać z formularzy kontaktowych dostępnych na tej stronie. ","date":"2017-12-04","objectID":"/post/kurs-programowania-c-2018-wroclaw/:6:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Kurs programowania C++ 2018","uri":"/post/kurs-programowania-c-2018-wroclaw/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Z powodu dłuższego wyjazdu służbowego do USA jestem zmuszony zmienić harmonogram semestralnego kursu programowania dla studentów, który miał się rozpocząć w październiku. Kurs ten rozpocznie się 6 listopada. Za wszelkie niedogodności przepraszam. Mam jednak nadzieję, że umiejętności nabyte przeze mnie podczas podróży służbowej przyczynią się także do podniesienia jakości moich kursów. Nowy harmonogram kursu zostanie przesłany do osób, które zapisały się już na nasz kurs. W przypadku gdy jesteś zainteresowany/-a semestralnym kursem programowania proszę o kontakt mailowy lub telefoniczny. Przypominam tylko, że wiedza studentów opuszczających uczelnie na kierunku informatyka podejmujących pracę jako programista jest w 85% przypadków (według moich statystyk) niewystarczająca dla pracodawców. Jeśli chcesz zacząć swoją karierę lepiej od innych zapraszam do zapisów. PS. Jako bonus na zajęciach będziesz mógł zajadać się pizzą na nasz koszt 🙂 ","date":"2017-09-21","objectID":"/post/semestralny-kurs-programowania-dla-studentow/:0:0","tags":["kurs","programowanie","wrocław","pizza"],"title":"Semestralny kurs programowania dla studentów opóźniony","uri":"/post/semestralny-kurs-programowania-dla-studentow/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"W listopadzie startuje semestralny kurs programowania w języku C++ na poziomie zaawansowanym. Kurs jest adresowany do studentów uczelni technicznych, którzy pragną zostać programistami oraz dla osób już pracujących, ale chcących pogłębić swoją wiedzę z języka C++. Wiedza zdobyta na tym kursie pozwoli Ci także gładko przejść przez wszystkie przedmioty programistyczne na studiach. ","date":"2017-09-12","objectID":"/post/semestralny-kurs-programowania/:0:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Semestralny kurs programowania","uri":"/post/semestralny-kurs-programowania/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Na kursie pokryjemy poniższe tematy: Spotkanie organizacyjne przy piwie Narzędzia programisty (git, make, cmake), standardy pisania kodu Wyjątki, wskaźniki, wycieki pamięci, inteligentne wskaźniki i zarządzanie pamięcią, valgrind STL - kontenery, iteratory, funktory STL - algorytmy i zadania Testy jednostkowe i TDD, gdb C++11, C++14, C++17 Coding Dojo, dobre praktyki programistyczne (KISS, DRY, YAGNI, SOLID) Projekty grupowe, podsumowanie, powtórka, utrwalenie Ile powinieneś zarabiać, dobre CV, porady rekrutacyjne Symulacje rozmów kwalifikacyjnych (indywidualnie 2h/osoba) ","date":"2017-09-12","objectID":"/post/semestralny-kurs-programowania/:1:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Semestralny kurs programowania","uri":"/post/semestralny-kurs-programowania/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"Organizacja Liczba miejsc jest ograniczona. Ostateczna cena kursu zależeć będzie od liczby uczestników, dlatego lepiej będzie, jeśli wciągniesz w to swoich znajomych 🙂 Przy 10 osobach w grupie cena kursu to 1500 PLN. W przypadku większego zainteresowania możemy otworzyć dodatkowe grupy. Jeśli polecisz kurs swojemu koledze (w tej albo w kolejnej edycji kursu) to Ty dostaniesz zwrot 100 zł, a kolega dostanie zniżkę na kurs w wysokości również 100 zł. Wystarczy że kolega poda Twój adres e-mail w formularzu zapisów. Jeśli osiągniesz dobre wyniki na kursie to zostaniesz polecony bezpośrednio do menadżerów kilku ciekawych projektów z wrocławskich firm programistycznych (oczywiście jeśli będziesz chętny). Gdyby kurs nie spełnił Twoich oczekiwań, zwrócimy Ci pieniądze. Ale pamiętaj, że kupujesz nie samą wiedzę i materiały. Kupujesz także wymianę doświadczeń, projekty które zostaną w Twoim CV, polecenia do pracy, ulepszenie swojego CV i doradztwo zawodowe, a w najlepszym przypadku szansę na lepsze zarobki. Gwarantujemy, że cena jaką zapłacisz za kurs na pewno zwróci Ci się bardzo szybko. Zapisz się (nieaktywne) Sprawdź się ","date":"2017-09-12","objectID":"/post/semestralny-kurs-programowania/:2:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Semestralny kurs programowania","uri":"/post/semestralny-kurs-programowania/"},{"categories":["Test"],"content":"Ładuję… Poznaj wyjaśnienia odpowiedzi do testu Korzystając z okazji gorąco zachęcam do zapisania się do mojego newslettera. Jeśli interesuje Cię nauka C++ lub dopiero chcesz rozpocząć swoją przygodę z programowaniem w tym języku, znajdziesz tam mnóstwo ku temu okazji. Zapisując się do listy otrzymasz darmowe materiały do nauki nowoczesnego C++. Co jakiś czas przesyłam też darmowe fragmenty lekcji i webinarów, w których udowadniam, że C++ nie jest taki straszny jak go malują :) ","date":"2017-06-07","objectID":"/sprawdz-sie/:0:0","tags":["kurs","online","programowanie"],"title":"Sprawdź się","uri":"/sprawdz-sie/"},{"categories":["Post","Stacjonarny kurs C++"],"content":"W lipcu startuje kurs wakacyjny języka C++ na poziomie zaawansowanym. Kurs jest adresowany do studentów uczelni technicznych, którzy pragną zostać programistami oraz dla osób już pracujących, ale chcących pogłębić swoją wiedzę z języka C++. Na kursie pokryjemy poniższe tematy: 06.07 17:00-19:00 - Spotkanie organizacyjne przy piwie 15.07 09:00-15:00 - Narzędzia programisty (git, make, cmake), standardy pisania kodu 16.07 09:00-15:00 - Wyjątki, wskaźniki, wycieki pamięci, inteligentne wskaźniki i zarządzanie pamięcią, valgrind 29.07 09:00-15:00 - STL - kontenery, iteratory, funktory 30.07 09:00-15:00 - STL - algorytmy i zadania 12.08 09:00-15:00 - Testy jednostkowe i TDD, gdb 13.08 09:00-15:00 - C++11, C++14, C++17 26.08 09:00-15:00 - Coding Dojo, dobre praktyki programistyczne (KISS, DRY, YAGNI, SOLID) 27.08 09:00-15:00 - Projekty grupowe, podsumowanie, powtórka, utrwalenie 09.09 09:00-15:00 - Ile powinieneś zarabiać, dobre CV, porady rekrutacyjne 10.09 08:00-20:00 - Symulacje rozmów kwalifikacyjnych (indywidualnie 2h/osoba) Miejsce: Wrocławski Park Technologiczny, Muchoborska 18, 50-001 Wrocław Normalna cena kursu wynosi 3500 PLN. Ponieważ jest to pierwsza publiczna edycja kursu (wcześniej kurs był prowadzony dla firm jako cykl wewnętrznych szkoleń) to mamy dużą promocję cenową. Promocyjna cena kursu to 1800 PLN (30 PLN/h). Gwarantujemy Ci, że lepszej ceny nie znajdziesz. Promocja jest ograniczona czasowo, aby z niej skorzystać musisz zapisać się na kurs najpóźniej do 25 czerwca 2017 włącznie. Liczba miejsc również jest ograniczona. W przypadku większego zainteresowania możemy otworzyć dodatkowe grupy w innych terminach. Jeśli polecisz kurs swojemu koledze (w tej albo w kolejnej edycji kursu) to Ty dostaniesz zwrot 100 zł, a kolega dostanie zniżkę na kurs w wysokości również 100 zł. Wystarczy że kolega poda Twój adres e-mail w formularzu zapisów. Jak widać na powyższej rozpisce zajęcia grupowe będą odbywać się w trybie zaocznym, czyli w soboty i niedziele co 2 tygodnie. Każde spotkanie trwa około 6 godzin (spotkanie organizacyjne ok. 2h). Oprócz tego każdy uczestnik będzie musiał zarezerwować sobie dodatkowo około 5-10 godzin w tygodniu na pracę domową i przygotowanie do zajęć. Osoby, które osiągną dobre wyniki na kursie zostaną polecone bezpośrednio do menadżerów kilku ciekawych projektów z wrocławskich firm programistycznych (oczywiście jeśli te osoby będą chętne). Gdyby kurs nie spełnił Twoich oczekiwań, zwrócimy Ci pieniądze. Ale pamiętaj, że kupujesz nie samą wiedzę i materiały. Kupujesz także wymianę doświadczeń, projekty które zostaną w Twoim CV, polecenia do pracy, ulepszenie swojego CV i doradztwo zawodowe, a w najlepszym przypadku szansę na lepsze zarobki. Gwarantujemy, że cena jaką zapłacisz za kurs na pewno zwróci Ci się bardzo szybko. Zapisz się (nieaktywne) Sprawdź się ","date":"2017-06-07","objectID":"/post/wakacyjny-kurs-c/:0:0","tags":["c++","kurs","programowanie","wrocław"],"title":"Wakacyjny kurs C++","uri":"/post/wakacyjny-kurs-c/"},{"categories":["Warto wiedzieć"],"content":" Język C++ Jest kilka szkół, które uczą głównie Web Developmentu (HTML, CSS, PHP, Javascript), ale mało która szkoła uczy języka C++, który przeżywa swoje odrodzenie. Myślisz, że lata świetności tego języka dawno temu minęły? Wiemy, że na uczelni wykładowcy nie są na czasie. Pewnie Twoi znajomi programiści też mówią, że w C++ to pisały dinozaury, a teraz są bardziej nowoczesne języki jak Javascript (tja… i co tydzień ucz się nowego frameworka). Język C++ rozwija się teraz szybciej niż kiedykolwiek - nofas fa-terminal, które muszą szybko synchronizować terabajty danych między maszynami), w systemach wbudowanych (BTS, STB, elektronika użytkowa). Zobacz zresztą na oferty pracy 🙂 W samym Wrocławiu działa wiele firm, które poszukują programistów C++: Nokia, Credit Suisse, Opera, Tieto, Global Logic, Luxsoft, Sii, Siili, Power Media i wiele, wiele mniejszych. ","date":"2017-05-31","objectID":"/co-nas-wyroznia/:1:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"Co nas wyróżnia?","uri":"/co-nas-wyroznia/"},{"categories":["Warto wiedzieć"],"content":" Uniwersalne praktyki programistyczne Wiedza, którą się dzielimy to nie tylko sam język C++. Uczymy Software Developmentu i Software Engineeringu (po polsku Rozwoju Oprogramowania i Inżynierii Oprogramowania). To znaczy takich dobrych praktyk, które mają zastosowanie wszędzie, w każdym języku programowania i u każdego pracodawcy, bez wyjątku. ","date":"2017-05-31","objectID":"/co-nas-wyroznia/:2:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"Co nas wyróżnia?","uri":"/co-nas-wyroznia/"},{"categories":["Warto wiedzieć"],"content":" Cena Spokojnie znajdziesz podobne kursy do naszego (ale z innych języków), których cena dochodzi nawet do 12 000 PLN. Poszukaj 🙂 U nas jest jest znacznie taniej. ","date":"2017-05-31","objectID":"/co-nas-wyroznia/:3:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"Co nas wyróżnia?","uri":"/co-nas-wyroznia/"},{"categories":["Warto wiedzieć"],"content":" Poziom kursów Nie uczymy tylko absolutnych minimów na stanowiska juniorskie. Po naszych kursach możesz zdobyć taką wiedzę jaką ma programista z 2-letnim stażem. U nas musisz już znać podstawy programowania - wiedzieć co to jest if, for, switch, while, rekurencja, referencja. Jeśli to wiesz i potrafisz używać - nadajesz się. Po prostu pomagamy Ci zwiększyć zarobki, a nie przekwalifikować się na programistę z humanisty tylko dlatego, że ta grupa ludzi dobrze zarabia. Jeśli nie masz podstaw lub programowanie Cię nie rajcuje, to i tak nie dotrzesz do mitycznego poziomu 15k PLN. My nie owijamy w bawełnę mówiąc, że tyle zarobisz. ","date":"2017-05-31","objectID":"/co-nas-wyroznia/:4:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"Co nas wyróżnia?","uri":"/co-nas-wyroznia/"},{"categories":["Warto wiedzieć"],"content":" Praca w grupie Tworzymy zespoły. Integrujemy Was. Nie jesteście pozostawieni sami sobie. Uczycie się także nawzajem od siebie i wspólnie wykonujecie zadania. Nauczymy Was prawidłowej pracy zespołowej, bo w polskich szkołach tego się w ogóle nie uczy. Każdy ma sam sobie radzić, a potem nikt nie potrafi współpracować. A po zajęciach możemy sobie wyjść na piwo czy na kręgle :) ","date":"2017-05-31","objectID":"/co-nas-wyroznia/:5:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"Co nas wyróżnia?","uri":"/co-nas-wyroznia/"},{"categories":["Warto wiedzieć"],"content":" Informacje o zarobkach Powiemy Ci, jakie są faktyczne pensje w branży i jak będą kształtować się Twoje zarobki w przyszłości. “Wycenimy Cię” indywidualnie, tak jak to robi pracodawca, na podstawie rozmowy kwalifikacyjnej, testów i tego jak radzisz sobie na naszym kursie. ","date":"2017-05-31","objectID":"/co-nas-wyroznia/:6:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"Co nas wyróżnia?","uri":"/co-nas-wyroznia/"},{"categories":["Warto wiedzieć"],"content":" Świadomi trenerzy Mamy doświadczonych trenerów, którzy wcześniej prowadzili podobne zajęcia i którzy przeszli genialny program szkoleniowy “Train the Trainers”. Sama nazwa pewnie niewiele Wam mówi, ale takie doświadczenie odmieniło nas zupełnie jako trenerów. Jesteśmy świadomi wszystkich procesów zachodzących podczas nauki: zmęczenie, motywacja, rodzaj ćwiczeń, odprężenie. Potrafimy stosować techniki trenerskie odpowiednie dla danej grupy, jej poziomu umiejętności i trudności materiału do nauczenia. Uczyliśmy już studentów na Politechnice Wrocławskiej i Uniwersytecie Wrocławskim, występowaliśmy na konferencjach programistycznych, prowadziliśmy prelekcje na zawodach programistycznych. Na co dzień jesteśmy programistami, więc mamy non-stop kontakt z najświeższymi informacjami ze świata programowania. Często szkolimy pracowników wewnątrz firmy. Nasze zajęcia zawsze były bardzo wysoko oceniane przez uczestników. Możemy pokazać referencje osobiście 🙂 ","date":"2017-05-31","objectID":"/co-nas-wyroznia/:7:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"Co nas wyróżnia?","uri":"/co-nas-wyroznia/"},{"categories":["Warto wiedzieć"],"content":" Tryb szkoleń Spotkania w ramach naszych kursów odbywają się raz lub 2 razy na tydzień. Nie oferujemy intensywnych szkoleń w formie bootcamp (8h dziennie, 5 dni w tygodniu), gdyż wiemy, że taki tryb mocno obciąża człowieka psychicznie. Jesteśmy doświadczonymi trenerami z krwi i kości i wiemy, że jak szybko się czegoś nauczysz to tak samo szybko zapomnisz. Zakuć, zdać, zapomnieć… Brzmi znajomo? Nie z nami te numery. Kurs jest rozciągnięty w czasie, aby można było powtarzać zdobytą wiedzę i ćwiczyć ją praktycznie. ","date":"2017-05-31","objectID":"/co-nas-wyroznia/:8:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"Co nas wyróżnia?","uri":"/co-nas-wyroznia/"},{"categories":["Warto wiedzieć"],"content":" Nowoczesne techniki nauczania Zadajemy prace domowe i wymagany ich odrabiania. Stosujemy metody blended learning i flipped classrom czyli uczysz się zarówno podczas zajęć, jak i samemu w domu musisz przerobić pewien materiał, który Ci udostępnimy. Poza tym uczycie się nawzajem od siebie. Jesteśmy nastawieni na skuteczność kształcenia i jakość, a nie “jakoś”. Mamy indywidualne podejście do każdego, bo uczymy tylko w małych grupach. Na uczelni tego nie uświadczysz. W nauczaniu stosujemy Scrum, a właściwie eduScrum czyli taki sposób nauczania, w którym studenci mają wpływ na przebieg zajęć i tempo przerabiania materiału, a same zajęcia przebiegają w atmosferze wzajemnego szacunku, współpracy i otwartości. ","date":"2017-05-31","objectID":"/co-nas-wyroznia/:9:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"Co nas wyróżnia?","uri":"/co-nas-wyroznia/"},{"categories":["Warto wiedzieć"],"content":" Opieka mentora Macie opiekę mentora przez cały czas trwania kursu. Nasz kontakt nie ogranicza się tylko do zadań wykonywanych w czasie zajęć. Trenerzy dostępni są poprzez nasz komunikator grupowy Discord, pod mailem i telefonem (z wyjątkiem czasu, kiedy śpią). Wy robicie zadania także offline, a my Was motywujemy i podpowiadamy wam, jeśli na czymś ugrzęźniecie. Musicie tylko zapytać 😉 ","date":"2017-05-31","objectID":"/co-nas-wyroznia/:10:0","tags":["kurs","programowanie","mini kurs","konsultacje","nauka"],"title":"Co nas wyróżnia?","uri":"/co-nas-wyroznia/"}]